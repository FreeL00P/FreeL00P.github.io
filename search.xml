<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>软件工程与建模期末</title>
      <link href="/2023/06/22/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E4%B8%8E%E5%BB%BA%E6%A8%A1%E6%9C%9F%E6%9C%AB/"/>
      <url>/2023/06/22/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E4%B8%8E%E5%BB%BA%E6%A8%A1%E6%9C%9F%E6%9C%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="单选"><a href="#单选" class="headerlink" title="单选"></a>单选</h2><p><strong>软件模型</strong></p><p>瀑布模型<br>增量模型<br>快速原型模型<br>螺旋模型<br>喷泉模型</p><p><strong>需求分析阶段</strong></p><p>需求分析阶段的任务有：</p><ol><li>确定对系统的综合需求</li><li>分析系统的数据要求</li><li>导出系统的逻辑模型</li><li>修正开发计划</li></ol><p><strong>系统流程图</strong></p><p>符号<br>列子<br>分层</p><p><strong>数据字典</strong></p><p>数据字典的组成</p><ol><li>​数据流</li><li>​数据元素（数据分量）</li><li>​数据存储</li><li>​处理</li></ol><p>定义数据的方法</p><ol><li>顺序：以确定次序连接两个或多个分层</li><li>选择：即从两个或者多个可能的元素中取一个</li><li>重复：把指定的分量重复0次或者多次</li></ol><p>数据字典的用途</p><ul><li>主要作为分析阶段的工具</li></ul><p>数据字典的实现</p><ul><li>一般作为CASE结构化分析与设计工具</li></ul><p><strong>详细设计的任务</strong></p><ol><li>结构程序设计</li><li>人机界面设计</li><li>过程设计</li><li>数据结构设计</li><li>程序复杂程度定量度量</li></ol><p><strong>生命周期的阶段</strong></p><ul><li>软件定义-软件开发-运行维护</li></ul><ol><li>问题定义</li><li>可行性研究</li><li>需求分析</li><li>总体设计</li><li>详细设计</li><li>编码和单元测试</li><li>综合测试</li><li>软件维护</li></ol><p><strong>软件概要设计</strong></p><p><strong>面向数据流的软件设计方法</strong></p><p>结构化分析方法就是面向数据流自顶向下逐步求精进行需求分析的方法</p><p>信息流的类型</p><p>变换流</p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/image-20230620201808223.png" style="zoom: 50%;"><p>事务流</p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/image-20230620201839097.png" style="zoom:50%;"><p><strong>结构化分析方法</strong></p><p><strong>软件的可维护性</strong></p><p>决定软件可维护的因素</p><ol><li>可理解性</li><li>可测试性</li><li>可修改性</li><li>可移植性</li><li>可重用性</li></ol><p><strong>可行性分析</strong></p><p>技术可行性<br>经济可行性<br>操作可行性</p><p>可行性研究过程</p><p>复查系统规模和目标<br>研究目前正在使用的系统<br>导出新系统的高层逻辑模型<br>进一步定义问题<br>导出和评价供选择的模型的解法<br>推荐行动方针<br>草拟开发计划<br>书写文档提交审查</p><p><strong>详细设计</strong></p><p>设计出程序的详细规格说明</p><p>详细设计又叫模块设计，在这个阶段详细设计每个模块，确定实现模块功能所需要的算法和数据结构</p><p><strong>结构化程序设计</strong></p><p>顺序-选择-循环</p><p><strong>程序设计阶段</strong></p><p>程序设计阶段，开发团队将根据需求分析阶段的结果，设计出符合系统需求的软件架构和技术方案。程序设计阶段涉及的任务包括确定软件的模块化结构、编写程序设计文档、编写伪代码或流程图、选择编程语言和开发工具等。程序设计阶段的目标是为软件的实现提供清晰的指导，以确保软件能够按照预期的功能和性能要求进行开发。</p><p><strong>需求分析</strong></p><p>需求分析阶段的任务</p><ol><li>确认对系统的综合要求</li><li>分析系统的数据要求</li><li>导出系统的逻辑模型</li><li>修正系统的开发计划</li></ol><p><strong>总体设计</strong></p><p>系统该如何实现</p><p>过程</p><p>系统设计阶段：确定系统的具体实现方案|<br>结构设计阶段：确定软件结构</p><p>设计原理</p><p>模块化<br>抽象<br>逐步求精<br>信息隐藏和局部化<br>模块独立（高内聚，低耦合）</p><p><strong>内聚程度</strong></p><p>功能内聚 10’<br>顺序内聚 9’<br>通信内聚 7’<br>过程内聚 5’<br>时间内聚 3’<br>逻辑内聚 1’<br>偶然内聚 0’</p><p><strong>B</strong></p><p><strong>详细设计阶段的工具</strong></p><p>UML<br>ER图<br>数据流图（DFD)<br>状态图<br>序列图<br>流程图</p><p><strong>静态数据结构</strong></p><p>在计算机科学中，静态数据结构是指一种在创建后就不会再发生改变的数据结构。这意味着，一旦静态数据结构被创建，就不能再添加、删除或修改其中的元素。静态数据结构通常用于存储不需要频繁修改的数据，例如配置文件、静态资源文件、词典等。</p><p>常见的静态数据结构包括数组、链表、树、图等。这些数据结构在创建后，其大小和结构都不会再发生改变。例如，一个数组在创建后，其大小就已经确定，不能再添加或删除元素。同样地，一个树或图在创建后，其节点和边也不能再添加或删除。</p><p>静态数据结构的优点是访问速度快，因为其结构比较简单，访问元素的时间复杂度通常是 O(1) 或 O(log n) 级别。此外，静态数据结构的空间占用比较小，因为其大小是固定的，不会随着数据的增加而增加。缺点是不能动态修改数据，一旦创建后就不能再修改，因此不适用于需要频繁修改数据的场景。</p><p><strong>Jackson方法</strong></p><p>面向数据结构的设计方法</p><p><strong>PAD图</strong></p><p>问题分析图</p><p>用二维树形结构表示程序的控制流</p><p><strong>软件结构图</strong></p><p>描绘软件结构的图形工具</p><ol><li>层次图和HIPO图</li><li>结构图</li></ol><p><strong>增量模型</strong></p><p><strong>软件危机</strong></p><p>表现</p><ol><li>对软件开发成本和进度的估计不准确</li><li>用户对已完成的软件不满意</li><li>软件质量不行</li><li>软件没有文档</li><li>软件成本在计算机系统总成本中所占的比例越来越高</li><li>软件不可维护</li></ol><h2 id="简答题"><a href="#简答题" class="headerlink" title="简答题"></a>简答题</h2><p><strong>a</strong></p><h3 id="什么是软件工程？软件工程研究的主要内容？"><a href="#什么是软件工程？软件工程研究的主要内容？" class="headerlink" title="什么是软件工程？软件工程研究的主要内容？"></a>什么是软件工程？软件工程研究的主要内容？</h3><p>定义1：软件工程就是为了经济地获得可靠的且能在实际机器上有效地运行的软件，而建立和使用完善的工程原理<br>定义2：软件工程是1把系统的、规范的、可度量的、途径应用于软件开发、运行和维护过程，也就是把工程应用于软件；2研究中1中提到的途径</p><p>研究内容：</p><p>软件工程是一门研究如何以系统化、规范化、可重复的方式开发和维护软件的学科。</p><p>包括以下几个方面：</p><ol><li>软件开发过程：研究软件开发的全过程，包括需求分析、设计、编码、测试、部署和维护等环节。</li><li>软件需求工程：研究如何对用户需求进行分析和规范化，以便于在软件开发过程中进行有效的沟通和协作。</li><li>软件设计和架构：研究如何进行软件设计和架构，以满足软件的可维护性、可扩展性、可重用性、可移植性等要求。</li><li>软件测试和质量保证：研究如何进行软件测试和质量保证，以确保软件的正确性、可靠性、安全性、性能等方面的质量。</li><li>软件项目管理：研究如何进行软件项目管理，包括进度管理、资源管理、风险管理、质量管理等方面的内容。</li><li>软件维护和演化：研究如何进行软件维护和演化，以确保软件的持续运行和不断改进。</li></ol><h3 id="软件工程基本原理"><a href="#软件工程基本原理" class="headerlink" title="软件工程基本原理"></a>软件工程基本原理</h3><ol><li>用分阶段的生命周期计划严格执行</li><li>坚持进行阶段评审</li><li>执行严格的产品控制</li><li>采用现代化程序设计技术</li><li>结果应该清楚的审查</li><li>开发人员应该少而精</li><li>承认不断改进软件工程实践的必要性</li></ol><h3 id="什么是软件开发方法？有哪些主要方法"><a href="#什么是软件开发方法？有哪些主要方法" class="headerlink" title="什么是软件开发方法？有哪些主要方法"></a>什么是软件开发方法？有哪些主要方法</h3><p>软件工程方法学包含3个要素：方法、具体、过程</p><ul><li>方法就是完成软件开发的各项任务的技术和方法，回答怎么做的问题</li><li>工具是为运用方法而提供的自动的或者半自动的软件工程支持环境</li><li>过程是为了获得高质量软件所需要完成的一系列任务的框架</li></ul><p>主要有两个主要方法：</p><ol><li>传统方法学</li><li>面向对象方法学</li></ol><h3 id="需求分析阶段的任务是什么"><a href="#需求分析阶段的任务是什么" class="headerlink" title="需求分析阶段的任务是什么"></a>需求分析阶段的任务是什么</h3><ol><li>确定对系统的综合要求</li><li>分析系统的数据要求</li><li>导出系统的逻辑模型</li><li>修正系统开发计划</li></ol><h3 id="软件设计的基本原理是什么？"><a href="#软件设计的基本原理是什么？" class="headerlink" title="软件设计的基本原理是什么？"></a>软件设计的基本原理是什么？</h3><ol><li>模块化</li><li>抽象</li><li>逐步求精</li><li>信息隐藏和局部化</li><li>模块独立</li></ol><h3 id="软件维护的内容有哪些？"><a href="#软件维护的内容有哪些？" class="headerlink" title="软件维护的内容有哪些？"></a>软件维护的内容有哪些？</h3><ol><li>纠错性维护：修复软件中出现的错误和缺陷，以确保软件的正常运行和稳定性。</li><li>适应性维护：根据用户需求的变化，对软件进行修改和优化，以满足用户的新需求和期望。</li><li>完善性维护：对软件进行优化和完善，以提高软件的性能、可靠性、安全性等方面的质量。</li><li>预防性维护：对软件进行预防性维护，包括代码重构、技术升级、文档更新等，以确保软件的可维护性和可扩展性。</li><li>管理性维护：对软件进行管理性维护，包括版本控制、配置管理、问题跟踪等，以确保软件的追踪和管理，避免软件演化过程中出现不利影响。</li></ol><p><strong>维护过程</strong></p><ul><li>维护组织</li><li>维护报告</li><li>维护的事件流</li><li>保存维护记录</li></ul><p><strong>B</strong></p><h3 id="详细设计的基本任务"><a href="#详细设计的基本任务" class="headerlink" title="详细设计的基本任务"></a>详细设计的基本任务</h3><ol><li>结构程序设计</li><li>人机界面设计</li><li>过程设计</li><li>数据结构设计</li><li>程序复杂程度定量度量</li></ol><h3 id="总体设计的基本任务"><a href="#总体设计的基本任务" class="headerlink" title="总体设计的基本任务"></a>总体设计的基本任务</h3><ol><li>选择最佳方案</li><li>功能分解</li><li>设计软件结构</li><li>设计数据库</li><li>制定测试计划</li><li>书写文档</li><li>复查和审查</li></ol><h3 id="可行性研究的步骤"><a href="#可行性研究的步骤" class="headerlink" title="可行性研究的步骤"></a>可行性研究的步骤</h3><ol><li>复查系统规模和目标</li><li>研究目前正在使用的系统</li><li>导出新系统的高层逻辑模型</li><li>进一步定义问题</li><li>导出和评价供选择的解法</li><li>推荐行动方针</li><li>草拟开发计划</li><li>书写文档提交审查</li></ol><h3 id="结构化分析的步骤"><a href="#结构化分析的步骤" class="headerlink" title="结构化分析的步骤"></a>结构化分析的步骤</h3><h2 id="填空题"><a href="#填空题" class="headerlink" title="填空题"></a>填空题</h2><p><strong>A</strong></p><p><strong>数据字典</strong></p><p><strong>描述处理过程的三个工具</strong></p><p><strong>评定模块的独立性</strong></p><p><strong>软件结构设计</strong></p><p><strong>软件测试的步骤</strong></p><p><strong>编码阶段</strong></p><p><strong>软件维护费用</strong></p><p><strong>B</strong></p><p><strong>软件工程方法学三要素</strong></p><p><strong>软件工程研究的主要内容</strong></p><p><strong>系统的逻辑模型</strong></p><p><strong>软件生命周期</strong></p><p><strong>软件定义</strong></p><p><strong>可行性研究</strong></p><h2 id="应用题"><a href="#应用题" class="headerlink" title="应用题"></a>应用题</h2><p><strong>判定表</strong></p>]]></content>
      
      
      <categories>
          
          <category> 软件工程导论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件工程导论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue2笔记</title>
      <link href="/2023/06/17/Vue2%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/06/17/Vue2%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="vue笔记"><a href="#vue笔记" class="headerlink" title="vue笔记"></a>vue笔记</h1><h1 id="第1章：Vue核心"><a href="#第1章：Vue核心" class="headerlink" title="第1章：Vue核心"></a>第1章：Vue核心</h1><h2 id="1-1-初识Vue"><a href="#1-1-初识Vue" class="headerlink" title="1.1 初识Vue"></a>1.1 初识Vue</h2><ul><li>想让Vue工作，就必须创建一个Vue实例，且要传入一个配置对象</li><li>demo容器里的代码依然符合html规范，只不过混入了一些特殊的Vue语法</li><li>demo容器里的代码被称为【Vue模板】</li><li>Vue实例和容器是一一对应的</li><li>真实开发中只有一个Vue实例，并且会配合着组件一起使用</li><li>是Vue的语法：插值表达式，可以读取到data中的所有属性</li><li>一旦data中的数据发生改变，那么页面中用到该数据的地方也会自动更新(Vue实现的响应式)</li></ul><blockquote><p>初始示例代码</p></blockquote><pre class="line-numbers language-none"><code class="language-none">&lt;!-- 准备好一个容器 --&gt;&lt;div id="demo"&gt;&lt;h1&gt;Hello，{{name.toUpperCase()}}，{{address}}&lt;/h1&gt;&lt;/div&gt;&lt;script type="text/javascript" &gt;Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。//创建Vue实例new Vue({el:'#demo', //el用于指定当前Vue实例为哪个容器服务，值通常为css选择器字符串。data:{ //data中用于存储数据，数据供el所指定的容器去使用，值我们暂时先写成一个对象。name:'hello,world',address:'北京'}});&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-2-模板语法"><a href="#1-2-模板语法" class="headerlink" title="1.2 模板语法"></a>1.2 模板语法</h2><p>Vue模板语法有2大类:</p><ul><li>插值语法：<br>功能：用于解析标签体内容<br>写法：，xxx是js表达式，且可以直接读取到data中的所有属性</li><li>指令语法:<br>功能：用于解析标签（包括：标签属性、标签体内容、绑定事件…..）<br>举例：v-bind:href=”xxx” 或 简写为 :href=”xxx”，xxx同样要写js表达式，且可以直接读取到data中的所有属性</li></ul><blockquote><p>代码</p></blockquote><pre class="line-numbers language-none"><code class="language-none">&lt;div id="root"&gt;&lt;h1&gt;插值语法&lt;/h1&gt;&lt;h3&gt;你好，{{name}}&lt;/h3&gt;&lt;hr/&gt;&lt;h1&gt;指令语法&lt;/h1&gt;    &lt;!-- 这里是展示被Vue指令绑定的属性，引号内写的是js表达式 --&gt;&lt;a :href="school.url.toUpperCase()" x="hello"&gt;点我去{{school.name}}学习1&lt;/a&gt;&lt;a :href="school.url" x="hello"&gt;点我去{{school.name}}学习2&lt;/a&gt;&lt;/div&gt;&lt;script&gt;    new Vue({el:'#root',data:{name:'jack',school:{name:'百度',url:'http://www.baidu.com',}        }})&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-3-数据绑定"><a href="#1-3-数据绑定" class="headerlink" title="1.3 数据绑定"></a>1.3 数据绑定</h2><p>Vue中有2种数据绑定的方式：</p><ul><li>单向绑定(v-bind)：数据只能从data流向页面</li><li>双向绑定(v-model)：数据不仅能从data流向页面，还可以从页面流向data<blockquote><p>tips:</p><p>1.双向绑定一般都应用在表单类元素上（如：input、select等）</p><p>2.v-model:value 可以简写为 v-model，因为v-model默认收集的就是value值</p></blockquote></li></ul><blockquote><p>代码</p></blockquote><pre class="line-numbers language-none"><code class="language-none">&lt;div id="root"&gt;&lt;!-- 普通写法 单向数据绑定 --&gt;    单向数据绑定：&lt;input type="text" v-bind:value="name"&gt;&lt;br/&gt;    双向数据绑定：&lt;input type="text" v-model:value="name"&gt;&lt;br/&gt;    &lt;!-- 简写 v-model:value 可以简写为 v-model，因为v-model默认收集的就是value值--&gt;    单向数据绑定：&lt;input type="text" :value="name"&gt;&lt;br/&gt;    双向数据绑定：&lt;input type="text" v-model="name"&gt;&lt;br/&gt;&lt;/div&gt;&lt;script&gt;    new Vue({el:'#root',data:{name:'jack',        }})&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-4-el与data的两种写法"><a href="#1-4-el与data的两种写法" class="headerlink" title="1.4 el与data的两种写法"></a>1.4 el与data的两种写法</h2><p>el有2种写法</p><ul><li>new Vue时候配置el属性</li><li>先创建Vue实例，随后再通过vm.$mount(‘#root’)指定el的值</li></ul><p>data有2种写法</p><ul><li>对象式</li><li>函数式<blockquote><p>在组件中，data必须使用函数式</p></blockquote></li></ul><blockquote><p>代码</p></blockquote><pre class="line-numbers language-none"><code class="language-none">&lt;script type="text/Javascript"&gt;      const v=new Vue({          //el:"#root", //第一种写法        //   data:{//data的第一种写法        //       name:"张三"        //   }        //data的第二种写法        data:function() {            console.log("data this is",this);//这里的this指向的是vue实例            return {                name:"张三"            }        }      })      console.log(v);      v.$mount("#root");//第二种写法    &lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-5-MVVM模型"><a href="#1-5-MVVM模型" class="headerlink" title="1.5 MVVM模型"></a>1.5 MVVM模型</h2><ol><li>M：模型（Model）：对应data中的数据</li><li>V：视图（view）：模板</li><li>VM：视图模型（ViewModel）：Vue实例对象</li></ol><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/image-20230603202854114.png"></p><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/image-20230603203706338.png"></p><p>往模型里添加的数据都会出现在vue实例对象上（VM）</p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/image-20230603204148831.png" style="zoom:150%;"><p>VM（Vue实例对象）身上的属性以及Vue原型上的所有属性都可以在Vue模板(V层）上直接使用，</p><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/image-20230603204627304.png"></p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/image-20230603204422418.png" style="zoom:67%;"><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/image-20230603204604571.png" style="zoom: 67%;"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>学校名称：<span class="token punctuation">{</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>学校地址：<span class="token punctuation">{</span><span class="token punctuation">{</span>address<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>测试<span class="token number">1</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>测试<span class="token number">2</span><span class="token punctuation">{</span><span class="token punctuation">{</span>$options<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>测试<span class="token number">3</span><span class="token punctuation">{</span><span class="token punctuation">{</span>_c<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>  <span class="token keyword">const</span> v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#root"</span><span class="token punctuation">,</span>    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"湖南工程学院"</span><span class="token punctuation">,</span>      <span class="token literal-property property">address</span><span class="token operator">:</span> <span class="token string">"湘潭"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-6-数据代理"><a href="#1-6-数据代理" class="headerlink" title="1.6 数据代理"></a>1.6 数据代理</h2><h3 id="1-6-1回顾Object-defineProperty-方法"><a href="#1-6-1回顾Object-defineProperty-方法" class="headerlink" title="1.6.1回顾Object.defineProperty()方法"></a>1.6.1回顾Object.defineProperty()方法</h3><p>1.对象 (obj)</p><p>　　要定义或修改属性的对象。</p><p>2.属性名称 (prop)</p><p>　　要定义或修改的属性名称。</p><p>3.属性描述符 (descriptor)</p><p>　　一个包含属性特性的对象。</p><p>　　属性描述符对象 (descriptor) 可以包含以下可选属性：</p><p>　　·value: 属性的值。</p><p>　　·writable: 如果为 true，属性的值可以被赋值运算符改变。默认为 false。</p><p>　　·enumerable: 如果为 true，属性可以通过 for…in 循环或 Object.keys 枚举。默认为 false。</p><p>　　·configurable: 如果为 true，属性可以被删除，以及属性的特性可以被修改。默认为 false。</p><p>　　·get: 作为属性的 getter 函数，当访问属性时会调用该函数。</p><p>　　·set: 作为属性的 setter 函数，当设置属性值时会调用该函数。</p><p><strong>使用</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>  <span class="token keyword">let</span> sex<span class="token operator">=</span><span class="token string">"女"</span>  <span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span>    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">// 通过Object.defineProperty方法来实现数据代理</span>  <span class="token comment">//1.对象 (obj)要定义或修改属性的对象。</span>  <span class="token comment">//2.属性名称 (prop)要定义或修改的属性名称。</span>  <span class="token comment">//3.属性描述符 (descriptor)一个包含属性特性的对象。</span>  <span class="token comment">//为Person对象添加一个sex属性</span>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token string">"sex"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">"男"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在浏览器上查看</p><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/image-20230603210244528.png"></p><p>可以看到添加的sex属性颜色不一样，表示这个属性不可枚举（不参与遍历）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//添加的属性是不可枚举的</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//["name", "age"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>控制属性是否可以枚举是否可以修改是否可以…</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token string">"sex"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">"男"</span><span class="token punctuation">,</span>    <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//是否可枚举</span>    <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//是否可修改</span>    <span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/image-20230603211410555.png"></p><p>通过Object.defineProperty()让sex和person产生了关联</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token string">"sex"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">//当有人读取person的sex属性时，会自动调用get方法</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"get方法被调用了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">//当有人修改person的sex属性时，会自动调用get方法</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"set方法被调用了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      sex <span class="token operator">=</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/image-20230603212541862.png"></p><h3 id="1-6-2-何为数据代理"><a href="#1-6-2-何为数据代理" class="headerlink" title="1.6.2 何为数据代理"></a>1.6.2 何为数据代理</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//数据代理：通过一个对象代理另一个对象中的属性</span><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">200</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj2<span class="token punctuation">,</span> <span class="token string">"x"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> obj1<span class="token punctuation">.</span>x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>  obj1<span class="token punctuation">.</span>x <span class="token operator">=</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/image-20230603214208201.png"></p><p>通过obj2修改了obj1属性x的值</p><h3 id="1-6-3-Vue中的数据代理"><a href="#1-6-3-Vue中的数据代理" class="headerlink" title="1.6.3 Vue中的数据代理"></a>1.6.3 Vue中的数据代理</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>学校名称<span class="token punctuation">{</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>学校地址<span class="token punctuation">{</span><span class="token punctuation">{</span>address<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>  <span class="token keyword">const</span> v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#root"</span><span class="token punctuation">,</span>    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"湖南工程学院"</span><span class="token punctuation">,</span>      <span class="token literal-property property">address</span><span class="token operator">:</span> <span class="token string">"湘潭"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/image-20230603215549491.png"></p><p>可以看到，写在配置项中的 data 数据被 绑定到了 vm 对象上，我先来讲结果，是 Vue 将 _data 中的 name，address 数据 代理到 vm 本身上。</p><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/image-20230603215707877.png"></p><p>将 <strong>vm._data</strong> 中的值，再代理到 vm 本身上来，用vm.name 代替 <strong>vm._data.name</strong>。这就是 Vue 的数据代理</p><p>这一切都是通过 Object.defineProperty() 来完成的，我来模拟一下这个过程</p><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/image-20230603220226413.png"></p><p>将_data的数据在vm下代理一份</p><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/image-20230603220339044.png"></p><blockquote><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/image-20230603220800396.png"></p><p>_data对采用事件劫持对data进行了封装</p></blockquote><h2 id="1-7-事件处理"><a href="#1-7-事件处理" class="headerlink" title="1.7 事件处理"></a>1.7 事件处理</h2><h3 id="1-7-1-事件的基本使用"><a href="#1-7-1-事件的基本使用" class="headerlink" title="1.7.1 事件的基本使用"></a>1.7.1 事件的基本使用</h3><p>点击事件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>新天地，有了新<span class="token punctuation">{</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>新<span class="token punctuation">{</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span>，就是新天地<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 点击后寻找名为changeName的函数进行调用 <span class="token operator">--</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>button v<span class="token operator">-</span>on<span class="token operator">:</span>click<span class="token operator">=</span><span class="token string">"changeName"</span><span class="token operator">&gt;</span>改名<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 可以简写为@click <span class="token operator">--</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"changeName"</span><span class="token operator">&gt;</span>改名<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果我们像使用js一样，直接创建一个函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">changeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"改名成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们可以看到是无法调用成功的</p><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/image-20230604190849991.png"></p><p>因为Vue的模板只能访问Vue实例所提供</p><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/image-20230604191059917.png"></p><p>在Vue实例中添加事件处理函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#root"</span><span class="token punctuation">,</span>    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"满洲"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">//配置事件处理函数 e是事件对象</span>    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token function-variable function">changeName</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//this指向当前vue实例</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"馒头"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用</p><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/image-20230604192244200.png"></p><p><strong>事件处理函数中的this指向当前Vue实例</strong></p><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/image-20230604192441398.png"></p><blockquote><p><strong>如果使用箭头函数，那么this就我去父级寻找，在这里是windows</strong></p></blockquote><pre class="line-numbers language-none"><code class="language-none">changeNameByValue: (e) =&gt; {    //this指向window    this.name = "馒头";    console.log(this);},<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>回调函数如何传递参数‘</p><pre class="line-numbers language-none"><code class="language-none"> &lt;button v-on:click="changeNameByValue(66)"&gt;改名&lt;/button&gt;changeNameByValue: (e) =&gt; {    //this指向window    this.name = "馒头";    console.log(this);    console.log(e);},<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接在括号里面填入自己的参数，但上面的列子会丢失event事件对象</p><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/image-20230604193207169.png"></p><p>可以看到e接受了传过来的参数，事件对象不见了</p><p>在参数列表中加入$event Vue会自动扫描当前事件对象，将他传递进来</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>button v<span class="token operator">-</span>on<span class="token operator">:</span>click<span class="token operator">=</span><span class="token string">"changeNameByValue($event,66)"</span><span class="token operator">&gt;</span>改名byValue<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/image-20230604193513944.png"></p><p>代码</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>新天地，有了新<span class="token punctuation">{</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>新<span class="token punctuation">{</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span>，就是新天地<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 点击后寻找名为changeName的函数进行调用 <span class="token operator">--</span><span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>button v<span class="token operator">-</span>on<span class="token operator">:</span>click<span class="token operator">=</span><span class="token string">"changeNameByValue($event,66)"</span><span class="token operator">&gt;</span>改名byValue<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 可以简写为@click <span class="token operator">--</span><span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"changeName"</span><span class="token operator">&gt;</span>改名<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>  <span class="token comment">//   function changeName() {</span>  <span class="token comment">//     alert("改名成功");</span>  <span class="token comment">//   }</span>  <span class="token comment">//关闭vue启动时的提示信息</span>  Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#root"</span><span class="token punctuation">,</span>    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"满洲"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">//配置事件处理函数 e是事件对象</span>    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token function-variable function">changeName</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//this指向当前vue实例</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"馒头"</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function-variable function">changeNameByValue</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span> a</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token comment">//this指向window</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> a<span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>事件的基本使用总结：</p><ul><li>使用v-on:xxx或@xxx绑定事件，其中xxx是事件名;</li><li>事件的回调需要配置在methods对象中，最终会在vm上;</li><li>methods中配置的函数，不要箭头函数！否则this就不是vm了；</li><li>methods中配置的函数，都是被Vue所管理的函数，this的指向是vm或组件实例对象</li><li>@click=”demo” 和@click=”demo($event)”效果一样，但后者可以传递参数</li></ul><h3 id="1-7-2-事件修饰符"><a href="#1-7-2-事件修饰符" class="headerlink" title="1.7.2 事件修饰符"></a>1.7.2 事件修饰符</h3><p>使用事件修饰符阻止默认事件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>vue使用prevent阻止默认事件，直接在事件名后面加上.prevent</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"https://freel00p.top"</span> @click<span class="token punctuation">.</span>prevent<span class="token operator">=</span><span class="token string">"showInfo"</span><span class="token operator">&gt;</span>点我提示信息<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/image-20230604200712956.png"></p><p>点确认后不会跳转到页面，阻止成功</p><p>Vue的一些事件修饰符</p><ol><li>prevent 阻止默认事件</li><li>stop 阻止事件冒泡</li><li>once 事件只触发一次</li><li>capture 使用事件的捕获模式</li><li>self 只有event.target是当前操作的元素才触发事件</li><li>passive 事件的默认行为立即执行，无需等待事件回调执行完毕</li></ol><p><strong>事件的捕获模式</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 使用事件的捕获模式 <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"box1"</span> @click<span class="token operator">=</span><span class="token string">"showMsg(1)"</span><span class="token operator">&gt;</span>    div1    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"box2"</span> @click<span class="token operator">=</span><span class="token string">"showMsg(2)"</span><span class="token operator">&gt;</span>div2<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token function-variable function">showMsg</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"div"</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>点击box2，控制台输出</p><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/image-20230604202402626.png"></p><p>在事件捕获阶段，从外向内 div1-&gt;div2<br>在事件冒泡阶段，从内向外div2-&gt;div1</p><p>在box1 的事件上添加事件修饰符capture 使用事件的捕获模式<br>点击box2，控制台输出</p><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/image-20230604202706044.png"></p><p><strong>使用self 只有event.target是当前操作的元素才触发事件</strong><br>在div1上加上事件修饰符self</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"box1"</span> @click<span class="token punctuation">.</span>self<span class="token operator">=</span><span class="token string">"showMsg($event,1)"</span><span class="token operator">&gt;</span>    div1    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"box2"</span> @click<span class="token operator">=</span><span class="token string">"showMsg($event,2)"</span><span class="token operator">&gt;</span>div2<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token function-variable function">showMsg</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span> num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"div"</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>控制台输出</p><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/image-20230604203257574.png"></p><p>控制台只打印了div2，因为事件冒泡阶段的event都是div2，在div1上的event是div1时才会执行</p><blockquote><p>使用self修饰符也能阻止事件冒泡</p></blockquote><p>点击div1,控制台打印</p><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/image-20230604203545171.png"></p><p><strong>passive 事件的默认行为立即执行，无需等待事件回调执行完毕</strong></p><p>例如鼠标滚动一下循环一千次，加上passive后就无需等待循环结束，直接滚动页面</p><h3 id="1-7-3-键盘事件"><a href="#1-7-3-键盘事件" class="headerlink" title="1.7.3 键盘事件"></a>1.7.3 键盘事件</h3><p>键盘事件语法糖：@keydown，@keyup</p><p>Vue中常用的按键别名：</p><ul><li>回车 =&gt; enter</li><li>删除 =&gt; delete</li><li>退出 =&gt; esc</li><li>空格 =&gt; space</li><li>换行 =&gt; tab (特殊，必须配合keydown去使用)</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>input    type<span class="token operator">=</span><span class="token string">"text"</span>    placeholder<span class="token operator">=</span><span class="token string">"按下回车键输入"</span>    @keyup<span class="token punctuation">.</span>enter<span class="token operator">=</span><span class="token string">"showInfo"</span>  <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>  <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#root"</span><span class="token punctuation">,</span>    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token function-variable function">showInfo</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// if (e.keyCode == 13) {</span>        <span class="token comment">//   alert(e.target.value);</span>        <span class="token comment">// }</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-8计算属性"><a href="#1-8计算属性" class="headerlink" title="1.8计算属性"></a>1.8计算属性</h2><ul><li>定义：需要使用的属性，需要用现有属性”计算”得到</li><li>优势：与method相比，计算属性用缓存机制，避免多次调用，效率高</li><li>get函数调用时期<ul><li>1.初次读取fullName时。2.所依赖的数据发生变化时。</li></ul></li><li>Tips<ul><li>计算属性最终会出现在vm上，直接读取使用即可</li><li>如果计算属性要被修改，那必须写set函数去响应修改，且set中要引起计算时依赖的数据发生改变</li></ul></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"> <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">&gt;</span>  姓：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"firstName"</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">&gt;</span>  名：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"lastName"</span> <span class="token operator">/</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span>br <span class="token operator">/</span><span class="token operator">&gt;</span>  姓名：<span class="token operator">&lt;</span>span<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>fullName<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span> 姓名：<span class="token operator">&lt;</span>span<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>fullName<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>  姓名：<span class="token operator">&lt;</span>span<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>fullName<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span> 姓名：<span class="token operator">&lt;</span>span<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>fullName<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>  <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#root"</span><span class="token punctuation">,</span>    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">"张"</span><span class="token punctuation">,</span>      <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token string">"三"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token literal-property property">fullName</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token comment">//当有人读取fullName时，get就会被调用，且返回值就作为fullName的值</span>        <span class="token comment">//什么时候调用？1.初次读取fullName时。2.所依赖的数据发生变化时。</span>        <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"get被调用了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment">//当计算属性的结果不需要修改时，可以使用简写方法</span>   <span class="token comment">//funName:function(){</span>        <span class="token comment">// return this.firstName + "-" + this.lastName; </span>      <span class="token comment">//}</span>        <span class="token comment">//set什么时候调用? 当fullName被修改时。</span>        <span class="token comment">// 可以主动在控制台修改fullName来查看情况</span>        <span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"set"</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">const</span> arr <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-9-事件监听"><a href="#1-9-事件监听" class="headerlink" title="1.9 事件监听"></a>1.9 事件监听</h2><p> 监视属性watch：</p><ol><li><p>当被监视的属性发生改变时，会自动调用handler函数</p></li><li><p>监视的属性必须存在</p></li><li><p>当监视的属性发生改变时，会传递两个参数</p><pre><code>1.newValue:改变后的值2.oldValue:改变前的值</code></pre></li><li><p>.监视的两种写法</p><ol><li>new Vue({watch:{isHot(){}}})</li><li>vm.$watch(“isHot”,function(){})</li></ol></li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>       <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#root"</span><span class="token punctuation">,</span>       <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>         <span class="token literal-property property">isHot</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>       <span class="token punctuation">}</span><span class="token punctuation">,</span>       <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>         <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>isHot <span class="token operator">?</span> <span class="token string">"热"</span> <span class="token operator">:</span> <span class="token string">"不热"</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token punctuation">,</span>       <span class="token punctuation">}</span><span class="token punctuation">,</span>       <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>         <span class="token function">changeWeather</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">this</span><span class="token punctuation">.</span>isHot <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>isHot<span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token punctuation">,</span>       <span class="token punctuation">}</span><span class="token punctuation">,</span>       <span class="token comment">/*         监视属性watch：           1.当被监视的属性发生改变时，会自动调用handler函数           2.监视的属性必须存在           3.当监视的属性发生改变时，会传递两个参数             1.newValue:改变后的值             2.oldValue:改变前的值           4.监视的两种写法             1)new Vue({watch:{isHot(){}}})             2)vm.$watch("isHot",function(){})       */</span>    <span class="token comment">//写法1</span>       <span class="token comment">// watch: {</span>       <span class="token comment">//   isHot: {</span>       <span class="token comment">//     //当isHot发生改变时，会自动调用handler函数</span>       <span class="token comment">//     handler(newValue, oldValue) {</span>       <span class="token comment">//       console.log(newValue, oldValue);</span>       <span class="token comment">//     },</span>       <span class="token comment">//     immediate: true, //初始化时就会执行</span>       <span class="token comment">//   },</span>       <span class="token comment">//   // isHot(newValue, oldValue) {</span>       <span class="token comment">//   //   console.log(newValue, oldValue);</span>       <span class="token comment">//   // },</span>       <span class="token comment">// },</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//写法2</span><span class="token comment">//watch也可以监听info属性</span>     vm<span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span><span class="token string">"isHot"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>       <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span> oldValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">,</span>       <span class="token literal-property property">immediate</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//初始化时就会执行</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>深度监视</p><pre><code>（1）Vue中的watch默认不监听对象内部值的改变（一层）（2）配置deep:true可以使监测对象的内部值发生改变（多层）</code></pre><blockquote><p>TIPS:</p><ol><li>Vue自身可以监听到对象内部值的改变，但Vue提供的watch默认不可以</li><li>使用watch时根据数据的具体结构，决定是否采用深度监视</li></ol></blockquote><p>监视多级结构中所有属性的变化</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">numbers<span class="token punctuation">{</span>    <span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>    <span class="token literal-property property">b</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果直接监视numbers 当a或b发生改变时，监听器handler不会检测到，这是因为handler监听这是numbers 获取不到a和b的状态。</p><p>正确使用方式</p><pre class="line-numbers language-none"><code class="language-none">watch{numbers:{deep:true,handler(){console.log('numbers发生改变')}}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-10-绑定样式"><a href="#1-10-绑定样式" class="headerlink" title="1.10 绑定样式"></a>1.10 绑定样式</h2><p>绑定样式</p><ol><li><p>class 样式</p><ul><li><p>写法：class=”xxx” xxx可以是字符串、对象、数组。</p><ul><li>字符串写法 适用于：样式的类名不确定，需要动态指定</li><li>对象写法，适用于：要绑定的样式个数确定，名字确定，但需要动态指定用不用</li><li>数组写法，适用于：要绑定的样式个数不确定，名字也不确定</li></ul></li></ul></li><li><p>style 样式</p></li></ol><ul><li>style=”{fontSize:xxx}”其中的xxx是动态值</li><li>style=”[a,b]”其中a、b是样式对象</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 绑定<span class="token keyword">class</span>样式<span class="token operator">--</span>字符串写法 适用于：样式的类名不确定，需要动态指定 <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"basic"</span> <span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"mood"</span> @click<span class="token operator">=</span><span class="token string">"changeMood"</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 绑定<span class="token keyword">class</span>样式<span class="token operator">--</span>数组写法，适用于：要绑定的样式个数不确定，名字也不确定 <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"basic"</span> <span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"classArr"</span> @click<span class="token operator">=</span><span class="token string">"changeMood"</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 绑定<span class="token keyword">class</span>样式<span class="token operator">--</span>对象写法，适用于：要绑定的样式个数确定，名字确定，但需要动态指定用不用 <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"basic"</span> <span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"mood"</span> @click<span class="token operator">=</span><span class="token string">"changeMood"</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-11-条件渲染"><a href="#1-11-条件渲染" class="headerlink" title="1.11 条件渲染"></a>1.11 条件渲染</h2><p>条件渲染：</p><ol><li>v-if<ul><li>写法：<ol><li>v-if=”表达式”</li><li>v-else-if=”表达式”</li><li>v-else=”表达式”</li></ol></li><li>适用于切换频率较低的场景</li><li>特点：不展示的dom元素直接移除</li><li>注意：v-if 和v-else-if、v-else可以一起使用，但结构不能被打断</li></ul></li><li>v-show<ul><li>写法 v-show=”表达式”</li><li>适用于：切换频率较低的场景</li><li>不展示的dom只是被隐藏起来了，并没有被移除</li></ul></li></ol><p>使用示例</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"> <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>当前n的值是<span class="token punctuation">{</span><span class="token punctuation">{</span>n<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"n++"</span><span class="token operator">&gt;</span>点我n<span class="token operator">++</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 使用v<span class="token operator">-</span>show做条件渲染 <span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 底层使用display：none dom元素并没有移除<span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">&lt;</span>h2 v<span class="token operator">-</span>show<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">&gt;</span>欢迎来到<span class="token punctuation">{</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span> <span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 使用v<span class="token operator">-</span><span class="token keyword">if</span>做条件渲染 移除dom元素<span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">&lt;</span>h2 v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"false"</span><span class="token operator">&gt;</span>欢迎来到<span class="token punctuation">{</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span> <span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"n===1"</span><span class="token operator">&gt;</span>也许争不过天和地<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"n===2"</span><span class="token operator">&gt;</span>也许低下头会哭泣<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span>div v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">=</span><span class="token string">"n===3"</span><span class="token operator">&gt;</span>也许六月雪会飞进心里<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-12-列表渲染"><a href="#1-12-列表渲染" class="headerlink" title="1.12 列表渲染"></a>1.12 列表渲染</h2><p>简单使用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 遍历数组并为每个元素指定唯一标识（<span class="token operator">:</span>key） <span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"item in arr"</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"item.name"</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">-</span><span class="token punctuation">{</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>age<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 遍历对象 <span class="token operator">--</span><span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(a,b,c) in car"</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>a<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">-</span><span class="token punctuation">{</span><span class="token punctuation">{</span>b<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">-</span><span class="token punctuation">{</span><span class="token punctuation">{</span>c<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>  <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#root"</span><span class="token punctuation">,</span>    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token literal-property property">arr</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"李四"</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">19</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"王五"</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"赵六"</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">21</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token literal-property property">car</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"宝马"</span><span class="token punctuation">,</span>        <span class="token literal-property property">price</span><span class="token operator">:</span> <span class="token number">1000000</span><span class="token punctuation">,</span>        <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">"red"</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>虚拟DOM中key的作用</strong></p><p>key是虚拟DOM对象的标识，当数据发生变化时，Vue会根据【新数据】生成【新的虚拟DOM】, 随后Vue进行【新虚拟DOM】与【旧虚拟DOM】的差异比较，比较规则如下：</p><ul><li>旧虚拟DOM中找到了与新虚拟DOM相同的key：<ul><li>①.若虚拟DOM中内容没变, 直接使用之前的真实DOM！</li><li>②.若虚拟DOM中内容变了, 则生成新的真实DOM，随后替换掉页面中之前的真实DOM。</li></ul></li><li>旧虚拟DOM中未找到与新虚拟DOM相同的key<ul><li>创建新的真实DOM，随后渲染到到页面。</li></ul></li></ul><blockquote><p>好了，我们知道了最简单的key的原理，如果要继续研究下去就要涉及到vue的核心之一-Diff算法，后面会详细介绍。</p></blockquote><p>用index作为key可能会引发的问题：<br>若对数据进行：逆序添加、逆序删除等破坏顺序操作：<br>会产生没有必要的真实DOM更新 ==&gt; 界面效果没问题, 但效率低。</p><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/image-20230605221536987.png"></p><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/image-20230605221326324.png"></p><p>使用数组元素的唯一id作为key</p><ul><li>最好使用每条数据的唯一标识作为key, 比如id、手机号、身份证号、学号等唯一值</li><li>如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表用于展示，使用index作为key是没有问题的</li></ul><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/image-20230605221805058.png"></p><h2 id="1-13-vue监测data中的数据"><a href="#1-13-vue监测data中的数据" class="headerlink" title="1.13 vue监测data中的数据"></a>1.13 vue监测data中的数据</h2><p>Vue监视数据的原理：</p><ul><li><p>vue会监视data中所有层次的数据</p></li><li><p>如何监测对象中的数据？</p><p>通过setter实现监视，且要在new Vue时就传入要监测的数据。</p><ul><li><p>对象中后追加的属性，Vue默认不做响应式处理</p></li><li><p>如需给后添加的属性做响应式，请使用如下API：</p><p>Vue.set(target，propertyName/index，value) 或</p><p>vm.$set(target，propertyName/index，value)</p></li></ul></li><li><p>如何监测数组中的数据？</p><p>通过包裹数组更新元素的方法实现，本质就是做了两件事：</p><ul><li>调用原生对应的方法对数组进行更新</li><li>重新解析模板，进而更新页面</li></ul></li><li><p>在Vue修改数组中的某个元素一定要用如下方法：</p><ul><li>使用这些API:push()、pop()、shift()、unshift()、splice()、sort()、reverse()</li><li>Vue.set() 或 vm.$set()</li></ul></li></ul><blockquote><p>特别注意：Vue.set() 和 vm.$set() 不能给vm 或 vm的根数据对象 添加属性！！！</p></blockquote><h2 id="1-14-收集表单数据"><a href="#1-14-收集表单数据" class="headerlink" title="1.14 收集表单数据"></a>1.14 收集表单数据</h2><ul><li>v-model默认收集的是用户输入的value值，</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 准备好一个容器<span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>form @submit<span class="token punctuation">.</span>prevent<span class="token operator">=</span><span class="token string">"demo"</span><span class="token operator">&gt;</span>        账号：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span>model<span class="token punctuation">.</span>trim<span class="token operator">=</span><span class="token string">"userInfo.account"</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>        密码：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"password"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"userInfo.password"</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>        年龄：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"number"</span> v<span class="token operator">-</span>model<span class="token punctuation">.</span>number<span class="token operator">=</span><span class="token string">"userInfo.age"</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>button<span class="token operator">&gt;</span>提交<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">&gt;</span>    Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">'#root'</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token literal-property property">userInfo</span><span class="token operator">:</span><span class="token punctuation">{</span>                <span class="token literal-property property">account</span><span class="token operator">:</span><span class="token string">''</span><span class="token punctuation">,</span>                <span class="token literal-property property">password</span><span class="token operator">:</span><span class="token string">''</span><span class="token punctuation">,</span>                <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>userInfo<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果表单是单选下拉列表等，需要自己在标签内加入value属性</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 准备好一个容器<span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>form @submit<span class="token punctuation">.</span>prevent<span class="token operator">=</span><span class="token string">"demo"</span><span class="token operator">&gt;</span>        性别：        男<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"radio"</span> name<span class="token operator">=</span><span class="token string">"sex"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"userInfo.sex"</span> value<span class="token operator">=</span><span class="token string">"male"</span><span class="token operator">&gt;</span>        女<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"radio"</span> name<span class="token operator">=</span><span class="token string">"sex"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"userInfo.sex"</span> value<span class="token operator">=</span><span class="token string">"female"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">&gt;</span>    Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">'#root'</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token literal-property property">userInfo</span><span class="token operator">:</span><span class="token punctuation">{</span>                <span class="token literal-property property">sex</span><span class="token operator">:</span><span class="token string">'female'</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>userInfo<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>没有配置input的value属性，那么收集的就是checked（勾选 or 未勾选，是布尔值）</p></li><li><p>配置input的value属性:</p><ul><li>v-model的初始值是非数组，那么收集的就是checked（勾选 or 未勾选，是布尔值）</li><li>v-model的初始值是数组，那么收集的的就是value组成的数组</li></ul></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 准备好一个容器<span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>form @submit<span class="token punctuation">.</span>prevent<span class="token operator">=</span><span class="token string">"demo"</span><span class="token operator">&gt;</span>        爱好：        学习<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"userInfo.hobby"</span> value<span class="token operator">=</span><span class="token string">"study"</span><span class="token operator">&gt;</span>        打游戏<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"userInfo.hobby"</span> value<span class="token operator">=</span><span class="token string">"game"</span><span class="token operator">&gt;</span>        吃饭<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"userInfo.hobby"</span> value<span class="token operator">=</span><span class="token string">"eat"</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>        所属校区        <span class="token operator">&lt;</span>select v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"userInfo.city"</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">""</span><span class="token operator">&gt;</span>请选择校区<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"beijing"</span><span class="token operator">&gt;</span>北京<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"shanghai"</span><span class="token operator">&gt;</span>上海<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"shenzhen"</span><span class="token operator">&gt;</span>深圳<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>option value<span class="token operator">=</span><span class="token string">"wuhan"</span><span class="token operator">&gt;</span>武汉<span class="token operator">&lt;</span><span class="token operator">/</span>option<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>        其他信息：        <span class="token operator">&lt;</span>textarea v<span class="token operator">-</span>model<span class="token punctuation">.</span>lazy<span class="token operator">=</span><span class="token string">"userInfo.other"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>textarea<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"checkbox"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"userInfo.agree"</span><span class="token operator">&gt;</span>阅读并接受<span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"http://www.atguigu.com"</span><span class="token operator">&gt;</span>《用户协议》<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>button<span class="token operator">&gt;</span>提交<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">&gt;</span>    Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">'#root'</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token literal-property property">userInfo</span><span class="token operator">:</span><span class="token punctuation">{</span>                <span class="token literal-property property">hobby</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token literal-property property">city</span><span class="token operator">:</span><span class="token string">'beijing'</span><span class="token punctuation">,</span>                <span class="token literal-property property">other</span><span class="token operator">:</span><span class="token string">''</span><span class="token punctuation">,</span>                <span class="token literal-property property">agree</span><span class="token operator">:</span><span class="token string">''</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>userInfo<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/image-20230606161653320.png"></p><p>v-model的三个修饰符：</p><p>lazy：失去焦点再收集数据</p><p>number：输入字符串转为有效的数字</p><p>trim：输入首尾空格过滤</p><h2 id="1-15-内置指令"><a href="#1-15-内置指令" class="headerlink" title="1.15 内置指令"></a>1.15 内置指令</h2><ul><li><strong>v-text指令</strong><ol><li>作用：设置标签的文本内容</li><li>使用场景：一般用于设置标签的文本内容</li><li>如果标签中有其他内容，会被覆盖  （使用插值语法不会替换）</li></ol></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>你好，<span class="token punctuation">{</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div v<span class="token operator">-</span>text<span class="token operator">=</span><span class="token string">"name"</span><span class="token operator">&gt;</span>你好<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#root"</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"张三"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img lazyload="" alt="image" data-src="C:\Front_Leran\Vue_Learn\assets\image-20230606174458611.png"></p><p>   你好被替换成了张三</p><ul><li><strong>v-html指令：</strong>(使用的很少)</li></ul><p>1.作用：向指定节点中渲染包含html结构的内容。</p><p>2.与插值语法的区别：</p><ul><li>v-html会替换掉节点中所有的内容，则不会。</li><li>v-html可以识别html结构。</li></ul><p>3.严重注意：v-html有安全性问题！！！！</p><ul><li>在网站上动态渲染任意HTML是非常危险的，容易导致XSS攻击。</li><li>一定要在可信的内容上使用v-html，永不要用在用户提交的内容上！</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div v<span class="token operator">-</span>html<span class="token operator">=</span><span class="token string">"str"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#root"</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token literal-property property">str</span><span class="token operator">:</span><span class="token string">"&lt;h1&gt;你好&lt;/h1&gt;"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <strong>v-cloak指令（没有值）</strong></p><ol><li>本质上是一个属性，用于解决插值语法闪烁的问题</li><li>使用场景：一般用于设置标签的文本内容</li><li>Vue实例创建之后，会删掉v-cloak属性</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>h2 v<span class="token operator">-</span>cloak<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#root"</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"张三"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>v-once指令</strong></p><ol><li>v-once指令（没有值）</li><li>v-once所在节点动态渲染后，就视为静态内容</li><li>以后数据的改变不会引起v-once所在结构的更新，一般用于优化性能，减少不必要的渲染</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>h2 v<span class="token operator">-</span>once<span class="token operator">&gt;</span>初始化的n<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>n<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>n<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>n<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"n++"</span><span class="token operator">&gt;</span>n<span class="token operator">++</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#root"</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token literal-property property">n</span><span class="token operator">:</span><span class="token number">0</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>v-pre指令</strong></p><ol><li>跳过所在节点的编译过程</li><li>可利用它跳过没有指令语法和插值语法的节点，加快编译</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>h2 v<span class="token operator">-</span>pre<span class="token operator">&gt;</span>vue 其实很简单<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>h2 v<span class="token operator">-</span>once<span class="token operator">&gt;</span>初始化的n<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>n<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>n<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>n<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"n++"</span><span class="token operator">&gt;</span>n<span class="token operator">++</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#root"</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token literal-property property">n</span><span class="token operator">:</span><span class="token number">0</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-16-自定义指令"><a href="#1-16-自定义指令" class="headerlink" title="1.16 自定义指令"></a>1.16 自定义指令</h2><p>需求1：定义一个v-big指令，和v-text功能类似，但会把绑定的数值放大10倍。</p><p>需求2：定义一个v-fbind指令，和v-bind功能类似，但可以让其所绑定的input元素默认获取焦点。</p><p><strong>语法：</strong></p><p>局部指令：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>当前值为<span class="token operator">&lt;</span>span v<span class="token operator">-</span>text<span class="token operator">=</span><span class="token string">"n"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>放大十倍后的n值是：<span class="token operator">&lt;</span>span v<span class="token operator">-</span>big<span class="token operator">=</span><span class="token string">"n"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"n++"</span><span class="token operator">&gt;</span>点我n<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span>fbind<span class="token operator">:</span>value<span class="token operator">=</span><span class="token string">"n"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#root"</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token literal-property property">n</span><span class="token operator">:</span><span class="token number">0</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token literal-property property">directives</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token comment">//函数式自定义指令</span>        <span class="token comment">//big函数何时会被？</span>        <span class="token comment">//1.指令第一次绑定到元素上时 </span>        <span class="token comment">//2.指令所在的模板被重新编译时</span>        <span class="token function">big</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span>binding</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            el<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> binding<span class="token punctuation">.</span>value <span class="token operator">*</span> <span class="token number">10</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment">//对象式自定义指令</span>        <span class="token literal-property property">fbind</span><span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token comment">//指令第一次绑定到元素上时</span>            <span class="token function">bind</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span>binding</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"bind"</span><span class="token punctuation">)</span>                el<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> binding<span class="token punctuation">.</span>value            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment">//指令所在元素被插入到页面时</span>            <span class="token function">inserted</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span>binding</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"inserted"</span><span class="token punctuation">)</span>                el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//让元素获得焦点</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment">//指令所在模板被重新编译时</span>            <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span>binding</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"update"</span><span class="token punctuation">)</span>                el<span class="token punctuation">.</span>value <span class="token operator">=</span> binding<span class="token punctuation">.</span>value            <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>全局指令</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 准备好一个容器<span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span>fbind<span class="token operator">:</span>value<span class="token operator">=</span><span class="token string">"n"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">&gt;</span>    Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token comment">//定义全局指令</span>    Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'fbind'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        <span class="token comment">// 指令与元素成功绑定时（一上来）</span>        <span class="token function">bind</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> binding</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            element<span class="token punctuation">.</span>value <span class="token operator">=</span> binding<span class="token punctuation">.</span>value        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment">// 指令所在元素被插入页面时</span>        <span class="token function">inserted</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> binding</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            element<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment">// 指令所在的模板被重新解析时</span>        <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> binding</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            element<span class="token punctuation">.</span>value <span class="token operator">=</span> binding<span class="token punctuation">.</span>value        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">'#root'</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'尚硅谷'</span><span class="token punctuation">,</span>            <span class="token literal-property property">n</span><span class="token operator">:</span> <span class="token number">1</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-17-Vue-生命周期"><a href="#1-17-Vue-生命周期" class="headerlink" title="1.17 Vue 生命周期"></a>1.17 Vue 生命周期</h2><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/lifecycle.16e4c08e.png"></p><p> <img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/resize,m_fixed,w_1184.webp"></p><h2 id="1-18-非单文件组件"><a href="#1-18-非单文件组件" class="headerlink" title="1.18 非单文件组件"></a>1.18 非单文件组件</h2><p>Vue中使用组件的三大步骤：</p><ol><li><pre><code>定义组件(创建组件)</code></pre></li><li><pre><code>注册组件</code></pre></li><li><pre><code>使用组件(写组件标签)</code></pre></li></ol><p>一、如何定义一个组件？</p><pre><code>使用Vue.extend(options)创建，其中options和new Vue(options)时传入的那个options几乎一样，但也有点区别；</code></pre><ul><li><p>区别如下：</p><ol><li>el不要写，为什么？ ——— 最终所有的组件都要经过一个vm的管理，由vm中的el决定服务哪个容器。</li><li>data必须写成函数，为什么？ ———— 避免组件被复用时，数据存在引用关系。</li></ol><p>  备注：使用template可以配置组件结构。</p></li></ul><p>二、如何注册组件？</p><pre><code>1.局部注册：靠new Vue的时候传入components选项2.全局注册：靠Vue.component('组件名',组件)</code></pre><p> 三、编写组件标签：</p><pre><code>`&lt;school&gt;&lt;/school&gt;`</code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">&gt;</span>    <span class="token comment">//使用组件</span>   <span class="token operator">&lt;</span>school<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>school<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>hr<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>hello<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>hello<span class="token operator">&gt;</span>     <span class="token operator">&lt;</span>student<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>student<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>    <span class="token keyword">const</span> hello<span class="token operator">=</span>Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;h2&gt;你好啊&lt;/h2&gt;</span><span class="token template-punctuation string">`</span></span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>     <span class="token comment">//创建全局组件</span>     Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span>hello<span class="token punctuation">)</span>    <span class="token comment">//创建学校组件</span>    <span class="token keyword">const</span> school<span class="token operator">=</span>Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'尚硅谷'</span><span class="token punctuation">,</span>                <span class="token literal-property property">address</span><span class="token operator">:</span><span class="token string">'北京市昌平区'</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">            &lt;div&gt;                &lt;h2&gt;学校名称：{{name}}&lt;/h2&gt;                &lt;h2&gt;学校地址：{{address}}&lt;/h2&gt;            &lt;/div&gt;            </span><span class="token template-punctuation string">`</span></span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment">//创建学生组件</span>    <span class="token keyword">const</span> student<span class="token operator">=</span>Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'张三'</span><span class="token punctuation">,</span>                <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">18</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">                 &lt;div&gt;                    &lt;h2&gt;学生名称：{{name}}&lt;/h2&gt;                    &lt;h2&gt;学生年龄：{{age}}&lt;/h2&gt;                      &lt;/div&gt;        </span><span class="token template-punctuation string">`</span></span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment">//创建vm</span>    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">'#root'</span><span class="token punctuation">,</span>        <span class="token comment">//注册组件</span>        <span class="token literal-property property">components</span><span class="token operator">:</span><span class="token punctuation">{</span>            school<span class="token punctuation">,</span>            student        <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意事项</strong></p><p>几个注意点：</p><ol><li><p>关于组件名:、</p><ul><li><p>一个单词组成：</p><ol><li>第一种写法(首字母小写)：school</li><li>第二种写法(首字母大写)：School</li></ol></li><li><p>多个单词组成：</p><ol><li>第一种写法(kebab-case命名)：my-school</li><li>第二种写法(CamelCase命名)：MySchool (需要Vue脚手架支持)</li></ol><p>备注：</p></li></ul><p> (1).组件名尽可能回避HTML中已有的元素名称，例如：h2、H2都不行。</p><p> (2).可以使用name配置项指定组件在开发者工具中呈现的名字。</p></li><li><p>关于组件标签:</p></li></ol><ul><li><p>第一种写法：<code>&lt;school&gt;&lt;/school&gt;</code></p></li><li><p>第二种写法：<code>&lt;school/&gt;</code></p><p>  备注：不用使用脚手架时，<code>&lt;school/&gt;</code>会导致后续组件不能渲染。</p></li></ul><ol start="3"><li><p>一个简写方式：</p><p> const school = Vue.extend(options) 可简写为：const school = options</p></li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">&gt;</span>    Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token comment">//定义组件</span>    <span class="token keyword">const</span> s <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'atguigu'</span><span class="token punctuation">,</span>        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">            &lt;div&gt;                &lt;h2&gt;学校名称：{{name}}&lt;/h2&gt;                &lt;h2&gt;学校地址：{{address}}&lt;/h2&gt;            &lt;/div&gt;        </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'尚硅谷'</span><span class="token punctuation">,</span>                <span class="token literal-property property">address</span><span class="token operator">:</span><span class="token string">'北京'</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">'#root'</span><span class="token punctuation">,</span>        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token literal-property property">msg</span><span class="token operator">:</span><span class="token string">'欢迎学习Vue!'</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token literal-property property">components</span><span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token literal-property property">school</span><span class="token operator">:</span>s        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>组件嵌套</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>     <span class="token comment">//创建学生组件</span>     <span class="token keyword">const</span> student<span class="token operator">=</span>Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'张三'</span><span class="token punctuation">,</span>                <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">18</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">                 &lt;div&gt;                    &lt;h2&gt;学生名称：{{name}}&lt;/h2&gt;                    &lt;h2&gt;学生年龄：{{age}}&lt;/h2&gt;                         &lt;/div&gt;        </span><span class="token template-punctuation string">`</span></span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> school<span class="token operator">=</span>Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'尚硅谷'</span><span class="token punctuation">,</span>                <span class="token literal-property property">address</span><span class="token operator">:</span><span class="token string">'北京市昌平区'</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">            &lt;div&gt;                &lt;h2&gt;学校名称：{{name}}&lt;/h2&gt;                &lt;h2&gt;学校地址：{{address}}&lt;/h2&gt;                &lt;student&gt;&lt;/student&gt;                &lt;/div&gt;            </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>        <span class="token literal-property property">components</span><span class="token operator">:</span><span class="token punctuation">{</span>            student        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> app<span class="token operator">=</span>Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">components</span><span class="token operator">:</span><span class="token punctuation">{</span>            school        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">            &lt;div&gt;                &lt;h2&gt;根组件&lt;/h2&gt;                &lt;school&gt;&lt;/school&gt;            &lt;/div&gt;        </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment">//注册组件</span>    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">"#root"</span><span class="token punctuation">,</span>        <span class="token literal-property property">components</span><span class="token operator">:</span><span class="token punctuation">{</span>            app<span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;app&gt;&lt;/app&gt;</span><span class="token template-punctuation string">`</span></span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="第二章-vue2高级"><a href="#第二章-vue2高级" class="headerlink" title="第二章 vue2高级"></a>第二章 vue2高级</h1><h2 id="01-分析VUE脚手架"><a href="#01-分析VUE脚手架" class="headerlink" title="01 分析VUE脚手架"></a>01 分析VUE脚手架</h2><h3 id="脚手架文件结构"><a href="#脚手架文件结构" class="headerlink" title="脚手架文件结构"></a>脚手架文件结构</h3><pre><code>├── node_modules├── public│   ├── favicon.ico: 页签图标│   └── index.html: 主页面├── src│   ├── assets: 存放静态资源│   │   └── logo.png│   │── component: 存放组件│   │   └── HelloWorld.vue│   │── App.vue: 汇总所有组件│   │── main.js: 入口文件├── .gitignore: git版本管制忽略的配置├── babel.config.js: babel的配置文件├── package.json: 应用包配置文件├── README.md: 应用描述文件├── package-lock.json：包版本控制文件</code></pre><h3 id="关于不同版本的Vue"><a href="#关于不同版本的Vue" class="headerlink" title="关于不同版本的Vue"></a>关于不同版本的Vue</h3><ol><li>vue.js与vue.runtime.xxx.js的区别：<ol><li>vue.js是完整版的Vue，包含：核心功能 + 模板解析器。</li><li>vue.runtime.xxx.js是运行版的Vue，只包含：核心功能；没有模板解析器。</li></ol></li><li>因为vue.runtime.xxx.js没有模板解析器，所以不能使用template这个配置项，需要使用render函数接收到的createElement函数去指定具体内容。</li></ol><h3 id="vue-config-js配置文件"><a href="#vue-config-js配置文件" class="headerlink" title="vue.config.js配置文件"></a>vue.config.js配置文件</h3><ol><li>使用vue inspect &gt; output.js可以查看到Vue脚手架的默认配置。</li><li>使用vue.config.js可以对脚手架进行个性化定制，详情见：<a class="link" href="https://cli.vuejs.org/zh">https://cli.vuejs.org/zh<i class="fas fa-external-link-alt"></i></a></li></ol><h2 id="02-ref属性"><a href="#02-ref属性" class="headerlink" title="02 ref属性"></a>02 ref属性</h2><ol><li>被用来给元素或子组件注册引用信息（id的替代者）</li><li>应用在html标签上获取的是真实DOM元素，应用在组件标签上是组件实例对象（vc）</li><li>使用方式：<ol><li>打标识：<code>&lt;h1 ref="xxx"&gt;.....&lt;/h1&gt;</code> 或 <code>&lt;School ref="xxx"&gt;&lt;/School&gt;</code></li><li>获取：<code>this.$refs.xxx</code></li></ol></li></ol><h2 id="03-props配置项"><a href="#03-props配置项" class="headerlink" title="03 props配置项"></a>03 props配置项</h2><ol><li><p>功能：让组件接收外部传过来的数据</p></li><li><p>传递数据：<code>&lt;Demo name="xxx"/&gt;</code></p></li><li><p>接收数据：</p><ol><li><p>第一种方式（只接收）：<code>props:['name'] </code></p></li><li><p>第二种方式（限制类型）：<code>props:{name:String}</code></p></li><li><p>第三种方式（限制类型、限制必要性、指定默认值）：</p><pre class="line-numbers language-none"><code class="language-none">props:{name:{type:String, //类型required:true, //必要性default:'老王' //默认值}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><blockquote><p>注意：props是只读的，Vue底层会监测你对props的修改，如果进行了修改，就会发出警告，若业务需求确实需要修改，那么请复制props的内容到data中一份，然后去修改data中的数据。</p></blockquote></li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Student'</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">'学生'</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token function">updateAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">++</span><span class="token comment">//vue 不建议直接修改props中的值</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">//props:["name", "age", "sex"]//简单声明接受</span>    <span class="token comment">//接受的同时，进行类型限制</span>    <span class="token literal-property property">props</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token literal-property property">type</span><span class="token operator">:</span>String<span class="token punctuation">,</span>            <span class="token literal-property property">required</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//必须传递</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token literal-property property">type</span><span class="token operator">:</span>Number<span class="token punctuation">,</span>            <span class="token keyword">default</span><span class="token operator">:</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token comment">//默认值</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token literal-property property">sex</span><span class="token operator">:</span><span class="token punctuation">{</span>            <span class="token keyword">typeof</span><span class="token operator">:</span>String<span class="token punctuation">,</span>            <span class="token literal-property property">required</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="04-mixin-混入"><a href="#04-mixin-混入" class="headerlink" title="04 mixin(混入)"></a>04 mixin(混入)</h2><ol><li><p>功能：可以把多个组件共用的配置提取成一个混入对象</p></li><li><p>使用方式：</p><p>第一步定义混合：</p><pre class="line-numbers language-none"><code class="language-none">{    data(){....},    methods:{....}    ....}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二步使用混入：</p><p>全局混入：<code>Vue.mixin(xxx)</code> 局部混入：<code>mixins:['xxx']</code></p></li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//全局混合</span><span class="token keyword">import</span> <span class="token punctuation">{</span>mixin<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./mixin'</span>Vue<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span>mixin<span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">const</span> mixin<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token function">showName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'mix mounted'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">import</span> <span class="token punctuation">{</span>mixin<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../mixin'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Student'</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span>            <span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token string">'男'</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">// methods:{</span>    <span class="token comment">//    showName(){</span>    <span class="token comment">//        alert(this.name)</span>    <span class="token comment">//    }</span>    <span class="token comment">// },</span>   <span class="token literal-property property">mixins</span><span class="token operator">:</span><span class="token punctuation">[</span>mixin<span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="05-插件"><a href="#05-插件" class="headerlink" title="05 插件"></a>05 插件</h2><ol><li><p>功能：用于增强Vue</p></li><li><p>本质：包含install方法的一个对象，install的第一个参数是Vue，第二个以后的参数是插件使用者传递的数据。</p></li><li><p>定义插件：</p><pre class="line-numbers language-none"><code class="language-none">对象.install = function (Vue, options) {    // 1. 添加全局过滤器    Vue.filter(....)    // 2.定义全局指令局指令    Vue.directive(....)    // 3. 配置全局混入(合)    Vue.mixin(....)    // 4. 添加实例方法    Vue.prototype.$myMethod = function () {...}    Vue.prototype.$myProperty = xxxx}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用插件：<code>Vue.use()</code></p></li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">{</span>    <span class="token function">install</span><span class="token punctuation">(</span><span class="token parameter">Vue</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//全局过滤器</span>        Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">'mySlice'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment">//定义全局指令</span>        Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'fbind'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>            <span class="token comment">//指令与元素成功绑定时（一上来）</span>            <span class="token function">bind</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span>binding</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                element<span class="token punctuation">.</span>value <span class="token operator">=</span> binding<span class="token punctuation">.</span>value            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment">//指令所在元素被插入页面时</span>            <span class="token function">inserted</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span>binding</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                element<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment">//指令所在的模板被重新解析时</span>            <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span>binding</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                element<span class="token punctuation">.</span>value <span class="token operator">=</span> binding<span class="token punctuation">.</span>value            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment">//定义一个全局的混合</span>        Vue<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span><span class="token punctuation">{</span>                    <span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">,</span>                    <span class="token literal-property property">y</span><span class="token operator">:</span><span class="token number">200</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>                <span class="token function">showName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment">//给Vue的原型上添加一个方法</span>        <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">demo</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//引入插件</span><span class="token keyword">import</span> plugins <span class="token keyword">from</span> <span class="token string">'./plugins'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>plugins<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="06-scoped样式"><a href="#06-scoped样式" class="headerlink" title="06 scoped样式"></a>06 scoped样式</h2><ol><li>作用：让样式在局部生效，防止冲突。</li><li>写法：<code>&lt;style scoped&gt;</code></li></ol><pre class="line-numbers language-javasc" data-language="javasc"><code class="language-javasc">school组件&lt;style scoped&gt;.demo{    background-color: skyblue;}&lt;/style&gt;student组件&lt;style scoped&gt;.demo {    background-color: orange;  }&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/image-20230610155809658.png"></p><h2 id="07-总结TodoList案例"><a href="#07-总结TodoList案例" class="headerlink" title="07 总结TodoList案例"></a>07 总结TodoList案例</h2><ol><li><p>组件化编码流程：</p><p>(1).拆分静态组件：组件要按照功能点拆分，命名不要与html元素冲突。</p><p>(2).实现动态组件：考虑好数据的存放位置，数据是一个组件在用，还是一些组件在用：</p><p>1).一个组件在用：放在组件自身即可。</p><p>2). 一些组件在用：放在他们共同的父组件上（状态提升）。</p><p>(3).实现交互：从绑定事件开始。</p></li><li><p>props适用于：</p><p>(1).父组件 ==&gt; 子组件 通信</p><p>(2).子组件 ==&gt; 父组件 通信（要求父先给子一个函数）</p></li><li><p>使用v-model时要切记：v-model绑定的值不能是props传过来的值，因为props是不可以修改的！</p></li><li><p>props传过来的若是对象类型的值，修改对象中的属性时Vue不会报错，但不推荐这样做。</p></li></ol><p><strong>父组件注册方法</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"> <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>  <span class="token function">addTodo</span><span class="token punctuation">(</span><span class="token parameter">todoObj</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我是App组件,我接收到了"</span><span class="token punctuation">,</span>todoObj<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>todoObj<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">//取消勾选一个todo</span>  <span class="token function">checkTodo</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>id<span class="token operator">===</span>id<span class="token punctuation">)</span><span class="token punctuation">{</span>          item<span class="token punctuation">.</span>isFinished<span class="token operator">=</span><span class="token operator">!</span>item<span class="token punctuation">.</span>isFinished          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">//删除一个todo</span>  <span class="token function">deleteTodo</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我是App组件,我接收到了"</span><span class="token punctuation">,</span>id<span class="token punctuation">)</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token operator">=&gt;</span>item<span class="token punctuation">.</span>id<span class="token operator">!==</span>id<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">//全选或者全不选</span>  <span class="token function">checkAll</span><span class="token punctuation">(</span><span class="token parameter">checked</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    checked<span class="token operator">?</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">todo</span><span class="token operator">=&gt;</span>todo<span class="token punctuation">.</span>isFinished<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token operator">:</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">todo</span><span class="token operator">=&gt;</span>todo<span class="token punctuation">.</span>isFinished<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">//清除所有已完成的</span>  <span class="token function">clearAllFinished</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">todo</span><span class="token operator">=&gt;</span><span class="token operator">!</span>todo<span class="token punctuation">.</span>isFinished<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>方法传递给子组件</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"todo-container"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"todo-wrap"</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>MyHeader <span class="token operator">:</span>addTodo<span class="token operator">=</span><span class="token string">"addTodo"</span><span class="token operator">/</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>MyList <span class="token operator">:</span>todos<span class="token operator">=</span><span class="token string">"todos"</span>       <span class="token operator">:</span>checkTodo<span class="token operator">=</span><span class="token string">"checkTodo"</span>      <span class="token operator">:</span>deleteTodo<span class="token operator">=</span><span class="token string">"deleteTodo"</span>      <span class="token operator">/</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>MyFooter <span class="token operator">:</span>todos<span class="token operator">=</span><span class="token string">"todos"</span> <span class="token operator">:</span>checkAll<span class="token operator">=</span><span class="token string">"checkAll"</span>      <span class="token operator">:</span>clearAllFinished<span class="token operator">=</span><span class="token string">"clearAllFinished"</span>      <span class="token operator">/</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>子组件接受和使用</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//声明接受父组件传递过来的数据</span><span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'todo'</span><span class="token punctuation">,</span><span class="token string">'checkTodo'</span><span class="token punctuation">,</span><span class="token string">'deleteTodo'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token function">handleCheck</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment">//通知App组件，取消勾选一个todo</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkTodo</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token punctuation">,</span>    <span class="token comment">//删除</span>    <span class="token function">handleDelete</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment">//通知App组件，删除一个todo</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">deleteTodo</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>    <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="08-webStorage"><a href="#08-webStorage" class="headerlink" title="08 webStorage"></a>08 webStorage</h2><ol><li><p>存储内容大小一般支持5MB左右（不同浏览器可能还不一样）</p></li><li><p>浏览器端通过 Window.sessionStorage 和 Window.localStorage 属性来实现本地存储机制。</p></li><li><p>相关API：</p><ol><li><p><code>xxxxxStorage.setItem('key', 'value');</code> 该方法接受一个键和值作为参数，会把键值对添加到存储中，如果键名存在，则更新其对应的值。</p></li><li><p><code>xxxxxStorage.getItem('person');</code></p><p> 该方法接受一个键名作为参数，返回键名对应的值。</p></li><li><p><code>xxxxxStorage.removeItem('key');</code></p><p> 该方法接受一个键名作为参数，并把该键名从存储中删除。</p></li><li><p><code> xxxxxStorage.clear()</code></p><p> 该方法会清空存储中的所有数据。</p></li></ol></li><li><p>备注：</p><ol><li>SessionStorage存储的内容会随着浏览器窗口关闭而消失。</li><li>LocalStorage存储的内容，需要手动清除才会消失。</li><li><code>xxxxxStorage.getItem(xxx)</code>如果xxx对应的value获取不到，那么getItem的返回值是null。</li><li><code>JSON.parse(null)</code>的结果依然是null。</li></ol></li></ol><h2 id="09-组件的自定义事件"><a href="#09-组件的自定义事件" class="headerlink" title="09 组件的自定义事件"></a>09 组件的自定义事件</h2><ol><li><p>一种组件间通信的方式，适用于：<strong>子组件 ===&gt; 父组件</strong></p></li><li><p>使用场景：A是父组件，B是子组件，B想给A传数据，那么就要在A中给B绑定自定义事件（事件的回调在A中）。</p></li><li><p>绑定自定义事件：</p><ol><li><p>第一种方式，在父组件中：<code>&lt;Demo @atguigu="test"/&gt;</code> 或 <code>&lt;Demo v-on:atguigu="test"/&gt;</code></p></li><li><p>第二种方式，在父组件中：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>Demo ref<span class="token operator">=</span><span class="token string">"demo"</span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">...</span><span class="token operator">...</span><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'atguigu'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>test<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>若想让自定义事件只能触发一次，可以使用<code>once</code>修饰符，或<code>$once</code>方法。</p></li></ol></li><li><p>触发自定义事件：<code>this.$emit('atguigu',数据)</code></p></li><li><p>解绑自定义事件<code>this.$off('atguigu')</code></p></li><li><p>组件上也可以绑定原生DOM事件，需要使用<code>native</code>修饰符。</p></li><li><p>注意：通过<code>this.$refs.xxx.$on('atguigu',回调)</code>绑定自定义事件时，回调要么配置在methods中，要么用箭头函数，否则this指向会出问题！</p></li></ol><h2 id="10-全局事件总线（GlobalEventBus）"><a href="#10-全局事件总线（GlobalEventBus）" class="headerlink" title="10 全局事件总线（GlobalEventBus）"></a>10 全局事件总线（GlobalEventBus）</h2><ol><li><p>一种组件间通信的方式，适用于任意组件间通信。</p></li><li><p>安装全局事件总线（在main.js中）：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token operator">...</span><span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$bus <span class="token operator">=</span> <span class="token keyword">this</span> <span class="token comment">//安装全局事件总线，$bus就是当前应用的vm</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用事件总线：</p><ol><li><p>接收数据：A组件想接收数据，则在A组件中给$bus绑定自定义事件，事件的回调留在A组件自身。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">methods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">demo</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">...</span><span class="token operator">...</span><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'xxxx'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>demo<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">...</span><span class="token operator">...</span><span class="token function">beforeDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">$off</span><span class="token punctuation">(</span><span class="token string">'xxxx'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>提供数据：<code>this.$bus.$emit('xxxx',数据)</code></p></li></ol></li><li><p>最好在beforeDestroy钩子中，用$off去解绑当前组件所用到的事件。</p></li></ol><h2 id="11-全局事件总线（GlobalEventBus）"><a href="#11-全局事件总线（GlobalEventBus）" class="headerlink" title="11 全局事件总线（GlobalEventBus）"></a>11 全局事件总线（GlobalEventBus）</h2><ol><li><p>一种组件间通信的方式，适用于任意组件间通信。</p></li><li><p>安装全局事件总线（在main.js中）：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token operator">...</span><span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$bus <span class="token operator">=</span> <span class="token keyword">this</span> <span class="token comment">//安装全局事件总线，$bus就是当前应用的vm</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用事件总线：</p><ol><li><p>接收数据：A组件想接收数据，则在A组件中给$bus绑定自定义事件，事件的回调留在A组件自身。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">methods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">demo</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">...</span><span class="token operator">...</span><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'xxxx'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>demo<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">...</span><span class="token operator">...</span><span class="token function">beforeDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">$off</span><span class="token punctuation">(</span><span class="token string">'xxxx'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>提供数据：<code>this.$bus.$emit('xxxx',数据)</code></p></li></ol></li><li><p>最好在beforeDestroy钩子中，用$off去解绑当前组件所用到的事件。</p></li></ol><h2 id="12-消息订阅与发布（pubsub）"><a href="#12-消息订阅与发布（pubsub）" class="headerlink" title="12 消息订阅与发布（pubsub）"></a>12 消息订阅与发布（pubsub）</h2><ol><li><p>一种组件间通信的方式，适用于任意组件间通信。</p></li><li><p>使用步骤：</p><ol><li><p>安装pubsub：<code>npm i pubsub-js</code></p></li><li><p>引入: <code>import pubsub from 'pubsub-js'</code></p></li><li><p>接收数据：A组件想接收数据，则在A组件中订阅消息，订阅的回调留在A组件自身。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">methods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">demo</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">...</span><span class="token operator">...</span><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>pid <span class="token operator">=</span> pubsub<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">'xxx'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>demo<span class="token punctuation">)</span> <span class="token comment">//订阅消息，this.demo改成箭头函数也是一样的效果，不使用箭头函数的话，this不维护</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>提供数据：<code>pubsub.publish('xxx',数据)</code></p></li><li><p>最好在beforeDestroy钩子中，用<code>PubSub.unsubscribe(pid)</code>去取消订阅。</p></li></ol></li></ol><h2 id="13-nextTick"><a href="#13-nextTick" class="headerlink" title="13 nextTick"></a>13 nextTick</h2><ol><li>语法：<code>this.$nextTick(回调函数)</code></li><li>作用：在下一次 DOM 更新结束后执行其指定的回调。</li><li>什么时候用：当改变数据后，要基于更新后的新DOM进行某些操作时，要在nextTick所指定的回调函数中执行。</li></ol><h2 id="14-Vue封装的过度与动画"><a href="#14-Vue封装的过度与动画" class="headerlink" title="14 Vue封装的过度与动画"></a>14 Vue封装的过度与动画</h2><ol><li><p>作用：在插入、更新或移除 DOM元素时，在合适的时候给元素添加样式类名。</p></li><li><p>图示：<img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/image-20230612191059222.png"></p></li><li><p>写法：</p><ol><li><p>准备好样式：</p><ul><li>元素进入的样式：<ol><li>v-enter：进入的起点</li><li>v-enter-active：进入过程中</li><li>v-enter-to：进入的终点</li></ol></li><li>元素离开的样式：<ol><li>v-leave：离开的起点</li><li>v-leave-active：离开过程中</li><li>v-leave-to：离开的终点</li></ol></li></ul></li><li><p>使用<code>&lt;transition&gt;</code>包裹要过度的元素，并配置name属性：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>transition name<span class="token operator">=</span><span class="token string">"hello"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>h1 v<span class="token operator">-</span>show<span class="token operator">=</span><span class="token string">"isShow"</span><span class="token operator">&gt;</span>你好啊！<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>transition<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>备注：若有多个元素需要过度，则需要使用：<code>&lt;transition-group&gt;</code>，且每个元素都要指定<code>key</code>值。</p></li></ol><p>可以使用css动画库，这里提供一个</p><p><a class="link" href="https://animate.style/">Animate.css | https://animate.style/<i class="fas fa-external-link-alt"></i></a></p></li></ol><h2 id="15-vue脚手架配置代理"><a href="#15-vue脚手架配置代理" class="headerlink" title="15 vue脚手架配置代理"></a>15 vue脚手架配置代理</h2><h3 id="ajax请求我们使用axios"><a href="#ajax请求我们使用axios" class="headerlink" title="ajax请求我们使用axios"></a>ajax请求我们使用axios</h3><h4 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h4><p>AJAX（Asynchronous JavaScript and XML）是一种Web开发技术，它允许网页在不刷新的情况下发送和接受数据。传统的Web应用程序采用同步请求，即当用户执行某些操作时，它会向服务器发送请求并等待响应。而AJAX则允许异步请求，在后台发送请求并继续执行其他任务，当服务器响应时再进行处理。这种技术可以提高网站性能，并允许动态更新网页内容。</p><h5 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h5><p>AJAX使用XMLHttpRequest对象进行通信，该对象允许网页向服务器发送HTTP请求并获取响应。通过这种方式，网页可以在不刷新页面的情况下更新部分内容。</p><ol><li>创建XMLHttpRequest对象</li><li>发送HTTP请求</li><li>接收服务器响应</li><li>更新网页内容</li></ol><h4 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h4><p>Axios是一个基于Promise的HTTP客户端库，它允许在浏览器和Node.js中发送异步HTTP请求。Axios支持所有现代浏览器，包括IE8+，IE9+和IE11+。它提供了易于使用的API，可以轻松地将其集成到任何项目中。与jQuery.ajax()和原生XMLHttpRequest相比，Axios提供了更多的功能和更好的错误处理。</p><h5 id="工作原理-1"><a href="#工作原理-1" class="headerlink" title="工作原理"></a>工作原理</h5><p>Axios通过创建XMLHttpRequest对象发送HTTP请求，并返回一个Promise对象，该对象可以处理成功和失败的情况。Axios还提供了拦截器，可以在请求和响应之前或之后执行处理程序。</p><ol><li>创建一个Axios实例</li><li>发送HTTP请求</li><li>处理成功或失败的结果</li></ol><h4 id="在npm中下载axios"><a href="#在npm中下载axios" class="headerlink" title="在npm中下载axios"></a>在npm中下载axios</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">npm i axios<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 引入JavaScript方法</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="方法一：vue-cil配置防止跨域，代理服务器"><a href="#方法一：vue-cil配置防止跨域，代理服务器" class="headerlink" title="方法一：vue-cil配置防止跨域，代理服务器"></a>方法一：vue-cil配置防止跨域，代理服务器</h3><p> 在vue.config.js中添加如下配置：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">devServer</span><span class="token operator">:</span><span class="token punctuation">{</span>  <span class="token literal-property property">proxy</span><span class="token operator">:</span><span class="token string">"http://localhost:5000"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>说明：</p><ol><li>优点：配置简单，请求资源时直接发给前端（8080）即可。</li><li>缺点：不能配置多个代理，不能灵活的控制请求是否走代理。</li><li>工作方式：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器 （优先匹配前端资源）</li></ol><blockquote><p>此时ajax请求发送端口就不是5000了，而是当前服务器的端口，然后由代理服务器进行转发。</p><p>此时请求策略是：如果ajax在8080端口服务器中请求不到（默认是请求public文件夹下的东西），就会转发到5500端口服务器</p></blockquote><h3 id="方法二：根据规则进行代理"><a href="#方法二：根据规则进行代理" class="headerlink" title="方法二：根据规则进行代理"></a>方法二：根据规则进行代理</h3><p> 编写vue.config.js配置具体代理规则：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token string-property property">'/api1'</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token comment">// 匹配所有以 '/api1'开头的请求路径</span>        <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">'http://localhost:5000'</span><span class="token punctuation">,</span><span class="token comment">// 代理目标的基础路径</span>        <span class="token literal-property property">changeOrigin</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token literal-property property">pathRewrite</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string-property property">'^/api1'</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token string-property property">'/api2'</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token comment">// 匹配所有以 '/api2'开头的请求路径</span>        <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">'http://localhost:5001'</span><span class="token punctuation">,</span><span class="token comment">// 代理目标的基础路径</span>        <span class="token literal-property property">changeOrigin</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token literal-property property">pathRewrite</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string-property property">'^/api2'</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/*   changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000   changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:8080   changeOrigin默认值为true*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：</p><ol><li>优点：可以配置多个代理，且可以灵活的控制请求是否走代理。</li><li>缺点：配置略微繁琐，请求资源时必须加前缀。</li></ol><h3 id="使用-Vue-CLI-提供的-defineConfig-方法来创建配置对象（视频上使用的案例）"><a href="#使用-Vue-CLI-提供的-defineConfig-方法来创建配置对象（视频上使用的案例）" class="headerlink" title="使用 Vue CLI 提供的 defineConfig 方法来创建配置对象（视频上使用的案例）"></a>使用 Vue CLI 提供的 <code>defineConfig</code> 方法来创建配置对象（视频上使用的案例）</h3><p>其实就是通过使用 Vue CLI 提供的 <code>defineConfig</code> 方法来创建一个配置对象。该方法可以获取到 Vue CLI 默认的配置信息，并且支持传入一个函数作为参数。在这个函数中，可以对默认配置信息进行修改和扩展，并且可以使用 Vue CLI 提供的 API 来自动生成某些配置信息。</p><p>下面是使用<code>defineConfig</code>方法来创建配置对象</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'@vue/cli-service'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token parameter">config</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token comment">// 添加自定义插件</span>  config<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyCustomPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 自动设置别名</span>  config<span class="token punctuation">.</span>resolve<span class="token punctuation">.</span>alias<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'utils'</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'src/utils'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 对开发服务器进行详细配置（方式二）</span>  config<span class="token punctuation">.</span>devServer <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token string-property property">'/api'</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">'http://localhost:5000'</span><span class="token punctuation">,</span>        <span class="token literal-property property">changeOrigin</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token literal-property property">pathRewrite</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string-property property">'^/api'</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> config<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个示例代码中，我们传给 <code>defineConfig</code> 方法一个函数作为参数，并将其命名为 <code>config</code>。在这个函数中，我们对 Vue CLI 默认的配置信息进行了一些修改和扩展，如添加自定义插件、自动设置别名和对开发服务器进行详细配置等。</p><p>其中最重要的部分是使用 <code>config.resolve.alias.set()</code> 方法来设置别名，以便更方便地引用项目中的模块。另外，还对开发服务器进行了详细的配置，这里采用的是第二种方式，即使用对象字面量的方式。</p><p>总之，使用 <code>defineConfig</code> 方法可以更灵活和方便地定制化应用程序的行为和功能，并能够充分利用 Vue CLI 所提供的工具和 API。</p><h2 id="16-插槽"><a href="#16-插槽" class="headerlink" title="16 插槽"></a>16 插槽</h2><ol><li><p>作用：让父组件可以向子组件指定位置插入html结构，也是一种组件间通信的方式，适用于 <strong>父组件 ===&gt; 子组件</strong> 。</p></li><li><p>分类：默认插槽、具名插槽、作用域插槽</p></li><li><p>使用方式：</p><ol><li><p>默认插槽：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">父组件中：        <span class="token operator">&lt;</span>Category<span class="token operator">&gt;</span>           <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>html结构<span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>Category<span class="token operator">&gt;</span>子组件中：        <span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>               <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 定义插槽 <span class="token operator">--</span><span class="token operator">&gt;</span>               <span class="token operator">&lt;</span>slot<span class="token operator">&gt;</span>插槽默认内容<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>具名插槽：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">父组件中：        <span class="token operator">&lt;</span>Category<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>template slot<span class="token operator">=</span><span class="token string">"center"</span><span class="token operator">&gt;</span>              <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>html结构<span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>template v<span class="token operator">-</span>slot<span class="token operator">:</span>footer<span class="token operator">&gt;</span>               <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>html结构<span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>Category<span class="token operator">&gt;</span>子组件中：        <span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>               <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 定义插槽 <span class="token operator">--</span><span class="token operator">&gt;</span>               <span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">"center"</span><span class="token operator">&gt;</span>插槽默认内容<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">&gt;</span>               <span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">"footer"</span><span class="token operator">&gt;</span>插槽默认内容<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>作用域插槽：</p><ol><li><p>理解：数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。（games数据在Category组件中，但使用数据所遍历出来的结构由App组件决定）</p></li><li><p>具体编码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">父组件中：<span class="token operator">&lt;</span>Category<span class="token operator">&gt;</span><span class="token operator">&lt;</span>template scope<span class="token operator">=</span><span class="token string">"scopeData"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 生成的是ul列表 <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span><span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"g in scopeData.games"</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"g"</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>g<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Category<span class="token operator">&gt;</span><span class="token operator">&lt;</span>Category<span class="token operator">&gt;</span><span class="token operator">&lt;</span>template slot<span class="token operator">-</span>scope<span class="token operator">=</span><span class="token string">"scopeData"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 生成的是h4标题 <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>h4 v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"g in scopeData.games"</span> <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">"g"</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>g<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h4<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Category<span class="token operator">&gt;</span>子组件中：        <span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>slot <span class="token operator">:</span>games<span class="token operator">=</span><span class="token string">"games"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>            <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>                <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'Category'</span><span class="token punctuation">,</span>                <span class="token literal-property property">props</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token comment">//数据在子组件自身</span>                <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token punctuation">{</span>                        <span class="token literal-property property">games</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'红色警戒'</span><span class="token punctuation">,</span><span class="token string">'穿越火线'</span><span class="token punctuation">,</span><span class="token string">'劲舞团'</span><span class="token punctuation">,</span><span class="token string">'超级玛丽'</span><span class="token punctuation">]</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在父组件中，分别定义了两个<code>&lt;Category&gt;</code>组件，并向其传递了不同的模板。模板都使用了<code>slot-scope</code>或<code>scope</code>来指定变量名并向子组件传递数据。</li><li>在子组件中，定义了一个<code>games</code>数组，并将该数组通过<code>slot</code>传递给父组件。父组件可以在模板内部使用<code>slot-scope</code>或<code>scope</code>指定的变量名来访问该数组，并生成不同的内容。</li><li>具体来说，第一个模板使用了<code>&lt;ul&gt;</code>和<code>&lt;li&gt;</code>标签来生成一个无序列表，循环遍历了<code>scopeData.games</code>数组并将每个元素作为列表项展示；而第二个模板则使用了<code>&lt;h4&gt;</code>标签来生成一个标题，同样循环遍历了<code>scopeData.games</code>数组并将每个元素作为一个标题展示。</li><li>最终，在子组件的渲染过程中，父组件会根据不同的模板来生成不同的内容，从而实现了子组件内容的自定义。</li><li>总之，作用域插槽提供了一种非常灵活的机制，可以帮助我们将组件的渲染逻辑与组件本身解耦，实现更加清晰和高效的代码。</li></ul></li></ol></li></ol></li></ol><h2 id="17-Vuex"><a href="#17-Vuex" class="headerlink" title="17. Vuex"></a>17. Vuex</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><p> 在Vue中实现集中式状态（数据）管理的一个Vue插件，对vue应用中多个组件的共享状态进行集中式的管理（读/写），也是一种组件间通信的方式，且适用于任意组件间通信。</p><p><a href="https://github.com/emmmua/study_vue/blob/master/%E8%B5%84%E6%96%99%EF%BC%88%E5%90%AB%E8%AF%BE%E4%BB%B6%EF%BC%89/02_%E5%8E%9F%E7%90%86%E5%9B%BE/vuex.png"><img lazyload="" alt="image" data-src="https://github.com/emmmua/study_vue/raw/master/vue_test/..%5C%E8%B5%84%E6%96%99%EF%BC%88%E5%90%AB%E8%AF%BE%E4%BB%B6%EF%BC%89%5C02_%E5%8E%9F%E7%90%86%E5%9B%BE%5Cvuex.png"></a></p><h3 id="2-何时使用？"><a href="#2-何时使用？" class="headerlink" title="2.何时使用？"></a>2.何时使用？</h3><p> 多个组件需要共享数据时</p><h3 id="3-搭建vuex环境"><a href="#3-搭建vuex环境" class="headerlink" title="3.搭建vuex环境"></a>3.搭建vuex环境</h3><ol><li><p>创建文件：<code>src/store/index.js</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//引入Vue核心库</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment">//引入Vuex</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token comment">//应用Vuex插件</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token comment">//准备actions对象——响应组件中用户的动作</span><span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//准备mutations对象——修改state中的数据</span><span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//准备state对象——保存具体的数据</span><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//创建并暴露store</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>actions<span class="token punctuation">,</span>mutations<span class="token punctuation">,</span>state<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在<code>main.js</code>中创建vm时传入<code>store</code>配置项</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">...</span><span class="token operator">...</span><span class="token comment">//引入store</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span><span class="token operator">...</span><span class="token operator">...</span><span class="token comment">//创建vm</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span><span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token parameter">h</span> <span class="token operator">=&gt;</span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">,</span>store<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="4-基本使用"><a href="#4-基本使用" class="headerlink" title="4.基本使用"></a>4.基本使用</h3><ol><li><p>初始化数据、配置<code>actions</code>、配置<code>mutations</code>，操作文件<code>store.js</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//引入Vue核心库</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment">//引入Vuex</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token comment">//引用Vuex</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment">//响应组件中加的动作</span><span class="token function">jia</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span>value</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">// console.log('actions中的jia被调用了',miniStore,value)</span>context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'JIA'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment">//执行加</span><span class="token constant">JIA</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>value</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">// console.log('mutations中的JIA被调用了',state,value)</span>state<span class="token punctuation">.</span>sum <span class="token operator">+=</span> value<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//初始化数据</span><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">{</span>   <span class="token literal-property property">sum</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token comment">//创建并暴露store</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>actions<span class="token punctuation">,</span>mutations<span class="token punctuation">,</span>state<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>组件中读取vuex中的数据：<code>$store.state.sum</code></p></li><li><p>组件中修改vuex中的数据：<code>$store.dispatch('action中的方法名',数据)</code> 或 <code>$store.commit('mutations中的方法名',数据)</code></p><blockquote><p>备注：若没有网络请求或其他业务逻辑，组件中也可以越过actions，即不写<code>dispatch</code>，直接编写<code>commit</code></p></blockquote></li></ol><h3 id="5-getters的使用"><a href="#5-getters的使用" class="headerlink" title="5.getters的使用"></a>5.getters的使用</h3><ol><li><p>概念：当state中的数据需要经过加工后再使用时，可以使用getters加工。</p></li><li><p>在<code>store.js</code>中追加<code>getters</code>配置</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">...</span><span class="token operator">...</span><span class="token keyword">const</span> getters <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token function">bigSum</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> state<span class="token punctuation">.</span>sum <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//创建并暴露store</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token operator">...</span>getters<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>组件中读取数据：<code>$store.getters.bigSum</code></p></li><li><p>它不是一个必须使用的（所以官方图上也没有展示）</p></li></ol><h3 id="6-四个map方法的使用"><a href="#6-四个map方法的使用" class="headerlink" title="6.四个map方法的使用"></a>6.四个map方法的使用</h3><ol><li><p><strong>mapState方法：</strong>用于帮助我们映射<code>state</code>中的数据为计算属性</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token comment">//借助mapState生成计算属性：sum、school、subject（对象写法）</span>     <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">sum</span><span class="token operator">:</span><span class="token string">'sum'</span><span class="token punctuation">,</span><span class="token literal-property property">school</span><span class="token operator">:</span><span class="token string">'school'</span><span class="token punctuation">,</span><span class="token literal-property property">subject</span><span class="token operator">:</span><span class="token string">'subject'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>             <span class="token comment">//借助mapState生成计算属性：sum、school、subject（数组写法）</span>    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'sum'</span><span class="token punctuation">,</span><span class="token string">'school'</span><span class="token punctuation">,</span><span class="token string">'subject'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>mapGetters方法：</strong>用于帮助我们映射<code>getters</code>中的数据为计算属性</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token comment">//借助mapGetters生成计算属性：bigSum（对象写法）</span>    <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">bigSum</span><span class="token operator">:</span><span class="token string">'bigSum'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">//借助mapGetters生成计算属性：bigSum（数组写法）</span>    <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'bigSum'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>mapActions方法：</strong>用于帮助我们生成与<code>actions</code>对话的方法，即：包含<code>$store.dispatch(xxx)</code>的函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token comment">//靠mapActions生成：incrementOdd、incrementWait（对象形式）</span>    <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">incrementOdd</span><span class="token operator">:</span><span class="token string">'jiaOdd'</span><span class="token punctuation">,</span><span class="token literal-property property">incrementWait</span><span class="token operator">:</span><span class="token string">'jiaWait'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment">//靠mapActions生成：incrementOdd、incrementWait（数组形式）</span>    <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'jiaOdd'</span><span class="token punctuation">,</span><span class="token string">'jiaWait'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>mapMutations方法：</strong>用于帮助我们生成与<code>mutations</code>对话的方法，即：包含<code>$store.commit(xxx)</code>的函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token comment">//靠mapActions生成：increment、decrement（对象形式）</span>    <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">increment</span><span class="token operator">:</span><span class="token string">'JIA'</span><span class="token punctuation">,</span><span class="token literal-property property">decrement</span><span class="token operator">:</span><span class="token string">'JIAN'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment">//靠mapMutations生成：JIA、JIAN（数组形式）</span>    <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'JIA'</span><span class="token punctuation">,</span><span class="token string">'JIAN'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><blockquote><p>备注：mapActions与mapMutations使用时，若需要传递参数需要：在模板中绑定事件时传递好参数，否则参数是事件对象。</p></blockquote><h3 id="18-模块化-命名空间"><a href="#18-模块化-命名空间" class="headerlink" title="18.模块化+命名空间"></a>18.模块化+命名空间</h3><ol><li><p>目的：让代码更好维护，让多种数据分类更加明确。</p></li><li><p>修改<code>store.js</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> countAbout <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token literal-property property">namespaced</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//开启命名空间</span>  <span class="token literal-property property">state</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">getters</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">bigSum</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token comment">// 这里的state时当前countAbout中的state</span>       <span class="token keyword">return</span> state<span class="token punctuation">.</span>sum <span class="token operator">*</span> <span class="token number">10</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> personAbout <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token literal-property property">namespaced</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//开启命名空间</span>  <span class="token literal-property property">state</span><span class="token operator">:</span><span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">{</span>    countAbout<span class="token punctuation">,</span>    personAbout  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>开启命名空间后，组件中读取state数据：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//方式一：自己直接读取</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>personAbout<span class="token punctuation">.</span>list<span class="token comment">//方式二：借助mapState读取：</span><span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token string">'countAbout'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'sum'</span><span class="token punctuation">,</span><span class="token string">'school'</span><span class="token punctuation">,</span><span class="token string">'subject'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>开启命名空间后，组件中读取getters数据：</p><pre class="line-numbers language-none"><code class="language-none">//方式一：自己直接读取this.$store.getters['personAbout/firstPersonName']//方式二：借助mapGetters读取：...mapGetters('countAbout',['bigSum'])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>开启命名空间后，组件中调用dispatch</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//方式一：自己直接dispatch</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'personAbout/addPersonWang'</span><span class="token punctuation">,</span>person<span class="token punctuation">)</span><span class="token comment">//方式二：借助mapActions：</span><span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token string">'countAbout'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">incrementOdd</span><span class="token operator">:</span><span class="token string">'jiaOdd'</span><span class="token punctuation">,</span><span class="token literal-property property">incrementWait</span><span class="token operator">:</span><span class="token string">'jiaWait'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>开启命名空间后，组件中调用commit</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//方式一：自己直接commit</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'personAbout/ADD_PERSON'</span><span class="token punctuation">,</span>person<span class="token punctuation">)</span><span class="token comment">//方式二：借助mapMutations：</span><span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token string">'countAbout'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">increment</span><span class="token operator">:</span><span class="token string">'JIA'</span><span class="token punctuation">,</span><span class="token literal-property property">decrement</span><span class="token operator">:</span><span class="token string">'JIAN'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><ol><li>理解： 一个路由（route）就是一组映射关系（key - value），多个路由需要路由器（router）进行管理。</li><li>前端路由：key是路径，value是组件。</li><li>后端路由：value是function，用于处理<strong>请求路径</strong>找到匹配的<strong>函数</strong>来处理(@RequestMapping)</li></ol><h3 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1.基本使用"></a>1.基本使用</h3><ol><li><p>安装vue-router，命令：<code>npm i vue-router</code></p></li><li><p>应用插件：<code>Vue.use(VueRouter)</code></p></li><li><p>编写router配置项:</p><pre class="line-numbers language-none"><code class="language-none">//引入VueRouterimport VueRouter from 'vue-router'//引入Luyou 组件import About from '../components/About'import Home from '../components/Home'//创建router实例对象，去管理一组一组的路由规则const router = new VueRouter({routes:[{path:'/about',component:About},{path:'/home',component:Home}]})//暴露routerexport default router<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>实现切换（active-class可配置高亮样式）</p><pre class="line-numbers language-none"><code class="language-none">&lt;router-link active-class="active" to="/about"&gt;About&lt;/router-link&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>指定展示位置</p><pre class="line-numbers language-none"><code class="language-none">&lt;router-view&gt;&lt;/router-view&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="2-几个注意点"><a href="#2-几个注意点" class="headerlink" title="2.几个注意点"></a>2.几个注意点</h3><ol><li>路由组件通常存放在<code>pages</code>文件夹，一般组件通常存放在<code>components</code>文件夹。</li><li>通过切换，“隐藏”了的路由组件，默认是被销毁掉的，需要的时候再去挂载。</li><li>每个组件都有自己的<code>$route</code>属性，里面存储着自己的路由信息。</li><li>整个应用只有一个router，可以通过组件的<code>$router</code>属性获取到。</li><li>在配置routers时，引入的compoment大小写编译器可能不报错，但是vue编译会报错。</li></ol><h3 id="3-多级路由（多级路由）"><a href="#3-多级路由（多级路由）" class="headerlink" title="3.多级路由（多级路由）"></a>3.多级路由（多级路由）</h3><ol><li><p>配置路由规则，使用children配置项：</p><pre class="line-numbers language-none"><code class="language-none">routes:[{path:'/about',component:About,},{path:'/home',component:Home,children:[ //通过children配置子级路由{path:'news', //此处一定不要写：/newscomponent:News},{path:'message',//此处一定不要写：/messagecomponent:Message}]}]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>跳转（要写完整路径）：</p><pre class="line-numbers language-none"><code class="language-none">&lt;router-link to="/home/news"&gt;News&lt;/router-link&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="4-路由的query参数"><a href="#4-路由的query参数" class="headerlink" title="4.路由的query参数"></a>4.路由的query参数</h3><ol><li><p>传递参数</p><pre class="line-numbers language-none"><code class="language-none">&lt;!-- 跳转并携带query参数，to的字符串写法 --&gt;&lt;router-link :to="/home/message/detail?id=666&amp;title=你好"&gt;跳转&lt;/router-link&gt;&lt;!-- 跳转并携带query参数，to的对象写法 --&gt;&lt;router-link :to="{path:'/home/message/detail',query:{   id:666,            title:'你好'}}"&gt;跳转&lt;/router-link&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>接收参数：</p><pre class="line-numbers language-none"><code class="language-none">$route.query.id$route.query.title<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h3 id="5-命名路由"><a href="#5-命名路由" class="headerlink" title="5.命名路由"></a>5.命名路由</h3><ol><li><p>作用：可以简化路由的跳转。</p></li><li><p>如何使用</p><ol><li><p>给路由命名：</p><pre class="line-numbers language-none"><code class="language-none">{path:'/demo',component:Demo,children:[{path:'test',component:Test,children:[{                      name:'hello' //给路由命名path:'welcome',component:Hello,}]}]}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>简化跳转：</p><pre class="line-numbers language-none"><code class="language-none">&lt;!--简化前，需要写完整的路径 --&gt;&lt;router-link to="/demo/test/welcome"&gt;跳转&lt;/router-link&gt;&lt;!--简化后，直接通过名字跳转 --&gt;&lt;router-link :to="{name:'hello'}"&gt;跳转&lt;/router-link&gt;&lt;!--简化写法配合传递参数 --&gt;&lt;router-link :to="{name:'hello',query:{   id:666,            title:'你好'}}"&gt;跳转&lt;/router-link&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ol><h3 id="6-路由的params参数"><a href="#6-路由的params参数" class="headerlink" title="6.路由的params参数"></a>6.路由的params参数</h3><ol><li><p>配置路由，声明接收params参数</p><pre class="line-numbers language-none"><code class="language-none">{path:'/home',component:Home,children:[{path:'news',component:News},{component:Message,children:[{name:'xiangqing',path:'detail/:id/:title', //使用占位符声明接收params参数component:Detail}]}]}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>传递参数</p><pre class="line-numbers language-none"><code class="language-none">&lt;!-- 跳转并携带params参数，to的字符串写法 --&gt;&lt;router-link :to="/home/message/detail/666/你好"&gt;跳转&lt;/router-link&gt;&lt;!-- 跳转并携带params参数，to的对象写法 --&gt;&lt;router-link :to="{name:'xiangqing',params:{   id:666,            title:'你好'}}"&gt;跳转&lt;/router-link&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>特别注意：路由携带params参数时，若使用to的对象写法，则不能使用path配置项，必须使用name配置！</p></blockquote></li><li><p>接收参数：</p><pre class="line-numbers language-none"><code class="language-none">$route.params.id$route.params.title<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h3 id="7-路由的props配置"><a href="#7-路由的props配置" class="headerlink" title="7.路由的props配置"></a>7.路由的props配置</h3><p> 作用：让路由组件更方便的收到参数</p><pre class="line-numbers language-none"><code class="language-none">{name:'xiangqing',path:'detail/:id',component:Detail,//第一种写法：props值为对象，该对象中所有的key-value的组合最终都会通过props传给Detail组件// props:{a:900}//第二种写法：props值为布尔值，布尔值为true，则把路由收到的所有params参数通过props传给Detail组件// props:true//第三种写法：props值为函数，该函数返回的对象中每一组key-value都会通过props传给Detail组件props(route){return {id:route.query.id,title:route.query.title}}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-lt-router-link-gt-的replace属性"><a href="#8-lt-router-link-gt-的replace属性" class="headerlink" title="8.<router-link>的replace属性"></a>8.<code>&lt;router-link&gt;</code>的replace属性</h3><ol><li>作用：控制路由跳转时操作浏览器历史记录的模式</li><li>浏览器的历史记录有两种写入方式：分别为<code>push</code>和<code>replace</code>，<code>push</code>是追加历史记录，<code>replace</code>是替换当前记录。路由跳转时候默认为<code>push</code></li><li>如何开启<code>replace</code>模式：<code>&lt;router-link replace .......&gt;News&lt;/router-link&gt;</code></li></ol><h3 id="9-编程式路由导航"><a href="#9-编程式路由导航" class="headerlink" title="9.编程式路由导航"></a>9.编程式路由导航</h3><ol><li><p>作用：不借助<code>&lt;router-link&gt; </code>实现路由跳转，让路由跳转更加灵活</p></li><li><p>具体编码：</p><pre class="line-numbers language-none"><code class="language-none">//$router的两个APIthis.$router.push({name:'xiangqing',params:{id:xxx,title:xxx}})this.$router.replace({name:'xiangqing',params:{id:xxx,title:xxx}})this.$router.forward() //前进this.$router.back() //后退this.$router.go() //可前进也可后退（传递数字，根据正负前进和后退）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="10-缓存路由组件"><a href="#10-缓存路由组件" class="headerlink" title="10.缓存路由组件"></a>10.缓存路由组件</h3><ol><li><p>作用：让不展示的路由组件保持挂载，不被销毁。</p></li><li><p>具体编码：</p><pre class="line-numbers language-none"><code class="language-none">&lt;keep-alive include="News"&gt;     &lt;router-view&gt;&lt;/router-view&gt;&lt;/keep-alive&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><ul><li><code>&lt;keep-alive&gt;</code>是一个抽象组件，会将其包裹的内容存储在内存中，并在需要时缓存或销毁它们。</li><li><code>include="News"</code>表示只有名称为”News”的组件才应该被缓存。如果不指定<code>include</code>属性，则所有组件都将被缓存。</li><li><code>&lt;router-view&gt;</code>用于渲染当前路由匹配到的组件。</li></ul><p>因此，这段代码的作用是：当页面切换到名称为”News”的组件时，它会被缓存起来，当用户再次浏览到该组件时，直接从缓存中读取，提高了页面的响应速度和用户体验。</p><hr><p>如果要缓存多个组件，可以在<code>&lt;keep-alive&gt;</code>的<code>include</code>属性中指定一个数组来包含多个组件的名称。例如：</p><pre class="line-numbers language-none"><code class="language-none">&lt;keep-alive :include="['News', 'Article', 'Comment']"&gt;  &lt;router-view&gt;&lt;/router-view&gt;&lt;/keep-alive&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在这个例子中，会将名为”News”、”Article”和”Comment”的三个组件都缓存起来。如果需要缓存更多的组件，只需要将它们的名称放入数组即可。</p><p>注意：当使用数组形式进行多个组件的缓存时，Vue.js会根据它们在数组中的顺序依次匹配，如果找到匹配的组件，则会缓存它并停止继续匹配，因此，组件的顺序是有影响的，需要根据实际需求进行调整。</p><h3 id="11-两个新的生命周期钩子"><a href="#11-两个新的生命周期钩子" class="headerlink" title="11.两个新的生命周期钩子"></a>11.两个新的生命周期钩子</h3><ol><li>作用：<code>activated</code>和<code>deactivated</code>是Vue.js中的两个生命周期钩子函数，它们在<code>&lt;keep-alive&gt;</code>组件中使用，用于控制被缓存的组件的激活和停用。</li><li>功能分别是：<ol><li><code>activated</code>: 被缓存的组件激活时调用，可以在这里执行一些需要在组件被重新渲染前进行的操作，比如获取最新数据、更新状态等。（激活钩子）</li><li><code>deactivated</code>: 被缓存的组件停用时调用，可以在这里执行一些需要在组件被缓存前进行的操作，比如保存当前状态、清空数据等。（失活钩子）</li></ol></li></ol><blockquote><p>具体来说，当一个被缓存的组件被切换到时，会触发<code>activated</code>钩子函数；当一个被缓存的组件离开时，会触发<code>deactivated</code>钩子函数。</p></blockquote><hr><p>使用场景：<code>&lt;keep-alive&gt;</code>组件通常用于缓存页面中经常切换的组件，以提高页面的响应速度和用户体验。但是有些情况下，缓存的组件可能需要在每次被重新渲染前或者被缓存前执行一些特定的操作，例如：</p><ul><li>在页面切换到某个组件时，需要从服务器获取最新的数据。</li><li>当一个组件被缓存时，需要保存当前选中的状态，以便下次缓存时可以恢复。</li><li>当一个组件被停用时，需要将一些数据清空或重置。</li></ul><p>在这些情况下，就可以使用<code>activated</code>和<code>deactivated</code>钩子函数来实现这些操作。</p><h3 id="12-路由守卫"><a href="#12-路由守卫" class="headerlink" title="12.路由守卫"></a>12.路由守卫</h3><p>作用：路由守卫的作用是对即将发生的路由变化或已经发生的路由变化进行控制和管理。Vue Router 提供了全局守卫、独享守卫和组件内守卫三种类型的路由守卫。</p><p>通过使用路由守卫，我们可以实现以下功能：</p><ul><li>权限验证：在用户访问某些页面时，需要判断用户是否有访问权限。如果用户没有权限访问该页面，可以通过路由守卫拦截路由跳转，并弹出提示信息。</li><li>记录浏览历史：在用户浏览网站时，需要记录用户的浏览历史。通过路由守卫，在每次路由变化时记录浏览历史。</li><li>异步组件处理：在使用异步组件时，需要在组件加载完成之前显示一些占位信息。通过路由守卫，在异步组件加载完成之前显示占位信息。</li><li>路由重定向：在用户访问某个路径时，需要将用户重定向到其他路径。通过路由守卫，可以在路由跳转之前进行重定向操作。</li></ul><table><thead><tr><th>守卫类型</th><th>使用方法</th><th>使用场景</th></tr></thead><tbody><tr><td>全局守卫</td><td>通过 <code>router.beforeEach()</code> 方法注册回调函数、<code>router.afterEach()</code> 方法注册后置守卫、<code>router.beforeResolve()</code> 方法解析异步路由组件</td><td>可以用于验证用户是否已经登录、记录用户浏览记录等全局操作</td></tr><tr><td>独享守卫</td><td>在具体的路由配置中使用 <code>beforeEnter</code> 方法注册回调函数</td><td>仅对该路由生效，可以用于验证当前用户的权限是否能够访问该路由</td></tr><tr><td>组件内守卫</td><td>在组件内部使用 <code>beforeRouteEnter</code>、<code>beforeRouteUpdate</code> 和 <code>beforeRouteLeave</code> 方法注册回调函数</td><td>可以用于在组件内部做一些路由相关的处理操作</td></tr></tbody></table><p>Vue Router 提供了全局守卫、独享守卫和组件内守卫三种路由守卫。</p><ul><li>全局守卫: 适用于全局性的路由验证和处理操作。可通过 <code>router.beforeEach()</code> 方法注册前置守卫回调函数，在路由跳转之前进行验证或者全局处理操作；可通过 <code>router.afterEach()</code> 方法注册后置守卫回调函数，在路由跳转之后进行操作；可通过 <code>router.beforeResolve()</code> 方法解析异步路由组件。</li><li>独享守卫: 适用于对某个具体路由做权限验证和特殊处理等操作。可在具体的路由配置中使用 <code>beforeEnter</code> 方法注册回调函数。</li><li>组件内守卫: 适用于在组件内部做一些路由相关的处理操作。可在组件内部使用 <code>beforeRouteEnter</code>、<code>beforeRouteUpdate</code> 和 <code>beforeRouteLeave</code> 方法注册回调函数，分别对应组件被创建之前、组件复用时和组件离开时执行的回调函数。</li></ul><p>需要注意的是，在全局守卫和独享守卫中，需要调用 <code>next()</code> 方法，否则路由会一直停留在当前页面；在组件内守卫中，可以通过回调函数中的 <code>next()</code> 方法来控制路由跳转，并且在 <code>beforeRouteLeave</code> 钩子函数中无法阻止路由跳转。</p><p>下面是各个守卫的使用示例：</p><ol><li>全局守卫</li></ol><pre class="line-numbers language-none"><code class="language-none">router.beforeEach((to, from, next) =&gt; {  // 在这里进行路由验证或者全局处理操作  next(); // 调用 next() 方法，继续路由跳转});router.afterEach((to, from) =&gt; {  // 在这里进行路由跳转之后的操作});router.beforeResolve((to, from, next) =&gt; {  // 在这里进行异步路由组件的解析  next(); // 调用 next() 方法，继续路由跳转});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>独享守卫</li></ol><pre class="line-numbers language-none"><code class="language-none">{  path: '/user/:id',  component: User,  beforeEnter: (to, from, next) =&gt; {    // 在这里进行路由验证或者特殊处理操作    next(); // 调用 next() 方法，继续路由跳转  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>组件内守卫</li></ol><pre class="line-numbers language-none"><code class="language-none">export default {  beforeRouteEnter(to, from, next) {    // 在组件还没有被渲染出来时执行，无法访问 this 实例    next();  },  beforeRouteUpdate(to, from, next) {    // 在组件复用时执行，可以访问 this 实例    next();  },  beforeRouteLeave(to, from, next) {    // 在组件离开时执行，可以访问 this 实例，但是无法阻止路由跳转    next();  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除了上述守卫之外，还有两种全局守卫。</p><ul><li><code>beforeResolve</code>: 在导航被确认之前，同时在所有组件内守卫和异步路由组件被解析之后调用。这可以用来确保在渲染组件之前，所有的异步组件都已经加载完毕。</li><li><code>onError</code>: 当导航过程中出现未捕获的错误时调用。需要注意的是，如果在一个路由守卫中抛出了一个错误，此错误将会被传递到最后一个激活的全局错误处理程序。</li></ul><h4 id="数据存储位置"><a href="#数据存储位置" class="headerlink" title="数据存储位置"></a>数据存储位置</h4><ul><li>存储在 Vuex 中：适用于需要共享变量的情况，可以让不同组件之间共享变量，并且可以在全局守卫、独享守卫和组件内守卫中进行访问。由于需要安装和配置 Vuex，因此相对麻烦一些。</li></ul><pre class="line-numbers language-none"><code class="language-none">// 首先，在 Vuex 中定义一个状态const state = {  isAuthenticated: false // 是否已经登录}...// 在需要进行变量判断的地方，通过 mutations 修改状态this.$store.commit('setAuthenticated', true);...// 在路由守卫中访问状态router.beforeEach((to, from, next) =&gt; {  if (to.meta.requiresAuth &amp;&amp; !store.state.isAuthenticated) {    next('/login');  } else {    next();  }});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>存储在当前组件数据中：适用于只需要在当前组件进行变量判断的情况，可以在组件内部直接进行访问和修改，但是无法在其他组件和路由中共享变量。</li></ul><pre class="line-numbers language-none"><code class="language-none">// 在组件的 data 选项中定义一个变量data() {  return {    isAuthenticated: false // 是否已经登录  }},...// 在需要进行变量判断的地方，修改变量的值this.isAuthenticated = true;...// 在组件内守卫中访问变量beforeRouteEnter(to, from, next) {  if (!this.isAuthenticated) {    next('/login');  } else {    next();  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>存储在路由中：适用于只需要在当前路由进行变量判断的情况，可以在独享守卫和组件内守卫中进行访问。但是会导致路由配置变得臃肿，不易于维护。</li></ul><pre class="line-numbers language-none"><code class="language-none">// 在路由配置中定义一个变量const routes = [  {    path: '/home',    component: Home,    meta: {      requiresAuth: true // 是否需要登录权限    }  },  // ...]...// 在需要进行变量判断的地方，通过 meta 属性修改变量的值this.$router.push({  path: '/home',  meta: {    requiresAuth: true,    isAuthenticated: true  }})// 在独享守卫和组件内守卫中访问变量beforeEnter(to, from, next) {  if (!to.meta.isAuthenticated) {    next('/login');  } else {    next();  }}beforeRouteEnter(to, from, next) {  if (!to.meta.isAuthenticated) {    next('/login');  } else {    next(vm =&gt; {      vm.isAuthenticated = to.meta.isAuthenticated;    });  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要注意的是，在进行路由跳转之前，需要根据变量的值决定是否进行路由跳转，并且在组件内守卫中访问变量时，需要使用 <code>next</code> 方法的回调函数来更新组件的数据。另外，将变量存储在路由中会导致路由配置变得臃肿，不易于维护，因此建议在需要共享变量的情况下使用 Vuex 状态管理中心。</p><h3 id="13-路由器的两种工作模式"><a href="#13-路由器的两种工作模式" class="headerlink" title="13.路由器的两种工作模式"></a>13.路由器的两种工作模式</h3><p>Vue Router 有两种工作模式：<code>hash</code> 模式和 <code>history</code> 模式。</p><h4 id="1-hash-模式"><a href="#1-hash-模式" class="headerlink" title="1.hash 模式"></a>1.<code>hash</code> 模式</h4><p>在 <code>hash</code> 模式中，URL 中的路径部分以 <code>#</code> 开头，并且后面紧跟着一个由路由器管理的字符串，hash值不会包含在 HTTP 请求中。例如，下面的 URL 表示访问 <code>/home</code> 路径：</p><pre class="line-numbers language-none"><code class="language-none">http://localhost:8080/#/home<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过 <code>hash</code> 模式可以实现单页应用程序（SPA）的核心功能：在网页内部跳转而不需要刷新整个页面。当用户点击链接或者触发事件时，Vue Router 会解析 URL 中的 <code>hash</code> 部分，然后根据匹配的路由规则进行组件的渲染和显示。</p><h4 id="2-history-模式"><a href="#2-history-模式" class="headerlink" title="2.history 模式"></a>2.<code>history</code> 模式</h4><p>在 <code>history</code> 模式中，URL 中的路径部分不再使用 <code>#</code> 符号，而是直接使用正常的路径。例如，下面的 URL 表示访问 <code>/home</code> 路径：</p><pre class="line-numbers language-none"><code class="language-none">http://localhost:8080/home<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过 <code>history</code> 模式可以实现更加友好的 URL，同时也可以在浏览器历史记录中记录用户浏览的页面，从而使用户可以使用“前进”、“后退”按钮进行导航。</p><p>要使用 <code>history</code> 模式，需要在创建 Vue Router 实例时配置 <code>mode: 'history'</code>，如下所示：</p><pre class="line-numbers language-none"><code class="language-none">const router = new VueRouter({  mode: 'history',  routes: [    ...  ]})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要注意的是，在使用 <code>history</code> 模式时，需要后端服务器进行配置，以保证在刷新页面时能够正确地返回对应的页面。否则，可能会出现 404 错误或者其他问题。</p><h4 id="两种模式比较"><a href="#两种模式比较" class="headerlink" title="两种模式比较"></a>两种模式比较</h4><ol><li>对于一个url来说，什么是hash值？—— #及其后面的内容就是hash值。</li><li>hash值不会包含在 HTTP 请求中，即：hash值不会带给服务器。</li><li>hash模式：<ol><li>地址中永远带着#号，不美观 。</li><li>若以后将地址通过第三方手机app分享，若app校验严格，则地址会被标记为不合法。</li><li>兼容性较好。</li></ol></li><li>history模式：<ol><li>地址干净，美观 。</li><li>兼容性和hash模式相比略差。</li><li>应用部署上线时需要后端人员支持，解决刷新页面服务端404的问题。</li></ol></li></ol><h2 id="14-vue的打包命令"><a href="#14-vue的打包命令" class="headerlink" title="14 vue的打包命令"></a>14 vue的打包命令</h2><p>使用 <code>npm</code> 工具的 <code>vue</code> 命令可以方便地创建和管理 Vue 项目。</p><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>要创建一个新的 Vue 项目，可以使用以下命令：</p><pre class="line-numbers language-none"><code class="language-none"># 全局安装 vue-clinpm install -g @vue/cli# 创建新项目vue create my-project<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的命令中，首先需要全局安装 <code>vue-cli</code> 工具。然后，在命令行中输入 <code>vue create my-project</code>，其中 <code>my-project</code> 是项目名称，会自动创建一个新的 Vue 项目，并且会提示选择一些配置项，比如 Babel、ESLint、CSS 预处理器等。</p><h3 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h3><p>创建完 Vue 项目后，可以使用以下命令来运行项目：</p><pre class="line-numbers language-none"><code class="language-none"># 进入项目目录cd my-project# 启动开发服务器npm run serve<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的命令中，<code>npm run serve</code> 用于启动开发服务器，并在浏览器中自动打开网页进行预览。每次修改代码后，开发服务器都会自动重新编译并刷新浏览器，以方便开发调试。</p><h3 id="打包项目"><a href="#打包项目" class="headerlink" title="打包项目"></a>打包项目</h3><p>在完成项目开发后，可以使用以下命令将项目打包成静态资源文件：</p><pre class="line-numbers language-none"><code class="language-none"># 打包项目npm run build<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在上面的命令中，<code>npm run build</code> 用于将项目打包成静态资源文件，并保存到 <code>dist</code> 目录中。可以将该目录下的文件上传到服务器进行部署，从而让用户访问你的应用程序。</p><p>需要注意的是，在打包项目之前，可以通过修改 <code>vue.config.js</code> 文件来进行一些配置，比如自定义构建目录、设置代理、添加插件等。</p><h2 id="15-项目上传到服务器"><a href="#15-项目上传到服务器" class="headerlink" title="15 项目上传到服务器"></a>15 项目上传到服务器</h2><p>在使用 Vue CLI 打包项目后，可以将生成的静态资源文件部署到后端服务器上。下面以 Nginx 为例，介绍如何部署 Vue 项目：</p><ol><li><p>将打包生成的 <code>dist</code> 目录中的所有文件上传到服务器上。</p></li><li><p>安装 Nginx，并创建一个新的 Nginx 配置文件 <code>/etc/nginx/sites-available/my-project</code>，其中 <code>my-project</code> 是你的项目名称。可以使用以下命令创建该文件：</p><pre class="line-numbers language-none"><code class="language-none">sudo nano /etc/nginx/sites-available/my-project<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在该配置文件中添加以下内容：</p><pre class="line-numbers language-none"><code class="language-none">server {    listen 80;    server_name my-project.com; # 修改为你的域名或者 IP 地址    root /var/www/my-project; # 修改为你的项目目录    index index.html;    location / {        try_files $uri $uri/ /index.html;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的配置中，<code>server_name</code> 表示你的项目对应的域名或者 IP 地址。<code>root</code> 表示你的项目所在的目录，如果需要使用别名或者子目录，可以修改为相应的路径。<code>location</code> 表示请求的 URL 对应的本地文件路径。由于 Vue Router 是基于 HTML5 History API 实现的，因此需要将所有请求都指向 <code>index.html</code> 文件，从而保证能够正确地渲染页面。</p></li><li><p>创建符号链接 <code>/etc/nginx/sites-enabled/my-project</code>，并重启 Nginx：</p><pre class="line-numbers language-none"><code class="language-none">sudo ln -s /etc/nginx/sites-available/my-project /etc/nginx/sites-enabled/sudo systemctl restart nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在上面的命令中，<code>ln -s</code> 表示创建符号链接，将 <code>sites-available</code> 目录下的配置文件链接到 <code>sites-enabled</code> 目录中。<code>systemctl restart nginx</code> 用于重启 Nginx 服务器，以使新的配置生效。</p></li><li><p>最后，在浏览器中输入你的域名或者 IP 地址访问应用程序即可。如果一切正常，应该能够看到 Vue 应用程序的页面。</p></li></ol><p>需要注意的是，在部署 Vue 项目时，需要确保后端服务器正确配置了跨域请求，并且在进行 API 请求时需要将请求路径设置为相对路径，比如 <code>/api/user</code>。同时，要确保静态资源可以被访问到，并且需要进行安全性、性能等方面的优化和调整。</p><h2 id="16-Vue-UI-组件库"><a href="#16-Vue-UI-组件库" class="headerlink" title="16 Vue UI 组件库"></a>16 Vue UI 组件库</h2><h3 id="1-移动端常用-UI-组件库"><a href="#1-移动端常用-UI-组件库" class="headerlink" title="1.移动端常用 UI 组件库"></a>1.移动端常用 UI 组件库</h3><p>Vant <a class="link" href="https://youzan.github.io/vant">https://youzan.github.io/vant<i class="fas fa-external-link-alt"></i></a></p><p>Cube UI <a class="link" href="https://didi.github.io/cube-ui">https://didi.github.io/cube-ui<i class="fas fa-external-link-alt"></i></a></p><p>Mint UI <a class="link" href="http://mint-ui.github.io/">http://mint-ui.github.io<i class="fas fa-external-link-alt"></i></a></p><h3 id="2-PC-端常用-UI-组件库"><a href="#2-PC-端常用-UI-组件库" class="headerlink" title="2. PC 端常用 UI 组件库"></a>2. PC 端常用 UI 组件库</h3><p>Element UI <a class="link" href="https://element.eleme.cn/">https://element.eleme.cn<i class="fas fa-external-link-alt"></i></a></p><p>IView UI <a class="link" href="https://www.iviewui.com/">https://www.iviewui.com<i class="fas fa-external-link-alt"></i></a></p>]]></content>
      
      
      <categories>
          
          <category> Vue2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shiro小计</title>
      <link href="/2023/06/01/Shrio%E5%B0%8F%E8%AE%A1/"/>
      <url>/2023/06/01/Shrio%E5%B0%8F%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="Shiro"><a href="#Shiro" class="headerlink" title="Shiro"></a>Shiro</h1><p><strong>shiro暂不支持springboot 3.x</strong></p><h2 id="认证过程"><a href="#认证过程" class="headerlink" title="认证过程"></a>认证过程</h2><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/img.png"><br>流程如下：</p><ol><li>首先调用 Subject.login(token) 进行登录，其会自动委托给 Security Manager，调用之前必须通过 SecurityUtils.setSecurityManager() 设置；</li><li>SecurityManager 负责真正的身份验证逻辑；它会委托给 Authenticator 进行身份验证；</li><li>Authenticator 才是真正的身份验证者，Shiro API 中核心的身份认证入口点，此处可以自定义插入自己的实现；</li><li>Authenticator 可能会委托给相应的 AuthenticationStrategy 进行多 Realm 身份验证，默认 ModularRealmAuthenticator 会调用 AuthenticationStrategy 进行多 Realm 身份验证；</li><li>Authenticator 会把相应的 token 传入 Realm，从 Realm 获取身份验证信息，如果没有返回 / 抛出异常表示身份验证失败了。此处可以配置多个 Realm，将按照相应的顺序及策略进行访问。</li></ol><h2 id="授权过程"><a href="#授权过程" class="headerlink" title="授权过程"></a>授权过程</h2><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/v2-66b6458df10fd05db4aea732b0199080_1440w.webp"></p><p>使用自定义realm</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRealm</span> <span class="token keyword">extends</span> <span class="token class-name">AuthorizingRealm</span><span class="token punctuation">{</span>    <span class="token comment">/**     * 模拟数据库数据     */</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> userMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">{</span>        userMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"wmyskxz"</span><span class="token punctuation">,</span> <span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"myRealm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置自定义Realm的名称，取什么无所谓..</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 授权     *     * @param principalCollection     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">AuthorizationInfo</span> <span class="token function">doGetAuthorizationInfo</span><span class="token punctuation">(</span><span class="token class-name">PrincipalCollection</span> principalCollection<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> userName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> principalCollection<span class="token punctuation">.</span><span class="token function">getPrimaryPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 从数据库获取角色和权限数据</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> roles <span class="token operator">=</span> <span class="token function">getRolesByUserName</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> permissions <span class="token operator">=</span> <span class="token function">getPermissionsByUserName</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SimpleAuthorizationInfo</span> simpleAuthorizationInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAuthorizationInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        simpleAuthorizationInfo<span class="token punctuation">.</span><span class="token function">setStringPermissions</span><span class="token punctuation">(</span>permissions<span class="token punctuation">)</span><span class="token punctuation">;</span>        simpleAuthorizationInfo<span class="token punctuation">.</span><span class="token function">setRoles</span><span class="token punctuation">(</span>roles<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> simpleAuthorizationInfo<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 模拟从数据库中获取权限数据     *     * @param userName     * @return     */</span>    <span class="token keyword">private</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getPermissionsByUserName</span><span class="token punctuation">(</span><span class="token class-name">String</span> userName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> permissions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        permissions<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"user:delete"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        permissions<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"user:add"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> permissions<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 模拟从数据库中获取角色数据     *     * @param userName     * @return     */</span>    <span class="token keyword">private</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getRolesByUserName</span><span class="token punctuation">(</span><span class="token class-name">String</span> userName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> roles <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        roles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        roles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> roles<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 认证     *     * @param authenticationToken 主体传过来的认证信息     * @return     * @throws AuthenticationException     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">AuthenticationInfo</span> <span class="token function">doGetAuthenticationInfo</span><span class="token punctuation">(</span><span class="token class-name">AuthenticationToken</span> authenticationToken<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">AuthenticationException</span> <span class="token punctuation">{</span>        <span class="token comment">// 1.从主体传过来的认证信息中，获得用户名</span>        <span class="token class-name">String</span> userName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> authenticationToken<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2.通过用户名到数据库中获取凭证</span>        <span class="token class-name">String</span> password <span class="token operator">=</span> <span class="token function">getPasswordByUserName</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>password <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">SimpleAuthenticationInfo</span> authenticationInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAuthenticationInfo</span><span class="token punctuation">(</span><span class="token string">"wmyskxz"</span><span class="token punctuation">,</span> password<span class="token punctuation">,</span> <span class="token string">"myRealm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> authenticationInfo<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 模拟从数据库取凭证的过程     *     * @param userName     * @return     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getPasswordByUserName</span><span class="token punctuation">(</span><span class="token class-name">String</span> userName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">MyRealm</span> myRealm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyRealm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 实现自己的 Realm 实例</span>    <span class="token comment">// 1.构建SecurityManager环境</span>    <span class="token class-name">DefaultSecurityManager</span> defaultSecurityManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    defaultSecurityManager<span class="token punctuation">.</span><span class="token function">setRealm</span><span class="token punctuation">(</span>myRealm<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2.主体提交认证请求</span>    <span class="token class-name">SecurityUtils</span><span class="token punctuation">.</span><span class="token function">setSecurityManager</span><span class="token punctuation">(</span>defaultSecurityManager<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置SecurityManager环境</span>    <span class="token class-name">Subject</span> subject <span class="token operator">=</span> <span class="token class-name">SecurityUtils</span><span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取当前主体</span>    <span class="token class-name">UsernamePasswordToken</span> token <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordToken</span><span class="token punctuation">(</span><span class="token string">"wmyskxz"</span><span class="token punctuation">,</span> <span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    subject<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 登录</span>    <span class="token comment">// subject.isAuthenticated()方法返回一个boolean值,用于判断用户是否认证成功</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"isAuthenticated:"</span> <span class="token operator">+</span> subject<span class="token punctuation">.</span><span class="token function">isAuthenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出true</span>    <span class="token comment">// 判断subject是否具有admin和user两个角色权限,如没有则会报错</span>    subject<span class="token punctuation">.</span><span class="token function">checkRoles</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span> <span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        subject.checkRole("xxx"); // 报错</span>    <span class="token comment">// 判断subject是否具有user:add权限</span>    subject<span class="token punctuation">.</span><span class="token function">checkPermission</span><span class="token punctuation">(</span><span class="token string">"user:add"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Shiro加密"><a href="#Shiro加密" class="headerlink" title="Shiro加密"></a>Shiro加密</h2><p>数据库中的密码一般不使用明文存储，所以我们使用非对称加密，人话就是不可逆的加密方式，md5就是其中一种，123456 MD5加密后是<strong>e10adc3949ba59abbe56e057f20f883e</strong>虽然无法从这段字符串反加密得到123456但是可以将123456以同样的加密方式得到这段字符串，就得到了密码</p><p><strong>解决</strong></p><p>既然相同的密码 md5 一样，那么我们就让我们的原始密码再<strong>加一个随机数</strong>，然后再进行 md5 加密，这个随机数就是我们说的<strong>盐(salt)</strong></p><p><strong>Shiro框架加密使用</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> password <span class="token operator">=</span> <span class="token string">"123456"</span><span class="token punctuation">;</span><span class="token class-name">String</span> salt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecureRandomNumberGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> times <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment">// 加密次数：2</span><span class="token class-name">String</span> alogrithmName <span class="token operator">=</span> <span class="token string">"md5"</span><span class="token punctuation">;</span>   <span class="token comment">// 加密算法</span><span class="token class-name">String</span> encodePassword <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleHash</span><span class="token punctuation">(</span>alogrithmName<span class="token punctuation">,</span> password<span class="token punctuation">,</span> salt<span class="token punctuation">,</span> times<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"原始密码是 %s , 盐是： %s, 运算次数是： %d, 运算出来的密文是：%s "</span><span class="token punctuation">,</span>password<span class="token punctuation">,</span>salt<span class="token punctuation">,</span>times<span class="token punctuation">,</span>encodePassword<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>输出</strong></p><pre class="line-numbers language-text" data-language="text"><code class="language-text">原始密码是 123456 , 盐是： f5GQZsuWjnL9z585JjLrbQ==, 运算次数是： 2, 运算出来的密文是：55fee80f73537cefd6b3c9a920993c25 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Shiro三大核心组件"><a href="#Shiro三大核心组件" class="headerlink" title="Shiro三大核心组件"></a>Shiro三大核心组件</h2><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/image-20230531200232621.png"></p><p>即<code>Subject</code>、<code>SecurityManager</code> 和 <code>Realm</code></p><ol><li>Subject: 为<code>认证主体</code>。应用代码直接交互的对象是Subject,Subject代表了当前的用户。包含<code>Principals</code>和<code>Credentials</code>两个信息。</li><li>SecurityManager:为<code>安全管理员</code>。是Shiro架构的核心。与Subject的所有交互都会委托给SecurityManager, Subject相当于是一个门面，而SecurityManager才是真正的执行者。它负责与Shiro 的其他组件进行交互。</li><li>Realm：是<code>一个域</code>。充当了Shiro与应用安全数据间的“桥梁”。Shiro从Realm中获取安全数据（如用户、角色、权限），就是说SecurityManager要验证用户身份，那么它需要从Realm中获取相应的用户进行比较，来确定用户的身份是否合法；也需要从Realm得到用户相应的角色、权限，进行验证用户的操作是否能过进行，可以把Realm看成DataSource，即安全数据源。</li></ol><h2 id="Shiro架构"><a href="#Shiro架构" class="headerlink" title="Shiro架构"></a>Shiro架构</h2><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/image-20230531155008026.png"></p><ul><li><code>Authentication</code>: 身份认证、登录，验证用户是不是拥有相应的身份;</li><li><code>Authorization</code>:授权,即权限验证，验证某个已认证的用户是否拥有某个权限，即判断用户能否进行什么操作，如:验证某个用户是否拥有某个角色，或者细粒度的验证某个用户对某个资源是否具有某个权限!</li><li><code>Session Manager</code>: 会话管理，即用户登录后就是第-次会话，在没有退出之前，它的所有信息都在会话中;会话可以是普通的JavaSE环境，也可以是Web环境;</li><li><code>Cryptography</code>: 加密,保护数据的安全性，如密码加密存储到数据库中，而不是明文存储;</li><li><code>Web Support</code>: Web支持，可以非常容易的集成到Web环境;</li><li><code>Caching</code>: 缓存，比如用户登录后，其用户信息，拥有的角色、权限不必每次去查,这样可以提高效率</li><li><code>Concurrency</code>: Shiro支持多线程应用的并发验证，即，如在一个线程中开启另一个线程,能把权限自动的传播过去</li><li><code>Testing</code>:提供测试支持;</li><li><code>RunAs</code>:允许一个用户假装为另-一个用户(如果他们允许)的身份进行访问;</li><li><code>Remember Me</code>:记住我，这个是非常常见的功能，即一-次登录后， 下次再来的话不用登录了</li></ul><p><strong>内部架构</strong></p><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/8991ce3120e94c9baccc4aae76666875tplv-k3u1fbpfcp-zoom-in-crop-mark4536000.webp"></p><ul><li><code>Subject</code>: 任何可以与应用交互的用户;</li><li><code>Security Manager</code>:相当于SpringMVC中的<code>DispatcherSerlet</code>; 是Shiro的<code>心脏</code>， 所有具体的交互都通过<code>Security Manager</code>进行控制，它管理者所有的Subject, 且负责进行认证,授权，会话，及缓存的管理。</li><li><code>Authenticator</code>:负责<code>Subject</code>认证， 是-一个扩展点，可以自定义实现;可以使用<code>认证策略</code>(Authentication Strategy)，即什么情况下算用户认证通过了;</li><li><code>Authorizer</code>:授权器，即访问控制器，用来决定主体是否有权限进行相应的操作;即控制着用户能访问应用中 的那些功能;</li><li><code>Realm</code>: 可以有-一个或者多个的realm, 可以认为是安全实体数据源，即用于获取安全实体的，可以用JDBC实现，也可以是内存实现等等，由用户提供;所以- -般在应用中都需要实现自己的realm</li><li><code>SessionManager</code>:管理Session生 命周期的组件,而Shiro并不仅仅可以用在Web环境，也可以用在普通的JavaSE环境中</li><li><code>CacheManager</code>: 缓存控制器，来管理如用户，角色，权限等缓存的;因为这些数据基本上很少改变,放到缓存中后可以提高访问的性能;</li><li><code>Cryptography</code>:密码模块，Shiro 提高了一些常见的加密组件用于密码加密， 解密等</li></ul>]]></content>
      
      
      <categories>
          
          <category> java后端 </category>
          
          <category> 安全框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shiro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动互联网笔记</title>
      <link href="/2023/05/21/%E7%A7%BB%E5%8A%A8%E4%BA%92%E8%81%94%E7%BD%91%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/05/21/%E7%A7%BB%E5%8A%A8%E4%BA%92%E8%81%94%E7%BD%91%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="移动互联网技术复习重点："><a href="#移动互联网技术复习重点：" class="headerlink" title="移动互联网技术复习重点："></a>移动互联网技术复习重点：</h2><h3 id="代理ARP运行的原理"><a href="#代理ARP运行的原理" class="headerlink" title="代理ARP运行的原理"></a>代理ARP运行的原理</h3><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/image-20230515214916022.png" style="zoom:67%;"><h3 id="PVALN原理"><a href="#PVALN原理" class="headerlink" title="PVALN原理"></a>PVALN原理</h3><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/PVLAN.png" style="zoom: 67%;"><ul><li>团体vlan的终端相互之间可以互相ping通，隔离vlan的终端之间不能相互ping通</li><li>但他们都可以ping通server</li></ul><h3 id="DHCP服务器中继端口的判断"><a href="#DHCP服务器中继端口的判断" class="headerlink" title="DHCP服务器中继端口的判断"></a>DHCP服务器中继端口的判断</h3><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/DHCP.png" style="zoom:67%;"><ul><li>PC1与DHCP服务器不在同一个广播域，所以PC1收不到DHCP广播包，获取不到IP所以要在PC1所在路由器接口配置DHCP中继</li></ul><h3 id="多生成树原理。"><a href="#多生成树原理。" class="headerlink" title="多生成树原理。"></a>多生成树原理。</h3><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/clip_image002-1685249849351-10-1685249853188-12.jpg"></p><p>多生成树（Multiple Spanning Tree，MST）是一种网络拓扑结构，可以用于在交换机网络中实现冗余路径，提高网络的可靠性和冗余性。</p><p>在传统的生成树算法中，每个交换机只能有一个生成树根节点，即只有一条活动路径。但是，某些网络拓扑结构可能需要多个路径，以便在链路故障或拥塞时提供备用路径。这时就需要使用多生成树来实现多个生成树根节点。</p><p>多生成树原理可以理解为，当一个交换机接收到多个Spanning Tree Protocol（STP）的根节点时，它将会选择一个根节点，并使用相应的生成树来建立活动路径。如果某个链路出现故障，则交换机可以切换到备用路径继续数据传输。</p><p>为了避免在多个生成树之间出现环路，交换机通常会使用虚拟局域网（VLAN）标识符来标识生成树。每个VLAN都可以有一个独立的生成树，从而实现网络冗余和可靠性。</p><p>需要注意的是，多生成树可以在一些情况下增加网络复杂度，并且对于小型网络可能并不必要。因此，在考虑是否使用多生成树时，应该根据实际需求进行评估和选择。</p><pre class="line-numbers language-none"><code class="language-none">region1vlan 2 to instance 2vlan 3 to instance 3other vlan to ist 一个instance就是一个生成树，ist也是生成树<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="链路聚合"><a href="#链路聚合" class="headerlink" title="链路聚合"></a>链路聚合</h3><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/image-20230521132440447.png"></p><p>圆圈 圈住两条线就是使用了链路聚合技术</p><p><strong>链路聚合优点</strong>：冗余备份 增加带宽</p><h3 id="VRRP-虚拟路由冗余协议-原理"><a href="#VRRP-虚拟路由冗余协议-原理" class="headerlink" title="VRRP(虚拟路由冗余协议)原理"></a>VRRP(虚拟路由冗余协议)原理</h3><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/image-20230515223637732.png" style="zoom: 33%;"><p><strong>主备路由器的选举规则</strong>：先看优先级，优先级大的是主路由器，如果优先级相同，就看路由器的ip地址，IP地址大的是主路由器</p><ul><li><p>在一个VRRP组内的多个路由器接口共用一个虚拟IP地址，该地址被作为局域网内所有主机的缺省网关地址。</p></li><li><p>VRRP决定哪个路由器是Master，Master路由器负责接收发送至用户网关（也就是发向上文提动的虚拟IP地址）的数据包并进行转发，以及响应PC对于其网关的ARP请求。</p></li><li><p>backup路由会监听Master路由的状态，随时准备替换</p></li></ul><h3 id="网络边界路由器可能应用的技术有哪些"><a href="#网络边界路由器可能应用的技术有哪些" class="headerlink" title="网络边界路由器可能应用的技术有哪些"></a>网络边界路由器可能应用的技术有哪些</h3><ul><li>静态路由 <ul><li>静态路由是一种手工配置的路由，由管理员手动输入路由表信息。它是最简单的路由方式，一般用于少量静态网络环境，不适合大规模网络。</li></ul></li><li>动态路由<ul><li>​动态路由是一种自适应路由，路由器通过交互协议动态优化路由表，以保证网络路由的有效性和可靠性。常用的动态路由协议有OSPF、BGP和RIP等。</li></ul></li><li>NAT<ul><li>NAT是一种将私有IP地址映射为公共IP地址的技术。在网络边界路由器上使用NAT可以将本地网络的私有IP地址转换为公共IP地址，在公共网络中通信。</li></ul></li><li>VPN<ul><li>VPN是一种通过公共网络建立私密通信的安全机制。在网络边界路由器上使用VPN可以建立安全的网络通信通道，使得用户在公共网络中的通信更加安全可靠。</li></ul></li><li>ACL（访问控制列表）</li></ul><h3 id="ACL访问控制列表标准和扩展访问控制列表原理"><a href="#ACL访问控制列表标准和扩展访问控制列表原理" class="headerlink" title="ACL访问控制列表标准和扩展访问控制列表原理"></a>ACL访问控制列表标准和扩展访问控制列表原理</h3><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/image-20230521132702434-1684647252135-6.png"></p><ul><li><p><strong>ACL分为标准ACL，扩展ACL</strong></p><ul><li><p>标准ACL：是根据源IP来控制报文的（配置在离目的近的路由器接口）</p></li><li><p>扩展ACL：是更具源IP和目的IP来控制报文的（配置在离源近的路由器接口）</p></li></ul><p>例：PC1访问PC3的情况下，如果让你用标准ACL进行控制，可以在R3的Fa0/1配置，因为根据规则，离目的近的路由器接口，离PC3最近的路由器是R3，最近的接口就是Fa0/1</p><p>PC1访问PC3的情况下，如果让你用扩展ACL进行控制，可以在R1的Fa0/1配置，因为根据规则，离源近的路由器接口，离PC1最近的路由器是R1，最近的接口就是Fa0/1</p></li><li><p>ACL是一种路由器配置脚本，它根据从数据包报头中发现的条件来控制路由器应该允许还是拒绝数据包通过. </p><ul><li>限制网络流量以提高网络性能.</li><li>提供流量控制。ACL 可以限制路由更新的传输. </li><li>提供基本的网络访问安全性。ACL 可以允许一台主机访问部分网络，同时阻止其它主机访问同一区域。 </li><li>决定在路由器接口上转发或阻止哪些类型的流量。</li><li>控制客户端可以访问网络中的哪些区域。  </li><li>屏蔽主机以允许或拒绝对网络服务的访问。ACL 可以允许或拒绝用户访问特定文件类型，例如 FTP 或 HTTP.</li></ul></li></ul><h3 id="解释路由表的结构"><a href="#解释路由表的结构" class="headerlink" title="解释路由表的结构"></a>解释路由表的结构</h3><p><strong>路由表包含以下条目</strong> </p><ol><li><p>直连网络</p></li><li><p>静态路由</p></li><li><p>动态路由协议</p></li></ol><p>路由表是在路由器（Router）中维护的一个重要的数据结构，它用于记录路由器可达的网络和子网以及它们之间的关联信息。路由表也被称为转发表（Forwarding Table），它可以被路由器用来决策当前收到数据报时应该转发到哪个出接口。</p><p><strong>路由表的记录通常包括以下信息：</strong></p><ol><li>目的网络地址（Destination Network Address）：表示数据报要到达的目的网络的 IP 地址，用二进制形式表示。</li><li>子网掩码（Subnet Mask）：表示该网络的地址范围。</li><li>下一跳地址（Next Hop Address）：指向下一个路由器的出接口的 IP 地址。</li><li>出接口（Outgoing Interface）：表示要从哪个端口转发出去。</li></ol><p><strong>最长匹配</strong></p><p><strong><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/clip_image002.jpg"></strong></p><ul><li>路由前面的字母 <strong>C-是直连路由</strong> <strong>R-是RIP学到的路由</strong></li><li><strong>路由中有[120/1]，其中120的含义是管理距离，1的含义是开销</strong></li></ul><p><strong>父类路由和子路由（无类路由）</strong></p><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/image-20230521132954276-1684647263335-10.png"></p><ol><li><p>没有缩进的是一级路由</p></li><li><p>有缩进的是二级路由</p></li><li><p>有出口的是最终路由，一行中有对应的接口，就是能够转发的路由，就是最终路由</p></li></ol><p>  <img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/image-20230521133658025.png"></p><ol><li><p>一级路由：没有缩进的是一级路由==&gt;172.16.0.0/24 is subnetted,3 subnets &amp;  R 192.168.1.0 /24 [120/1] via 172.16.2.2 00:00:25,Serial0/0/0 </p></li><li><p>父路由：后有子路由的一级路由 ==&gt;172.16.0.0/24 is subnetted,3 subnets</p></li><li><p>子路由：带缩进的就是子路由==&gt;C 172.16.2.0 is directly connected,Serial0/0/0</p></li></ol><p><strong>思科配置命令</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">enable</span>                           // 进入特权用户模式configure terminal               // 进入全局配置模式<span class="token function">ip</span> route <span class="token operator">&lt;</span>目的网段<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>子网掩码<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>下一跳地址<span class="token operator">&gt;</span>  // 添加路由表记录no <span class="token function">ip</span> route <span class="token operator">&lt;</span>目的网段<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>子网掩码<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>下一跳地址<span class="token operator">&gt;</span> // 删除路由表记录end                              // 退出配置模式show <span class="token function">ip</span> route                    // 查看路由表<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例如，添加一条默认路由，将所有未知目的地址转发到网关 192.168.0.1：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ip</span> route <span class="token number">0.0</span>.0.0 <span class="token number">0.0</span>.0.0 <span class="token number">192.168</span>.0.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="OSPF（开放式最短路径优先）多区域路由表，理解特殊区域的原理"><a href="#OSPF（开放式最短路径优先）多区域路由表，理解特殊区域的原理" class="headerlink" title="OSPF（开放式最短路径优先）多区域路由表，理解特殊区域的原理"></a>OSPF（开放式最短路径优先）多区域路由表，理解特殊区域的原理</h3><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/image-20230521134553253.png"></p><ol><li><p>区域的路由器不超过255</p></li><li><p>所有区域都要连接到area 0，通信均要通过area 0</p></li><li><p>每个区域都运行一个OSPF</p></li><li><p>特殊区域不一定有</p></li><li><p>特殊区域的优点</p><ol><li>兼容老路由器</li><li>减少区域内的LSA数量</li><li>缩小了网络故障影响的范围</li></ol></li><li><p>非特殊区域（标准区域或主干区域）含有的LSA种类，LSA1,LSA2，LSA 3 ，LSA 4，LSA 5</p></li><li><p>Stub区域含有的LSA种类：LSA 1,LSA 2，LSA 3，3类0.0.0.0/0</p></li><li><p>完全stub区域(Totally stub区域)含有的LSA种类：LSA 1,LSA 2,3类0.0.0.0/0</p></li><li><p>NSSA区域含有的LSA种类：LSA 1,LSA 2，LSA 3，LSA 7</p></li><li><p>完全NSSA区域(Totally NSSA区域)含有的LSA种类：LSA 1，LSA2，LSA 7，3类0.0.0.0/0</p></li></ol><p><strong>通过路由表判断是否用了OSPF协议</strong></p><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/image-20230521143423227.png"></p><ul><li><strong>前面是O，就是代表的OSPF的路由来源</strong></li></ul><p><strong>看路由表，判定是否使用了多区域</strong></p><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/image-20230521143520244.png"></p><ul><li><strong>看到O开头，表路由来源为OSPF，后面紧跟着IA，意味着这个路由是三类LSA，而三类LSA只存在多区域中进行通信，即看到O IA就使用了多区域</strong></li></ul><p><strong>看路由表，如果问你有无特殊区域</strong></p><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/image-20230521143719743.png"></p><ul><li><strong>O N2就可以知道有特殊区域，且为NSSS特殊区域</strong></li></ul><p><strong>看路由表，问你有无路由重注入或注入或外部路由</strong></p><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/image-20230521143825639.png"></p><ul><li><strong>O E2（或O E1）就是有路由重注入或注入或外部路由</strong></li></ul><p><strong>在 OSPF 中，有三种特殊的区域类型：backbone、stub、totally stubby。</strong></p><ol><li>Backbone（骨干区域）：所有的区域必须通过骨干区域来相互通信。骨干区域是 OSPF 区域的必要组成部分，没有骨干区域则不构成 OSPF 区域，因为所有的 OSPF 区域都必须和骨干区域相连通，而骨干区域必须是一个连通的区域。</li><li>Stub（禁止传递）：在这种区域里，当出现到一个未在该区域内的目的网络或者主机的路由时，ASBR 会把该路由替换成一个缺省路由。通常该缺省路由会指向一个在同一自治系统内的更好的路径。另外，该区域的路由表中不包含外部路由，只包含该区域和 AS 内部的路由。</li><li>Totally stubby（完全禁止传递）：在这种区域里，除了与骨干区相连的路由器之外，其他的路由器不会学习到外部路由，并只有一条默认路由指向骨干区域。</li></ol><p>特殊区域的原理在于通过简化路由表和减少路由器间的 LSDB（Link State Database）大小，提高 OSPF 集成的效率和网络的可靠性。而 Stub 和 Totally stubby 区域还可以增加的网络的安全性，减少了从区域外进入的风险。</p><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/image-20230520210658035-1684682016294-4.png"></p><p><strong>多区域OSPF配置 – 标准区域配置</strong></p><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/image-20230520212420097.png"></p><ol><li><p>RT3(config-router)# <strong>network 192.168.1.0 0.0.0.255 area 1</strong></p></li><li><p>RT3(config-router)# <strong>network 192.168.2.0 0.0.0.255 area 0</strong></p></li><li><p>RT3(config-router)# <strong>network 3.3.3.0 0.0.0.255 area 1</strong></p></li></ol><h3 id="理解RIP和OSPF路由协议选择路径的区别"><a href="#理解RIP和OSPF路由协议选择路径的区别" class="headerlink" title="理解RIP和OSPF路由协议选择路径的区别"></a>理解RIP和OSPF路由协议选择路径的区别</h3><p>RIP（Routing Information Protocol）和 OSPF（Open Shortest Path First）是两种常见的路由协议，两者在选择路径的方式上有明显的区别。</p><ul><li>RIP：在 RIP 中，路由器会周期性地交换路由信息，并根据每条路径的距离选择最短路径。RIP 中的距离度量单位是跳数（hop count），即数据报从源站经过的路由器数。RIP 默认最大跳数为 15，超过 15 跳的路径会被认为是不可达。因此，RIP 更适合用于小型、广播型网络，而不太适合用于复杂、大型、分布型网络。</li><li>OSPF：在 OSPF 中，路由器通过交换链路状态数据库（LSDB）中的链路状态通告（LSA）来了解网络拓扑。OSPF 会计算每个路径的开销，也可以通过配置权值来控制路径的优先级，最终选择的路径是权值最小的路径。OSPF 中的开销度量单位是带宽，而且可以支持多种策略，可以根据网络拓扑中的多种因素来选择路径。因此，OSPF 更适合用于大型、分布型网络。</li></ul><p>综上所述，RIP 和 OSPF 在选择路径的方式上有明显的区别。RIP 以跳数为开销度量单位，适合小型广播型网络；而 OSPF 以带宽为开销度量单位，适合大型复杂分布型网络。</p><h3 id="理解ISIS路由协议及路由渗透"><a href="#理解ISIS路由协议及路由渗透" class="headerlink" title="理解ISIS路由协议及路由渗透"></a>理解ISIS路由协议及路由渗透</h3><p><strong>ISIS中的NET地址</strong></p><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/image-20230521143924531.png"></p><p>​ISIS路由协议是帮助网络中的路由器找到最佳路径的一个协议，主要应用于大型企业网络和互联网服务提供商的核心路由器上。它可以让路由器之间相互通信，发现彼此的位置，并选择最佳路径进行数据传输。ISIS协议具有基于连接状态的路由选择算法。简单来说，它能够帮助网络中的路由器找到路径更短、速度更快、更可靠的连接方式，优化网络性能和数据传输效率</p><p><strong>NET area id.系统id.00</strong> (00为固定值)</p><ol><li>ISIS路由协议和OSPF路由协议类似，是一个内部网关协议（IGP），用于在同一网络内部选择最佳路径进行数据转发。ISIS路由协议比较灵活，支持多种标识，包括网络地址、系统标识符和端口号等，还可以与其他路由协议进行互操作。</li><li>而ISIS路由渗透是指两个自治系统之间通过ISIS路由协议互相学习并转发对方的路由信息，以实现异构网络之间的连接和信息交换。</li></ol><h3 id="区域间路由"><a href="#区域间路由" class="headerlink" title="区域间路由"></a>区域间路由</h3><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/image-20230521145348414.png"></p><ol><li>L1路由器只有直连路由和默认路由</li><li>L1/2路由器是拥有整个图的路由</li></ol><h3 id="RIP协议和OSPF下不同的路径的选择"><a href="#RIP协议和OSPF下不同的路径的选择" class="headerlink" title="RIP协议和OSPF下不同的路径的选择"></a>RIP协议和OSPF下不同的路径的选择</h3><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/image-20230521145548906.png"></p><ol><li>运行RIP的情况下，RIP的规则就是转发数据经过的路由器最少，通信主机之间的路由器最少，上面图选择的路径显然是PC1-&gt;R2-&gt;R3-&gt;PC2（最短跳数优先）</li><li>运行OSPF的情况下，pc1和PC2通信经过那条路径，你就去图中找，图中肯定会出现 XX M或者其他，什么链路不需要管，找到一条路这些数字加起来最大的一条路径就可以，上面图选择的路径显然是PC1-&gt;R2-&gt;R1-&gt;R3-&gt;PC2,因为如果走下面的路（不经过R1），数字100，PC1-&gt;R2-&gt;R1-&gt;R3-&gt;PC2就是100+100，最大，所以优先（最大带宽优先）</li></ol><h3 id="理解单区域OSPF路由协议配置方式"><a href="#理解单区域OSPF路由协议配置方式" class="headerlink" title="理解单区域OSPF路由协议配置方式"></a>理解单区域OSPF路由协议配置方式</h3><p>好的，以下是一个在思科设备上配置单区域OSPF路由协议的示例：</p><p>假设我们有两台设备A和B，他们之间通过一个接口连接，IP地址分别为192.168.1.1和192.168.1.2，子网掩码为255.255.255.0。要在它们之间配置单区域OSPF路由协议，步骤如下：</p><ol><li>在A和B的接口上开启OSPF协议</li></ol><pre class="line-numbers language-none"><code class="language-none">A(config)# interface GigabitEthernet0/0A(config-if)# ip address 192.168.1.1 255.255.255.0A(config-if)# ip ospf network broadcastA(config-if)# no shutdownB(config)# interface GigabitEthernet0/0B(config-if)# ip address 192.168.1.2 255.255.255.0B(config-if)# ip ospf network broadcastB(config-if)# no shutdown<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，GigabitEthernet0/0是连接A和B的接口类型和编号。</p><ol start="2"><li>在 OSPF 进程中配置OSPF参数</li></ol><pre class="line-numbers language-none"><code class="language-none">A(config)# router ospf 1B(config)# router ospf 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>此处我们指定了进程号为1，A和B的进程号需要保持一致。</p><ol start="3"><li>配置Router ID</li></ol><pre class="line-numbers language-none"><code class="language-none">A(config-router)# router-id 1.1.1.1B(config-router)# router-id 2.2.2.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在本示例中，A设备的ID号为1.1.1.1，B设备的ID号为2.2.2.2。请注意，这两个号必须唯一，建议在使用IP地址作为ID时，确保地址唯一以避免冲突。</p><ol start="4"><li>配置区域</li></ol><pre class="line-numbers language-none"><code class="language-none">A(config-router)# network 192.168.1.0 0.0.0.255 area 0B(config-router)# network 192.168.1.0 0.0.0.255 area 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Router OSPF <span class="token number">100</span><span class="token punctuation">(</span>相当于启动OSPF，进程号100<span class="token punctuation">)</span>（Router <span class="token function">id</span> X.X.X.X（X不超过255就行，可以1.1.1.1））    network <span class="token number">192.168</span>.2.0 <span class="token number">0.0</span>.0.255 area <span class="token number">0</span>    network <span class="token number">192.168</span>.3.0 <span class="token number">0.0</span>.0.255 area <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="理解IPV6地址的类型"><a href="#理解IPV6地址的类型" class="headerlink" title="理解IPV6地址的类型"></a>理解IPV6地址的类型</h3><p>以下是一些IPv6地址类型的示例：</p><pre class="line-numbers language-none"><code class="language-none">1. 单播地址：- 全球单播地址：2001:0db8:85a3:0000:0000:8a2e:0370:7334- 唯一本地单播地址：fc00:0000:0000:0000:8def:1234:5678:90122. 组播地址：- 全球组播地址：ff0e:0:0:0:0:0:fdd4:90c4- 唯一本地组播地址：ff01:0:0:0:0:0:0:13. 任播地址：- 全球任播地址：2001:0db8:85a3::/48- 唯一本地任播地址：fe80:0:0:0:aa:bb:cc:dd/644. 回环地址：- ::15. 零地址：- ::6. 文本地址：- 域名服务器：2001:db8::53- 网络时钟：2001:db8::101:cd00:99:ee00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="广播域的范围和VLAN的划分"><a href="#广播域的范围和VLAN的划分" class="headerlink" title="广播域的范围和VLAN的划分"></a>广播域的范围和VLAN的划分</h3><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/image-20230521215736892.png"></p><ol><li><p>同属于一个vlan下的主机是在同一个广播域，所以在广播之后，只有与自己在同一个广播域的主机或设备可以收到</p></li><li><p>哪个主机可收到</p><ol><li>如果PC1广播，PC2可以收到（PC1和PC2都属于VLAN 2）</li><li>如果pc3广播，PC4可以收到（PC3和PC4都属于VLAN 3）</li></ol></li><li><p>交换机哪个接口可以收到：</p><p>PC1发广播域，交换机S1的2,3接口可以收到，交换机S2的3，1接口可以收到，因为S1的2号接口与PC1在同一个VLAN 2下，S2的3号接口也是属于VLAN 2,而交换机的之间的接口，也就是两台交换机的3号接    口，是走公共数据的接口类型，所以在没有配置的情况下，是可以接收所有的VLAN数据</p></li></ol><h3 id="交换机的接口类型"><a href="#交换机的接口类型" class="headerlink" title="交换机的接口类型"></a>交换机的接口类型</h3><ol start="4"><li><p>交换机接主机的接口是配置的access类型</p></li><li><p>交换机与交换机之间的接口是配置的trunk类型</p></li><li><p>所以交换机S1的1和2号是access类型，3号接口是trunk</p></li><li><p>交换机S1的1和2号是access类型，3号接口是trunk</p></li></ol><h3 id="STP的生成（生成树的选举）"><a href="#STP的生成（生成树的选举）" class="headerlink" title="STP的生成（生成树的选举）"></a>STP的生成（生成树的选举）</h3><p><strong>前沿知识</strong></p><ul><li><strong>基础</strong></li></ul><ol><li>.运行STP协议的交换机，出厂会携带一个BID（bridge ID），标识符，用于表示自身</li><li>.BID由  桥优先级+MAC地址组成</li></ol><ul><li><strong>根桥选举规则</strong></li></ul><ol><li>BID最小的交换机成为根桥。</li><li>先比较桥优先级，越小越优，桥优先级相同，则比较MAC地址，越小越优（根桥可以被抢夺）</li></ol><ul><li><strong>什么是根桥id</strong></li></ul><ol><li>根桥ID，运行生成树之后，网络中会选举出根交换机，叫根桥，根桥ID就是来描述根桥的</li><li>桥ID，就是来描述自身的BID，为什么会有两个ID呢，因为有一些交换机不是根交换机，但是自己这里需要存储谁是根交换机，所以有根BID，也要表示自己，所以有了桥ID</li></ol><p><strong>选举流程</strong></p><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/image-20230521225511731.png"></p><ol><li>第一步：选举根网桥，先比较BID,BID相同在比较MAC地址，越<strong>小</strong>越优<ul><li>我们可以知道SWA优先级为4096，比SWB和SWC的32768要小,所以SWA为根网桥</li></ul></li><li>第二步：选举根端口，按照非根交换机去往根网桥，COST值最小的成为根端口（默认为1）<ul><li>SWB =&gt;SWA 有两条线路 G0/0/1=&gt;直连SWA &amp; G0/0/2=&gt;SWC=SWA,每条线路的cost值为1，</li><li>线路COST的端口为根端口</li></ul></li><li>第三步：选举指定端口，每个链路上只有一个指定端口，但是指定端口不能与根端口是一个端口<ul><li>SWA和SWB通过G0/0/1相连接，G0/0/1已经为根端口,所以G0/0/2为指定端口</li><li>SWA和SWC同上，同理</li><li>SWB和SWC</li></ul></li><li>第四步：确定阻塞端口，既不是根端口，也不是指定端口的接口就是阻塞端口<ul><li>SWC的G0/0/2为阻塞端口</li></ul></li></ol><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/image-20230527233211059-1685201624569-3.png"></p><p>这种情况，是极有可能考察的，这里省略一些东西，上图中的BID是写成了4096 B，简写了，这里4096就是优先级，这里的优先级相同，B就相当于MAC地址，如果下面说BID小的，就是MAC地址小的，我们这里为了方便，是假设MAC地址为1位的情况下</p><ol><li><p>我们假设通过比较BID，确定SWA是根网桥</p></li><li><p>第二步就是选RP（根端口），与网桥相连的非根网桥交换机端口直接写RP，SWB和SWC的Fa0/1的为RP，然后非根网桥SWC有两个端口，每一个非根网桥交换机上有一个根端口，根据规则，我们先比较COST值（这个COST值是交换机到达网桥的和），SWC有两条路可以到SWA，可以知道SWC通过两条路去SWA，COST都是2,cost相同，cost相同的情况下，我们比较SWC对端交换机的BID，什么意思呢，就是SWC有两条路去SWA，一条是通过SWB，一条是SWD，这两个就是SWC的对端，所以确定SWC的根端口，就是比较SWD与SWB的BID（图中优先级相同，MAC地不同），显然B&lt;D，所以SWB的BID小，所以SWC上的与SWB相连的Fa0/1端口为根端口，也就是SWC的Fa0/1</p></li><li><p>第三步就是确定指定端口，按照一个链路一个指定端口，可以知道SWA的两个端口在对应的链路上为指定端口，然后SWB的F0/2为指定端口，这是为什么呢，小白理解就是根端口对端的端口就是指定端口，各个端口的情况如下</p></li></ol><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/clip_image002-1685201613874-1-1685201627292-6.jpg"></p><p>所以最后还有SWC与SWD之间还有一条链路，我们说过一条链路必有一个指定端口，那这个指定端口是SWC的端口，还是SWD的端口呢，我们根据COST值越小的越优的原则，SWC去根网桥SWA的COST为2，SWC去SWA有两条路，一条经过SWB，一条经过SWD，但是经过SWD的这条路，SWC有端口在竞选成为什么端口，所以这条路不通，所以SWC的COST为2,那同理SWD去SWA，可以直接去SWA，所以COST值为1，所以SWD的Fa0/2端口为指定端口</p><p>最后一步就是确定阻塞端口，不是根端口，也不是指定端口的端口，为阻塞端口，图中就只剩下了一个端口，就是SWC的Fa0/2端口，所以为阻塞端口</p><p>综上总结几点，</p><ol><li>一个交换机上一个根端口</li><li>一个链路上一个指定端口</li><li>根端口的对面一定是指定端口</li></ol><p>做题时简便的方式：</p><p>不管是三台交换机（第一个那样三角形），四台交换机（第二个那样四边形）</p><ol><li>先确定根网桥</li><li>根网桥的所有接口直接写DP（指定端口）</li><li>与网桥相连的交换机端口，直接是RP（其实也就是网桥DP对面一定是RP）</li><li>如果是三角形，经过上面的步骤，就只有最后一个链路的端口类型需要判断了，如果是四边形，就还要对RP,DP进行判断，只需要记住，一个交换机（非根交换机）上必须有一个RP（有且仅有一个），每条链路上必有一个是DP端口</li><li>RP与DP确定之后，最后一个就是阻塞端口（BP）</li></ol><p>如果是四边形，有一个RP是比较难确定的，可以直接按照前面说明去选择就好，一定要记住有RP这一条链路上，另外一个端口一定时DP端口</p><h3 id="IP地址聚合运算"><a href="#IP地址聚合运算" class="headerlink" title="IP地址聚合运算"></a>IP地址聚合运算</h3><p>路由聚合路由汇总的“含义”是把一组路由汇聚为单个的路由广播。<a class="link" href="https://www.zhihu.com/search?q=%E8%B7%AF%E7%94%B1%E6%B1%87%E8%81%9A&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:349286692%7D">路由汇聚<i class="fas fa-external-link-alt"></i></a>的最终结果和最明显的优点是缩小网络上的<a class="link" href="https://www.zhihu.com/search?q=%E8%B7%AF%E7%94%B1%E8%A1%A8&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:349286692%7D">路由表<i class="fas fa-external-link-alt"></i></a>的尺寸。</p><p>算法实现</p><p>　　假设下面有4个路由: 　　</p><p>172.18.129.0/24 　　</p><p>172.18.130.0/24 　　</p><p>172.18.132.0/24 　　</p><p>172.18.133.0/24 　　</p><p>如果这四个进行路由汇聚,</p><p>能覆盖这四个路由的是: 　　172.18.128.0/21 　　</p><p>算法为：</p><p>129的<a class="link" href="https://www.zhihu.com/search?q=%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%BB%A3%E7%A0%81&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:349286692%7D">二进制代码<i class="fas fa-external-link-alt"></i></a>是10000001 　　</p><p>130的二进制代码是10000010 　　</p><p>132的二进制代码是10000100 　　</p><p>133的二进制代码是10000101 　　</p><p>这四个数的前五位相同都是10000，所以加上前面的172.18这两部分相同的位数，<a class="link" href="https://www.zhihu.com/search?q=%E7%BD%91%E7%BB%9C%E5%8F%B7&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:349286692%7D">网络号<i class="fas fa-external-link-alt"></i></a>就是8+8+5=21。</p><p>而10000000的<a class="link" href="https://www.zhihu.com/search?q=%E5%8D%81%E8%BF%9B%E5%88%B6%E6%95%B0&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:349286692%7D">十进制数<i class="fas fa-external-link-alt"></i></a>是128，所以，路由汇聚的Ip地址就是172.18.128.0。所以最终答案就是172.18.128.0/21</p><h3 id="pconfig-x2F-all-命令查出的信息含义"><a href="#pconfig-x2F-all-命令查出的信息含义" class="headerlink" title="pconfig /all 命令查出的信息含义"></a>pconfig /all 命令查出的信息含义</h3><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/clip_image002-1685249027466-1-1685249088451-7.jpg"></p><p>两张图片显示的字段大致相同，但是具体的值不一样</p><p>主要信息说明</p><p>Physical Address：物理地址，也就是MAC地址</p><p>Link-local IPv6 address:本地链路IPv6地址</p><p>IPv4 address:ipv4地址</p><p>Subnetmask：子网掩码</p><p>Default gateway：默认网关</p><p>DNS servers：DNS服务器</p><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/clip_image004-1685249083533-4.jpg"></p><p>可能考的点：</p><p>1.可能会考上面的字段的含义</p><p>2.重点：会考察Link-local IPv6 address:本地链路IPv6地址，后面紧跟%XX字段的含义。例fe80：：b50b:4bfd:c2d3:2a0c%10中%10是什么含义，可以说是网卡的索引号，也可以说是接口标志符，相当于网卡的编号，两种说法都可</p><p>注意！回去看一下ipconfig /all命令的所有内容。要读懂，考试一定会考的。知道每一部分什么意思，干嘛用的？你要读懂。  IP地址，MAC地址，网关，DHCP等。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式笔记</title>
      <link href="/2023/04/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/04/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Java设计模式"><a href="#Java设计模式" class="headerlink" title="Java设计模式"></a>Java设计模式</h1><h2 id="一、设计模式七大原则"><a href="#一、设计模式七大原则" class="headerlink" title="一、设计模式七大原则"></a>一、设计模式七大原则</h2><h4 id="1、单一职责原则"><a href="#1、单一职责原则" class="headerlink" title="1、单一职责原则"></a>1、单一职责原则</h4><ul><li><p>介绍：</p><p>对于类来说，每个类都应该只负责一个职责。如果A类负责两个不同的职责：职责1，职责2，当职责1的需求变更要改变A时，可能造成职责2执行错误，所以需要将类A的粒度分解。</p></li><li><p>降低类的复杂度，一个类只负责一个功能</p></li><li><p>提高类的可读性，可维护性</p></li><li><p>降低变更引起的风险</p></li><li><p>通常情况下，我们应当遵守单一职责原则，只能逻辑足够简单，才可以在代码级违反单一职责原则，只有类中的方法足够少，可以才方法级别保持单一职责原则。</p></li></ul><h4 id="2、接口隔离原则"><a href="#2、接口隔离原则" class="headerlink" title="2、接口隔离原则"></a>2、接口隔离原则</h4><ul><li>将接口拆分为独立的几个接口，这里我们拆分为3个，</li><li>类A和类C分别于他们需要的接口建立关系</li><li>也就是采用接口隔离原则</li></ul><h4 id="3、依赖倒转原则"><a href="#3、依赖倒转原则" class="headerlink" title="3、依赖倒转原则"></a>3、依赖倒转原则</h4><ul><li>高层模块不应该依赖低层模块，二者都应该依赖其抽象</li><li>抽象不应该依赖其细节，细节应该依赖抽象</li><li>依赖倒转的中心思想的面向接口编程</li><li>依赖倒转原则是基于这样的设计理念，相对于细节的多变性，抽象的对象要稳定的多，</li><li>java中抽象的是指接口或者抽象类，细节就是具体的实现类</li><li>使用接口或者抽象类的目的是制定好规范，而不涉及任何具体的操作，把展现细节的任务交给他们的实现类来做</li><li>注意<ul><li>低层模块尽量都要有抽象类或接口，或者都有，程序稳定性更好</li><li>变量的声明类型尽量是抽象类或者接口。这样我们的变量引用和实际对象间，就存在一个缓存区，利于程序扩展和优化</li><li>遵循里氏替换原则</li></ul></li></ul><h4 id="4、里氏替换原则"><a href="#4、里氏替换原则" class="headerlink" title="4、里氏替换原则"></a>4、里氏替换原则</h4><ul><li>这条原则是针对继承关系的，它强调子类型必须能够替换掉其父类型，并且调用者不需要知道实际使用的是子类型还是父类型，程序能够正确运行。</li><li>子类必须实现父类的所有抽象方法，不能删除、修改、增加父类的方法，也不能改变父类方法的返回值类型和方法签名的参数类型</li><li>子类可以有自己的方法和属性</li><li>子类中的方法应该与父类中的方法有相同的预期后置条件（post-conditions），即方法的执行结果应该符合其描述的结果</li><li>子类中的方法不能抛出异常，也不能抛出超出父类方法范围的异常。</li></ul><h4 id="5、开闭原则"><a href="#5、开闭原则" class="headerlink" title="5、开闭原则"></a>5、开闭原则</h4><ul><li>简单来说，开闭原则要求软件设计应该是可以扩展的，但是不应该修改现有的代码。这样做能够使软件更易于维护、扩展和升级，并且可以减少因为修改代码而引入新问题的风险</li><li>抽象化：使用接口或抽象类等抽象化的方式，将具体的实现和抽象分离，并且将抽象设计得足够通用，以便能够适应未来的需求变化。</li><li>封装变化：将不同的变化隔离开来，确保每个变化只影响相应的模块。这样做可以减少变化的影响范围，并且可以提高代码的内聚性。</li><li>利用多态：利用多态性来实现开闭原则，即将变化的实现部分抽象成接口或抽象类，而将具体的实现放在实现子类中，通过面向父类编程，可以让程序更易于扩展和升级。</li></ul><h4 id="6、迪米特原则"><a href="#6、迪米特原则" class="headerlink" title="6、迪米特原则"></a>6、迪米特原则</h4><ul><li>为了遵守迪米特法则，我们需要：<ul><li>将对象的设计和实现尽可能简单，避免出现类之间交互过于复杂的情况。</li><li>抽象出适当的接口，尽量减少对象之间直接的依赖关系，而是通过接口进行交互。</li><li>将每个对象的职责尽可能的分离，使得每个对象只关注自己的核心任务，而不需要了解依赖对象的具体实现。</li><li>在设计过程中，保持代码的清晰简洁，让代码易于理解和维护。</li></ul></li><li>迪米特法则的核心思想是“减少耦合性，增加内聚性”，即在一个系统中，对象之间的交互应该尽可能简单，不需要了解太多其他对象的内部实现。也就是说，一个对象应该对其他对象了解得最少。</li><li>迪米特法则可以有效的减少代码的耦合性，提高代码的内聚性和可维护性。同时，它也能够促进面向对象设计中的单一职责原则和开闭原则的实践。</li></ul><h4 id="7、合成复用原则"><a href="#7、合成复用原则" class="headerlink" title="7、合成复用原则"></a>7、合成复用原则</h4><ul><li>合成复用原则的核心思想是“优先使用对象组合，而不是继承关系来实现代码的重用”。</li><li>为了遵循合成复用原则，我们需要：<ul><li>尽量使用对象组合来构建复杂的对象，而不是使用类继承。</li><li>在设计时优先考虑对象间的组合关系，而不是类之间的继承关系。</li><li>在需要重用某些功能的时候，尽量使用对象组合来实现，而不是通过类的继承。</li><li>设计类时尽量保持职责单一，每个类负责一项任务，而不是实现多项任务。</li><li>通过使用合成复用原则，可以大大提高代码的可维护性、复用性和扩展性，同时减少代码的耦合性和依赖性。此外，还可以避免由于类继承关系过于复杂而导致的代码难以理解和维护的问题。</li></ul></li></ul><h2 id="二、设计模式类型"><a href="#二、设计模式类型" class="headerlink" title="二、设计模式类型"></a>二、设计模式类型</h2><h4 id="1-创建型模式"><a href="#1-创建型模式" class="headerlink" title="1. 创建型模式"></a>1. 创建型模式</h4><ul><li>单例模式 - 抽象工厂模式 - 原型模式</li><li>建造者模式 - 工厂模式</li></ul><h4 id="2-结构型模式"><a href="#2-结构型模式" class="headerlink" title="2. 结构型模式"></a>2. 结构型模式</h4><ul><li>适配器模式 - 桥接模式 - 装饰模式</li><li>组合模式 - 外观模式 - 享元模式</li><li>代理模式</li></ul><h4 id="3-行为型模式"><a href="#3-行为型模式" class="headerlink" title="3. 行为型模式"></a>3. 行为型模式</h4><ul><li>模板方法模式 - 命令模式 - 访问者模式</li><li>迭代器模式 - 观察者模式 - 中介者模式</li><li>备忘录模式- 解释器模式 - 状态模式 </li><li>策略模式 - 责任链模式</li></ul><h2 id="三、-设计模式"><a href="#三、-设计模式" class="headerlink" title="三、 设计模式"></a>三、 设计模式</h2><h3 id="1、单例模式"><a href="#1、单例模式" class="headerlink" title="1、单例模式"></a>1、单例模式</h3><ul><li><p>饿汉式</p><pre class="line-numbers language-none"><code class="language-none">饿汉式是一种比较简单的单例模式实现方式，其核心思想是在类加载的时候就创建并初始化唯一的实例，避免了多线程环境下可能出现的线程安全问题。在某些情况下可能会导致资源浪费，即如果 INSTANCE 并未被使用到，但是它却会在类加载时被创建出来并占用一定的内存空间。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>静态变量实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token constant">INSTANCE</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>静态代码块形式</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Singleton</span> <span class="token constant">INSTANCE</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token constant">INSTANCE</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>枚举式</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token constant">INSTANCE</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>懒汉式</p><p>其核心思想是在需要获取实例时才进行对象的实例化。相比于饿汉式，懒汉式的实现需要注意多线程环境下的线程安全问题。<br>在懒汉式的实现过程中，可以使用一个私有的静态变量来存储该实例，但是不进行初始化，直到第一次使用该实例时再进行初始化，<br>并返回该实例的引用。为了确保多线程环境下的线程安全问题，可以使用 synchronized 关键字或者双重检测锁来实现线程安全的访问。</p><ul><li><p>线程不安全的懒汉式  </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*在第一次使用时才进行实例化，但是没有考虑多线程下的并发问题，有可能会导致多个线程在同一时刻创建多个实例。如果并发访问情况下极容易出现线程安全问题，因此不推荐使用。*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> instance<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>线程安全的懒汉式</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*线程安全的懒汉式指的是，使用双重检查锁（Double-Check Locking，DCL）的方式，即在保证线程安全的前提下，尽量避免不必要的锁竞争和实例化操作。*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> instance<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>内部类懒汉式</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*使用内部类的方式实现线程安全的懒汉式单例模式。在内部类中创建单例对象进行初始化，通过静态内部类的特性来保证线程安全和唯一性。*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SingletonHolder</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Singleton</span> <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">SingletonHolder</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>无论使用哪种方式，懒汉式单例模式都是在第一次使用时才进行实例化，避免了在类加载时就创建单例对象所带来的性能问题。但是需要注意，第一种方式并不能保证线程安全，因此不推荐使用。其他两种方式能够保证线程安全且高效，因此推荐使用。</p></li></ul></li></ul><h3 id="2、简单工厂模式"><a href="#2、简单工厂模式" class="headerlink" title="2、简单工厂模式"></a>2、简单工厂模式</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*在简单工厂模式中，包含一个工厂类 Factory，该类负责创建对应产品的对象。工厂类中通常会包括一个静态方法，该方法根据不同的参数生成不同的产品实例。这样，客户端只需要知道产品的类型，而不需要关心产品的创建过程。*/</span> <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteProduct1</span> <span class="token keyword">implements</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Product 1 used."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteProduct2</span> <span class="token keyword">implements</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Product 2 used."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Product</span> <span class="token function">createProduct</span><span class="token punctuation">(</span><span class="token keyword">int</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">1</span> <span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteProduct1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2</span> <span class="token operator">:</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteProduct2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">default</span> <span class="token operator">:</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Invalid product type."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Product</span> product <span class="token operator">=</span> <span class="token class-name">SimpleFactory</span><span class="token punctuation">.</span><span class="token function">createProduct</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        product<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简单工厂模式的主要特点是通过一个工厂方法来创建对象，而不是通过类的构造器。</p><ul><li>使用简单工厂模式的优点在于：<ul><li>客户端代码与产品对象的创建过程分离，降低耦合度。</li><li>在新增产品时，仅需适当修改工厂类即可，无需修改客户端代码，提高系统的可扩展性。</li><li>通过创建工厂方法，可以将对象创建的粒度进行统一管理，提高系统的可维护性。</li></ul></li><li>简单工厂模式的缺点在于：<ul><li>当新增产品时，需要修改工厂类的代码，不符合开闭原则。</li><li>工厂类会承担较多的职责，有可能会变得复杂</li></ul></li></ul><h3 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h3><ul><li><p>工厂方法模式是一种创建型设计模式，它提供了一种创建对象的方法，将对象的创建委托给其子类来完成。借助工厂方法模式，我们可以将对象的创建和使用分开，从而降低系统耦合度</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*在工厂方法模式中，我们定义一个抽象的工厂类，其中包含一个创建产品的抽象方法。*/</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">OrderPizza</span> <span class="token punctuation">{</span>    <span class="token comment">//定义一个抽象方法，createPizza,让各个子类自己实现</span>    <span class="token keyword">abstract</span> <span class="token class-name">Pizza</span> <span class="token function">createPizza</span><span class="token punctuation">(</span><span class="token class-name">String</span> orderType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">OrderPizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">String</span> orderType<span class="token punctuation">;</span><span class="token comment">//订购披萨的类型</span>        <span class="token keyword">do</span> <span class="token punctuation">{</span>            orderType <span class="token operator">=</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Pizza</span> pizza <span class="token operator">=</span> <span class="token function">createPizza</span><span class="token punctuation">(</span>orderType<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//输出披萨制作工厂</span>            pizza<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pizza<span class="token punctuation">.</span><span class="token function">bake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pizza<span class="token punctuation">.</span><span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pizza<span class="token punctuation">.</span><span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token class-name">BufferedReader</span> strIn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"披萨种类:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> strIn<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/*具体的产品由工厂的子类来创建，每个工厂子类都实现了抽象工厂类中的抽象方法，用于创建相应的产品*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BJOrderPizza</span> <span class="token keyword">extends</span> <span class="token class-name">OrderPizza</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token class-name">Pizza</span> <span class="token function">createPizza</span><span class="token punctuation">(</span><span class="token class-name">String</span> orderType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"制作北京披萨"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Pizza</span> pizza<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"cheese"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            pizza<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">BJCheesePizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"pepper"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            pizza<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">BJPepperPizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> pizza<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LDOrderPizza</span> <span class="token keyword">extends</span> <span class="token class-name">OrderPizza</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token class-name">Pizza</span> <span class="token function">createPizza</span><span class="token punctuation">(</span><span class="token class-name">String</span> orderType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"制作伦敦披萨"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Pizza</span> pizza<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"cheese"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            pizza<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">LDCheesePizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"pepper"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            pizza<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">LDPepperPizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> pizza<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PizzaStore</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//创建北京口味的各种pizza</span>        <span class="token class-name">String</span> location <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>location<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"bj"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">BJOrderPizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>location<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"ld"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">LDOrderPizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>这种设计模式能够实现代码的可扩展性，当我们需要新增一种产品时，只需要增加相应的产品子类及其工厂子类即可，对现有代码不会造成影响。</p></li><li><p>工厂方法模式的优点包括封装了对象的创建，使得客户端无需关心对象的具体创建过程，增加了系统的灵活性和可扩展性，同时降低了系统的耦合程度。</p></li><li><p>不足之处是如果工厂类较多，会导致代码复杂度增加。此外，由于工厂方法模式使用了继承来完成对象的创建，因此会增加系统的类的个数和结构的复杂度。</p></li></ul><h3 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h3><ul><li><p>抽象工厂模式是一种创建型设计模式，它提供了一个接口，让客户端能够创建一系列相关或依赖对象，而无需指定它们的具体类。抽象工厂模式是工厂方法模式的一种变体，它使用一组相关的工厂来创建对象，这些工厂被称为“抽象工厂”。</p></li><li><p>在抽象工厂模式中，抽象工厂定义了一个接口，用于创建一组相关对象，而具体工厂则实现这个接口，并创建具体的对象。每个工厂都可以创建一组相似的对象，但这些对象可能在不同的上下文中使用，因此它们具有不同的具体表现形式。</p></li><li><p>使用抽象工厂模式可以隐藏对象的具体实现细节，只披露接口，从而简化代码，提高系统的可扩展性和灵活性。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AbsFactory</span> <span class="token punctuation">{</span>    <span class="token comment">//让下面的工厂子类来具体实现</span>    <span class="token class-name">Pizza</span> <span class="token function">createPizza</span><span class="token punctuation">(</span><span class="token class-name">String</span> orderType<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BJFactory</span> <span class="token keyword">implements</span> <span class="token class-name">AbsFactory</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Pizza</span> <span class="token function">createPizza</span><span class="token punctuation">(</span><span class="token class-name">String</span> orderType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"制作北京披萨"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Pizza</span> pizza<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"cheese"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            pizza <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BJCheesePizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"pepper"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            pizza<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">BJPepperPizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> pizza<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LDFactory</span> <span class="token keyword">implements</span> <span class="token class-name">AbsFactory</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Pizza</span> <span class="token function">createPizza</span><span class="token punctuation">(</span><span class="token class-name">String</span> orderType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"制作伦敦披萨"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Pizza</span> pizza<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"cheese"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            pizza <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LDCheesePizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"pepper"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            pizza<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">LDPepperPizza</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> pizza<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderPizza</span> <span class="token punctuation">{</span>    <span class="token class-name">AbsFactory</span> absFactory<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">OrderPizza</span><span class="token punctuation">(</span><span class="token class-name">AbsFactory</span> absFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setAbsFactory</span><span class="token punctuation">(</span>absFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setAbsFactory</span><span class="token punctuation">(</span><span class="token class-name">AbsFactory</span> absFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Pizza</span> pizza<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> orderType <span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>absFactory<span class="token operator">=</span>absFactory<span class="token punctuation">;</span>        <span class="token keyword">do</span> <span class="token punctuation">{</span>            orderType<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pizza<span class="token operator">=</span>absFactory<span class="token punctuation">.</span><span class="token function">createPizza</span><span class="token punctuation">(</span>orderType<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pizza<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                pizza<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                pizza<span class="token punctuation">.</span><span class="token function">bake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                pizza<span class="token punctuation">.</span><span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                pizza<span class="token punctuation">.</span><span class="token function">box</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token class-name">BufferedReader</span> strIn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"披萨种类:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> strIn<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="工厂模式小结"><a href="#工厂模式小结" class="headerlink" title="工厂模式小结"></a>工厂模式小结</h3><p>简单工厂模式、工厂方法模式和抽象工厂模式都是创建型设计模式，它们的主要特点如下：</p><ul><li><strong>简单工厂模式</strong></li></ul><p>简单工厂模式是一种将对象的创建与使用分离的设计模式，它是一种静态工厂，即工厂类中都是静态方法。简单工厂模式只有一个具体工厂类，并且只能创建一种产品，但是可以通过使用不同的参数创建出不同的具体产品。</p><ul><li><strong>工厂方法模式</strong></li></ul><p>工厂方法模式是一种将对象的创建与使用分离的设计模式，基本思想是定义一个工厂接口，然后让具体工厂类实现这个接口，从而实现对产品的创建。工厂方法模式是允许有多个具体工厂类的工厂模式，每个具体工厂只生产一种产品。</p><ul><li><strong>抽象工厂模式</strong></li></ul><p>抽象工厂模式是一种能够生产不同产品族的工厂模式，其基本思想是定义一个抽象工厂接口，然后在不同的具体工厂中实现这个接口，从而实现对不同产品族的创建。抽象工厂是允许有多个具体工厂类的工厂模式，每个具体工厂可以生产多种产品。</p><p>总的来说，简单工厂模式适用于创建单一产品，工厂方法模式适用于创建多个具体产品，抽象工厂模式适用于创建不同产品族。选择哪个模式要根据具体需求和实现情况来考虑。</p><h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><ul><li><p>深拷贝和浅拷贝</p><ul><li>浅拷贝是指将一个对象复制到一个新的对象中，两者的基本数据类型的值相同，但是对于引用类型，两者对应的变量指向的是同一个引用对象，对其中一个的改变会影响另一个。</li><li>深拷贝是指将一个对象复制到一个新的对象中，不仅两者的基本数据类型的值相同，而且引用类型的变量也指向了新的引用对象，两者互不干扰。</li></ul></li><li><p>浅拷贝 默认的clone()方法就是浅拷贝</p></li><li><p>深拷贝</p><ul><li>方法1 使用clone方法</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//深拷贝 </span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">{</span>        <span class="token class-name">Object</span> deep<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">//这里完成对基本（数据类型）属性的克隆</span>            deep <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//对引用类型的属性进行单独处理</span>            <span class="token class-name">DeepProtoType</span> deepProtoType<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">DeepProtoType</span><span class="token punctuation">)</span> deep<span class="token punctuation">;</span>            deepProtoType<span class="token punctuation">.</span>deepCloneTarget<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">DeepCloneableTarget</span><span class="token punctuation">)</span> deepCloneTarget<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CloneNotSupportedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>方法2 通过对象序列化实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//创建到流对象</span>        <span class="token class-name">ByteArrayOutputStream</span> bos<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectOutputStream</span> oos<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">ByteArrayInputStream</span> bis<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectInputStream</span> ois<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">//序列化</span>            bos<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            oos<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>bos<span class="token punctuation">)</span><span class="token punctuation">;</span>            oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//当前对象以对象流方式输出</span>            <span class="token comment">//反序列化</span>            bis<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>bos<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ois<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>bis<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">DeepProtoType</span><span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>bos <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> bos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>oos <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>bis <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> bis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ois <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码是实现了通过对象的深拷贝来复制一个对象，具体实现的过程如下：</p><ol><li>创建字节流对象: ByteArrayOutputStream bos, 用于存储序列化后的对象数据；ObjectOutputStream oos, 用于将对象序列化后的数据写入到 bos 中。</li><li>调用 oos.writeObject(this) 将当前对象实例写入到 bos 中，实现了对象的序列化，并存储在 bos 中。</li><li>创建字节输入流对象: ByteArrayInputStream bis, 用于读取反序列化后的数据；ObjectInputStream ois, 用于将序列化后的数据反序列化成对象。</li><li>将 bos 中的数据转变成 bis 所需的格式，并读取 bis 中的数据，将其反序列化成 DeepProtoType 对象。</li><li>将反序列化后的对象返回。</li></ol></li></ul></li></ul><h3 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h3><ul><li><p>建造者模式可以让你更容易地构建复杂的对象，而不必关心对象的内部细节。使用该模式可以将对象的创建过程分解成多个步骤，每个步骤负责创建指定的组件或部分。这些部件最终可以组装成一个完整的复杂对象。这样，建造者模式可以使得类的设计更加模块化，易于维护和扩展。例如，您可以使用建造者模式创建汽车对象，可以先创建车轮组件、座椅组件、发动机组件等，然后再将它们组装成一个完整的汽车对象。</p></li><li><p>建造者模式是一种对象创建型设计模式。它允许您创建具有复杂参数构造函数的对象，同时也可以让您使用步骤来创建该对象的过程。该模式允许您创建不同类型的对象，同时避免需要指定其复杂和多参数构造函数的复杂性。建造者模式将对象的创建过程分解为多个简单的步骤，这些步骤逐个执行以创建最终对象。</p></li><li><p>建造者模式通常由以下几个组件组成：</p><ul><li>Director: 指挥者，负责管理建造过程，即创建对象的顺序和方式。这个角色应该知道哪些步骤来执行，以便正确创建一个完整的对象；</li><li>Abstract Builder: 建造者接口，定义了将来的具体建造者所应该遵守的约定，以便按照规定的步骤来创建复杂对象；</li><li>Concrete Builder: 具体建造者，实现建造者接口中的方法以构建和装配产品，该角色负责实际创建对象的任务；</li><li>Product: 产品，由多个部件组成的复杂对象。产品类不需要知道创建它的细节，只需提供所需的方法即可。</li></ul><p>建造者模式最大的优点在于封装了对象构造过程，让对象的创建和表示分离，并且易于扩展。因此，建造者模式在涉及创建复杂对象的情况下非常有用，例如创建复杂的对象，或者对象包含许多部分或属性。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">House</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> basic<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> walls<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> roofed<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//抽象的建造者</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">HouseBuilder</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token class-name">House</span> house<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">House</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//将建造的流程写好，抽象方法</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildBasic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildWalls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">roofed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//建造房子</span>    <span class="token keyword">public</span> <span class="token class-name">House</span> <span class="token function">buildHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> house<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HighHouseBuilder</span> <span class="token keyword">extends</span> <span class="token class-name">HouseBuilder</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildBasic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"给高楼打地基"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildWalls</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"给高楼砌墙"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">roofed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"给高楼盖屋顶"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommonHouseBuilder</span> <span class="token keyword">extends</span> <span class="token class-name">HouseBuilder</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildBasic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"给普通房子打地基"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildWalls</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"给普通房子砌墙"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">roofed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"给普通房子封顶"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HouseDirector</span> <span class="token punctuation">{</span>    <span class="token class-name">HouseBuilder</span> houseBuilder<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">HouseDirector</span><span class="token punctuation">(</span><span class="token class-name">HouseBuilder</span> houseBuilder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>houseBuilder <span class="token operator">=</span> houseBuilder<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHouseBuilder</span><span class="token punctuation">(</span><span class="token class-name">HouseBuilder</span> houseBuilder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>houseBuilder <span class="token operator">=</span> houseBuilder<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//指挥</span>    <span class="token comment">//如何处理建造房子的流程，交给指挥者</span>    <span class="token keyword">public</span> <span class="token class-name">House</span> <span class="token function">constructHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        houseBuilder<span class="token punctuation">.</span><span class="token function">buildBasic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        houseBuilder<span class="token punctuation">.</span><span class="token function">buildWalls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        houseBuilder<span class="token punctuation">.</span><span class="token function">roofed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> houseBuilder<span class="token punctuation">.</span><span class="token function">buildHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//盖普通房子</span>        <span class="token class-name">CommonHouseBuilder</span> commonHouseBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CommonHouseBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//准备创建房子的指挥者</span>        <span class="token class-name">HouseDirector</span> houseDirector <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HouseDirector</span><span class="token punctuation">(</span>commonHouseBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//完成盖房子</span>        <span class="token class-name">House</span> house <span class="token operator">=</span> houseDirector<span class="token punctuation">.</span><span class="token function">constructHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"house = "</span> <span class="token operator">+</span> house<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/image-20230408224019888.png"></p></li></ul><h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><ul><li><p>类适配器</p><ul><li>类适配器是一种适配器设计模式，它可以将一个类（适配器）的接口转换为另一个类（被适配者）的接口，从而使得客户端可以使用被适配者的接口来访问适配器中的功能。在类适配器中，适配器继承自被适配者类，并实现客户端所期望的接口。</li><li>类适配器的优势在于：<ol><li>可以通过继承被适配者类来复用被适配者的代码和功能。</li><li>客户端可以直接访问被适配者类中的所有方法和属性。</li></ol></li><li>类适配器的缺点在于：<ol><li>由于适配器需要继承被适配者类，因此适配器只能适配一个被适配者类，无法适配被适配者类的多个子类。</li><li>适配器与被适配者之间是通过继承关系实现的，因此适配器的实现可能受到被适配者类的限制，而无法灵活地实现客户端所期望的接口。</li><li>在被适配者类中的方法不能够被客户端重写或覆盖，这可能会导致一些问题。</li></ol></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Voltage220V</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">output220V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> src<span class="token operator">=</span><span class="token number">220</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"电压="</span><span class="token operator">+</span>src<span class="token operator">+</span><span class="token string">"伏"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> src<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IVoltage5V</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">output5V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VoltageAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">Voltage220V</span> <span class="token keyword">implements</span> <span class="token class-name">IVoltage5V</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">output5V</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//获取到220V电压</span>        <span class="token keyword">int</span> srcV <span class="token operator">=</span> <span class="token function">output220V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//转成5V</span>        <span class="token keyword">return</span> srcV<span class="token operator">/</span><span class="token number">44</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"适配器模式"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Phone</span> phone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        phone<span class="token punctuation">.</span><span class="token function">charging</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">VoltageAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>接口适配器</p><ul><li><p>接口适配器是一种适配器设计模式，它通过在一个适配器中定义一个占位符接口（即接口中的所有方法都没有实现），从而使得客户端只需要实现它所需要的接口方法，而无需实现所有的方法。</p></li><li><p>接口适配器通常用来解决以下问题：</p><ol><li>当一个接口中定义了多个方法，但是客户端只需要使用其中的部分方法时，使用接口适配器可以避免客户端实现多余的方法。</li><li>当一个接口需要进行修改或扩展时，使用接口适配器可以避免对所有实现该接口类的修改。</li></ol></li><li><p>与其他适配器不同，接口适配器并不需要持有被适配者的实例或者继承被适配者类，而是通过定义一个占位符接口来实现适配器。客户端只需要实现所需要的接口方法即可</p></li><li><p>接口适配器的优势在于：</p><ol><li>客户端只需要实现所需要的方法，避免了实现多余的方法，提高了代码的可读性和可维护性。</li><li>当一个接口需要修改时，只需要修改占位符接口，而无需修改所有实现该接口的类。</li></ol></li><li><p>接口适配器的缺点在于：</p><ol><li>占位符接口的定义可能会比较复杂，需要花费更多的时间和精力。</li><li>如果一个接口中的方法数量较多，使用接口适配器可能会导致占位符接口中方法数量过多，影响代码的可读性。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Interface4</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">m3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">m4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbsAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">Interface4</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">AbsAdapter</span> absAdapter<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AbsAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//只需要去覆盖我们需要使用的接口方法</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用了m1方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        absAdapter<span class="token punctuation">.</span><span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>对象适配器</p><ul><li><p>它使得一个类（适配器）可以将其所持有的另一个类（被适配者）的接口转换为客户端所期望的另一种接口。在对象适配器中，适配器持有被适配者的一个实例，并且将客户端的请求转发给被适配者。</p></li><li><p>对象适配器的优势在于：</p><ol><li>可以适配多个被适配者类。</li><li>适配器与被适配者之间松耦合，使得适配器可以被更加灵活地重用。</li></ol></li><li><p>对象适配器的缺点在于：</p><ol><li>客户端只能访问被适配者类中已有的接口，无法访问被适配者类中的其他方法。</li><li>由于适配器需要持有被适配者的实例，因此如果被适配者本身是一个大型或重量级对象，可能会导致内存占用过高。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Voltage220V</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">output220V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> src<span class="token operator">=</span><span class="token number">220</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"电压="</span><span class="token operator">+</span>src<span class="token operator">+</span><span class="token string">"伏"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> src<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IVoltage5V</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">output5V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VoltageAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">IVoltage5V</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Voltage220V</span> voltage220V<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">VoltageAdapter</span><span class="token punctuation">(</span><span class="token class-name">Voltage220V</span> voltage220V<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>voltage220V <span class="token operator">=</span> voltage220V<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">output5V</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> dst<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>voltage220V<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用对象适配器进行转换"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//获取到220V电压</span>            <span class="token keyword">int</span> srcV <span class="token operator">=</span>voltage220V<span class="token punctuation">.</span><span class="token function">output220V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//转成5V</span>            dst<span class="token operator">=</span>srcV<span class="token operator">/</span><span class="token number">44</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dst<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"适配器模式"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Phone</span> phone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//传入被适配器</span>        phone<span class="token punctuation">.</span><span class="token function">charging</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">VoltageAdapter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Voltage220V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h3><ul><li><p>桥接模式通过将抽象部分和实现部分分离，使得它们可以独立地变化。在桥接模式中，我们使用一个桥接类来连接抽象部分和实现部分，这个桥接类包含了抽象类的引用，以及一个实现类的引用。这样，我们就可以动态地改变抽象部分和实现部分之间的关系。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Brand</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Phone</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Brand</span> brand<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token class-name">Brand</span> brand<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">=</span> brand<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>brand<span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>brand<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>brand<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FoldPhone</span> <span class="token keyword">extends</span> <span class="token class-name">Phone</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">FoldPhone</span><span class="token punctuation">(</span><span class="token class-name">Brand</span> brand<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"折叠手机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"折叠手机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"折叠手机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UpRightPhone</span> <span class="token keyword">extends</span> <span class="token class-name">Phone</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">UpRightPhone</span><span class="token punctuation">(</span><span class="token class-name">Brand</span> brand<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"直立手机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"直立手机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"直立手机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Vivo</span> <span class="token keyword">implements</span> <span class="token class-name">Brand</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"vivo手机开机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"vivo手机关机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"vivo手机打电话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XIaoMI</span> <span class="token keyword">implements</span> <span class="token class-name">Brand</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小米手机开机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小米手机关机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小米手机打电话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//获取折叠手机</span>        <span class="token class-name">Phone</span> foldPhone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FoldPhone</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">XIaoMI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        foldPhone<span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        foldPhone<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        foldPhone<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Phone</span> foldPhone1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UpRightPhone</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Vivo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        foldPhone1<span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        foldPhone1<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        foldPhone1<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/image-20230410100333803.png"></p></li></ul><h3 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h3><ul><li><p>装饰器模式是一种结构型设计模式，它允许在运行时动态地新增一些行为到一个对象中，而不需要修改它的源代码。这种设计模式通过将对象封装在装饰器类中，以增加对象的功能和特性，而不需要创建一个新的子类。</p></li><li><p>这种模式适用于：</p><ul><li><p>需要在不修改原始对象源代码的情况下增加对象功能的场景；</p></li><li><p>需要在运行时为一个对象增加多个行为的场景；</p></li><li><p>在继承关系中，父类结构固定，但是需要新增一些功能的场景。</p></li></ul></li><li><p>装饰器模式的实现可以基于类或者基于函数。在基于类实现中，装饰器类通常继承自原始对象的类，然后通过组合方式在运行时为原始对象增加新的职责。在基于函数实现中，装饰器函数接收一个函数作为参数，然后返回一个新的函数，在这个新的函数中增加了新的行为。</p><p>抽象类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Drink</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> des<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> price<span class="token operator">=</span><span class="token number">0.0f</span><span class="token punctuation">;</span>    <span class="token comment">//计算费用的抽象方法</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span>  <span class="token keyword">float</span> <span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> des<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDes</span><span class="token punctuation">(</span><span class="token class-name">String</span> des<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>des <span class="token operator">=</span> des<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> price<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token keyword">float</span> price<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Drink{"</span> <span class="token operator">+</span>                <span class="token string">"描述='"</span> <span class="token operator">+</span> des <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token string">", 价格="</span> <span class="token operator">+</span> price <span class="token operator">+</span>                <span class="token char">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>装饰类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Decorator</span> <span class="token keyword">extends</span> <span class="token class-name">Drink</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Drink</span> obj<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Decorator</span><span class="token punctuation">(</span><span class="token class-name">Drink</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>obj <span class="token operator">=</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span> obj<span class="token punctuation">.</span><span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span>des                <span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token operator">+</span><span class="token string">"&amp;&amp;"</span><span class="token operator">+</span>obj<span class="token punctuation">.</span><span class="token function">getDes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>品类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Coffee</span> <span class="token keyword">extends</span> <span class="token class-name">Drink</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>单品类</p><pre class="line-numbers language-javav" data-language="javav"><code class="language-javav">public class ShortBlack extends Coffee{    public ShortBlack() {        this.setDes("ShortBlack");        this.setPrice(4.0f);    }}public class LongBlack extends Coffee {    public LongBlack() {        this.setDes("美式咖啡");        this.setPrice(5.0f);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>装饰类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Soy</span> <span class="token keyword">extends</span> <span class="token class-name">Decorator</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">Soy</span><span class="token punctuation">(</span><span class="token class-name">Drink</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setDes</span><span class="token punctuation">(</span><span class="token string">"豆浆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">1.5f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Milk</span> <span class="token keyword">extends</span> <span class="token class-name">Decorator</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">Milk</span><span class="token punctuation">(</span><span class="token class-name">Drink</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setDes</span><span class="token punctuation">(</span><span class="token string">"牛奶"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">2.0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Espresso</span> <span class="token keyword">extends</span> <span class="token class-name">Coffee</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">Espresso</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDes</span><span class="token punctuation">(</span><span class="token string">"意大利咖啡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token number">6.0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>客户端</p><pre class="line-numbers language-none"><code class="language-none">public class CoffeeBar {    public static void main(String[] args) {        //1.点一份longBlack        Drink order = new LongBlack();        System.out.println("order = " +order.getDes()+ order.cost());        //2.加入一份牛奶        order=new Milk(order);        System.out.println("order = "+order.getDes() + order.cost());        //3.加入一份巧克力        order=new Chocolate(order);        System.out.println("order = " +order.getDes()+ order.cost());    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>​<img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/image-20230410120740431.png"></p><h3 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h3><ul><li><p>组合模式是一种常用的结构型设计模式，它通过将对象组合成树状结构，可以让客户端以统一的方式处理单个对象和组合对象。这种模式可以让我们更加灵活地构建层级结构，以及处理层级结构中的对象，让结构更清晰，代码更易于理解。</p></li><li><p>组合模式适用于以下情况：</p><ul><li><p>需要构建层级结构的场景，如文件系统、组织架构等；</p></li><li><p>希望客户端能够以一种统一的方式处理单个对象和组合对象的场景；</p></li><li><p>希望在层级结构中增加或者删除某个对象时，对其他对象没有影响。</p></li></ul></li><li><p>在组合模式中，有两种对象类型：组合对象和叶子对象。组合对象包含其他组合对象或者叶子对象，叶子对象没有子对象，可以被当做基本对象来处理。组合对象和叶子对象都实现了相同的接口，可以在客户端以一种统一的方式来使用。</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//接口类</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">OrganizationComponent</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> des<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">OrganizationComponent</span> organizationComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">OrganizationComponent</span> organizationComponent<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//方法print</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">OrganizationComponent</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> des<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>des <span class="token operator">=</span> des<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> des<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDes</span><span class="token punctuation">(</span><span class="token class-name">String</span> des<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>des <span class="token operator">=</span> des<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//组合对象</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">University</span> <span class="token keyword">extends</span> <span class="token class-name">OrganizationComponent</span><span class="token punctuation">{</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrganizationComponent</span><span class="token punctuation">&gt;</span></span> organizationComponents<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">University</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> des<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> des<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">OrganizationComponent</span> organizationComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        organizationComponents<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>organizationComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">OrganizationComponent</span> organizationComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        organizationComponents<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>organizationComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//print()方法就是输出University包含的学院</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=========="</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"=========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//打印出</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">OrganizationComponent</span> organizationComponent <span class="token operator">:</span> organizationComponents<span class="token punctuation">)</span> <span class="token punctuation">{</span>            organizationComponent<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//组合对象</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Collage</span> <span class="token keyword">extends</span> <span class="token class-name">OrganizationComponent</span><span class="token punctuation">{</span>    <span class="token comment">//这个list中存放的是Department</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrganizationComponent</span><span class="token punctuation">&gt;</span></span> organizationComponents<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Collage</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> des<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> des<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">OrganizationComponent</span> organizationComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        organizationComponents<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>organizationComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">OrganizationComponent</span> organizationComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        organizationComponents<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>organizationComponent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//print()方法就是输出University包含的学院</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=========="</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"=========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//打印出</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">OrganizationComponent</span> organizationComponent <span class="token operator">:</span> organizationComponents<span class="token punctuation">)</span> <span class="token punctuation">{</span>            organizationComponent<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//叶子节点</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Department</span> <span class="token keyword">extends</span> <span class="token class-name">OrganizationComponent</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">Department</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> des<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> des<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getDes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行程序</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//从大到小创建对象</span>        <span class="token class-name">OrganizationComponent</span> university <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">University</span><span class="token punctuation">(</span><span class="token string">"湖南工厂学院"</span><span class="token punctuation">,</span> <span class="token string">"学校"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">OrganizationComponent</span> collage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Collage</span><span class="token punctuation">(</span><span class="token string">"计算机学院"</span><span class="token punctuation">,</span> <span class="token string">"计算机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">OrganizationComponent</span> collage1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Collage</span><span class="token punctuation">(</span><span class="token string">"化学学院"</span><span class="token punctuation">,</span> <span class="token string">"化学"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">OrganizationComponent</span> collage2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Collage</span><span class="token punctuation">(</span><span class="token string">"数学学院"</span><span class="token punctuation">,</span> <span class="token string">"数学"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collage<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span><span class="token string">"软件工程"</span><span class="token punctuation">,</span> <span class="token string">"软工"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collage<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span><span class="token string">"计算机科学与技术"</span><span class="token punctuation">,</span> <span class="token string">"码农"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collage<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span><span class="token string">"计算机网络"</span><span class="token punctuation">,</span> <span class="token string">"网工"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        university<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>collage<span class="token punctuation">)</span><span class="token punctuation">;</span>        university<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>collage1<span class="token punctuation">)</span><span class="token punctuation">;</span>        university<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>collage2<span class="token punctuation">)</span><span class="token punctuation">;</span>        university<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">==========湖南工厂学院====================计算机学院==========软件工程计算机科学与技术计算机网络==========化学学院====================数学学院==========<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h3><ul><li><p>外观模式对外屏蔽了子系统的细节，因此外观模式降低了客户端对子系统的使用的复杂性</p></li><li><p>外观模式对客户端与子系统之间的耦合关系，让子系统内部更易维护和扩展</p></li><li><p>通过合理的使用外观模式，可以帮我们更好的划分访问的层次</p></li><li><p>当系统需要分层设计时，可以考虑使用外观模式</p></li><li><p>在维护一个遗留的大系统时，可能这个系统已经变得非常难以维护和扩展，此时可以考虑为新系统开发一个外观类，来提供遗留系统的比较清晰简单的接口，让新系统与外观类交互，提高复用性</p></li><li><p>不能过多的或者不合理的使用外观模式，使用外观模式好，还是直接调用模块好，要以让系统更加有层次，有利于维护为目的</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 子系统A</span><span class="token keyword">class</span> <span class="token class-name">SystemA</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operationA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SystemA operation"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 子系统B</span><span class="token keyword">class</span> <span class="token class-name">SystemB</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operationB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"SystemB operation"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 外观类</span><span class="token keyword">class</span> <span class="token class-name">Facade</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">SystemA</span> systemA<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">SystemB</span> systemB<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Facade</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        systemA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SystemA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        systemB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SystemB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        systemA<span class="token punctuation">.</span><span class="token function">operationA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        systemB<span class="token punctuation">.</span><span class="token function">operationB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 客户端</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Facade</span> facade <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Facade</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        facade<span class="token punctuation">.</span><span class="token function">operate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述示例中，<code>SystemA</code> 和 <code>SystemB</code> 是两个复杂的子系统，客户端需要了解内部实现才能操作。而 <code>Facade</code> 类则是一个外观，封装了 <code>SystemA</code> 和 <code>SystemB</code> 的操作，在客户端调用时只需要操作 <code>Facade</code> 类，无需关心内部细节。这种设计能够提高代码的灵活性和可维护性，同时也能提高客户端的操作便捷性</p></li></ul><h3 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h3><ul><li><p>享表示共享，元表示对象</p></li><li><p>系统中有大量对象，这些对象消耗大量内存，并且对象的状态大部分可以外部化时，我们就可以考虑选用享元模式</p></li><li><p>用唯一标识码判断，如果在内存中有，则返回这个唯一的标识码标识的对象，用HashMap存储</p></li><li><p>享元模式提高了系统的复杂度，需要分离出内部状态和外部状态而外部状态具有固化特性，不应该随着内部状态的改变而改变，这是我们使用享元模式需要注意的地方</p></li><li><p>使用享元模式时，注意划分内部状态和外部状态，并且需要有一个工厂内加以控制</p></li><li><p>享元模式经典的应用场景是需要使用到缓冲池的场景，比如String常量池，数据库连接池。</p></li><li><p>享元模式是一种结构型设计模式，它的主要目的是通过分享对象来尽量减少内存使用量。享元模式将一个对象分成两个部分：内部状态（Intrinsic State）和外部状态（Extrinsic State）。</p><p>内部状态指的是对象的一些固有属性，这些属性可以在对象被创建时进行初始化，一旦初始化后就不会发生改变。因此，所有实例间内部状态相同的对象可以共享同一个存储位置，而不需要每个对象都创建一个存储位置。</p><p>外部状态指的是对象的一些变化属性，这些属性可能在对象创建后会发生改变。因此，不同实例之间的外部状态是不同的，不能共享同一个存储位置。在使用享元模式时，需要将这些外部状态从对象中拆分出来，并作为参数传递给对象的操作方法。</p><p>以围棋游戏为例，棋子的内部状态是其颜色（黑色或白色），而外部状态指的是其位置。在使用享元模式时，可以将所有颜色相同的棋子共享同一个对象，因为它们的内部状态相同，而将不同位置的棋子作为外部状态传递给棋子的操作方法。这样可以大大减少内存使用量。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">WebSite</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">use</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteWebSite</span> <span class="token keyword">extends</span> <span class="token class-name">WebSite</span><span class="token punctuation">{</span>    <span class="token comment">//共享的部分，内部状态</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> type<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span><span class="token comment">//网站发布的类型</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">use</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"网站的发布形式为"</span><span class="token operator">+</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用者"</span><span class="token operator">+</span>user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">ConcreteWebSite</span><span class="token punctuation">(</span><span class="token class-name">String</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSiteFactory</span> <span class="token punctuation">{</span>    <span class="token comment">//集合，充当池的作用</span>    <span class="token keyword">private</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">ConcreteWebSite</span><span class="token punctuation">&gt;</span></span> pool<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//根据网站的类型返回一个网站，如果没有就创建就创建一个网站并放入到池中，并返回</span>    <span class="token keyword">public</span> <span class="token class-name">WebSite</span> <span class="token function">getWebSiteCategory</span><span class="token punctuation">(</span><span class="token class-name">String</span> type<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pool<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//创建一个</span>            pool<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">ConcreteWebSite</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">WebSite</span><span class="token punctuation">)</span> pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//获取网站分类总数</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getWebSiteCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> pool<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//享元模式的外部状态</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> username<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//创建一个工厂类</span>        <span class="token class-name">WebSiteFactory</span> webSiteFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSiteFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//客户要一个以新闻形式发布的网站</span>        <span class="token class-name">WebSite</span> web1 <span class="token operator">=</span> webSiteFactory<span class="token punctuation">.</span><span class="token function">getWebSiteCategory</span><span class="token punctuation">(</span><span class="token string">"news"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        web1<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"cxk"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">WebSite</span> web2<span class="token operator">=</span> webSiteFactory<span class="token punctuation">.</span><span class="token function">getWebSiteCategory</span><span class="token punctuation">(</span><span class="token string">"news"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        web1<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"cxk2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">WebSite</span> web3 <span class="token operator">=</span> webSiteFactory<span class="token punctuation">.</span><span class="token function">getWebSiteCategory</span><span class="token punctuation">(</span><span class="token string">"news"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        web1<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"cxk3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">WebSite</span> web4 <span class="token operator">=</span> webSiteFactory<span class="token punctuation">.</span><span class="token function">getWebSiteCategory</span><span class="token punctuation">(</span><span class="token string">"news"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        web1<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"cxk4"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取webSite大小</span>        <span class="token keyword">int</span> webSiteCount <span class="token operator">=</span> webSiteFactory<span class="token punctuation">.</span><span class="token function">getWebSiteCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"webSiteCount = "</span> <span class="token operator">+</span> webSiteCount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-\" data-language="\"><code class="language-\">网站的发布形式为news使用者cxk网站的发布形式为news使用者cxk2网站的发布形式为news使用者cxk3网站的发布形式为news使用者cxk4webSiteCount = 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><h4 id="静态代理模式"><a href="#静态代理模式" class="headerlink" title="静态代理模式"></a>静态代理模式</h4><ul><li><p>静态代理是指定义一个代理类去代理一个真实类，使得调用者在使用时无需知道真实类的存在，代理类会在调用真实类方法前后加上一些额外的逻辑处理。</p></li><li><p>静态代理需要针对每个被代理类单独写一个代理类，即使代理逻辑相同，每次都需要重复写代理类，不利于维护和扩展。</p></li><li><p>例如，假设有一个接口 IUserService，定义了一个方法 saveUser，真实类 UserServiceImpl 实现了该接口，我们可以定义一个代理类 UserServiceProxy 去代理 UserServiceImpl，并在代理类中加上一些额外的逻辑，如记录日志、检验参数等，代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IUserService</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">saveUser</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> pwd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IUserService</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveUser</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> pwd<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 真正的业务逻辑</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceProxy</span> <span class="token keyword">implements</span> <span class="token class-name">IUserService</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">IUserService</span> userService<span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token class-name">UserServiceProxy</span><span class="token punctuation">(</span><span class="token class-name">IUserService</span> userService<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userService <span class="token operator">=</span> userService<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveUser</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> pwd<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"保存用户前检验参数..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userService<span class="token punctuation">.</span><span class="token function">saveUser</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> pwd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"保存用户后记录日志..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用时，我们先创建真实类 UserServiceImpl 的实例，再创建代理类 UserServiceProxy 的实例，将真实类实例传入代理类构造方法中，最后调用代理类的 saveUser 方法，代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">IUserService</span> userServiceImpl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">IUserService</span> userServiceProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserServiceProxy</span><span class="token punctuation">(</span>userServiceImpl<span class="token punctuation">)</span><span class="token punctuation">;</span>userServiceProxy<span class="token punctuation">.</span><span class="token function">saveUser</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">保存用户前检验参数<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>保存用户<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>保存用户后记录日志<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看到，调用代理类的 saveUser 方法时，代理类会在调用真实类方法前后加上一些额外的逻辑处理，达到了代理的目的。</p></li></ul><h4 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h4><ul><li><p>相比较于静态代理需要手动编写代理类，JDK动态代理可以在运行时动态生成代理类，不需要手写代理类。JDK动态代理需要有一个接口来声明代理类，所以只能代理有接口的真实类，不能代理没有接口的类。</p></li><li><p>JDK动态代理的核心类是 java.lang.reflect.Proxy，它提供了一个静态工厂方法 newProxyInstance，用来创建代理类对象。newProxyInstance 方法需要传入三个参数，分别为：类加载器、代理类需要实现的接口数组、指定的 InvocationHandler 对象。</p></li><li><p>InvocationHandler 接口中只有一个方法 invoke，该方法会在代理类调用任意方法时被回调，我们可以在该方法中对真实类方法的调用进行拦截和增强处理。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ITeacherDao</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TeacherDao</span> <span class="token keyword">implements</span> <span class="token class-name">ITeacherDao</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"老师正在授课中......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyFactory</span> <span class="token punctuation">{</span>    <span class="token comment">//维护一个目标对象，Object</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span> target<span class="token punctuation">;</span>    <span class="token comment">//通过构造器传入目标对象，初始化</span>    <span class="token keyword">public</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">(</span><span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//给目标对象生成一个代理对象</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getProxyInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">/**         * public static Object newProxyInstance(ClassLoader loader,         *                 Class&lt;?&gt;[] interfaces,         *                 InvocationHandler h)         * 1 ClassLoader loader:指当前目标对象使用的类加载器，获取加载器的方法固定         * 2 Class&lt;&gt;() interface:目标对象实现的接口，使用泛型方法确认实现         * 3 InvocationHandler h:事件处理器，执行目标方法时，会触发事情处理器方法         * 会把当前执行的目标对象方法作为一个参数传入         */</span>        <span class="token keyword">return</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==&gt;JDK代理&lt;=="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//反射调用目标对象的方法</span>                        <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//创建目标对象</span>        <span class="token class-name">ITeacherDao</span> teacherDao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TeacherDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//给目标对象创建代理对象</span>        <span class="token class-name">ProxyFactory</span> proxyFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">(</span>teacherDao<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ITeacherDao</span> proxyInstance <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ITeacherDao</span><span class="token punctuation">)</span>proxyFactory<span class="token punctuation">.</span><span class="token function">getProxyInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxyInstance<span class="token punctuation">.</span><span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">==&gt;JDK代理&lt;==老师正在授课中......<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h4 id="Cglib动态代理"><a href="#Cglib动态代理" class="headerlink" title="Cglib动态代理"></a>Cglib动态代理</h4><p>​优点</p><ul><li>相对于 JDK 动态代理，它可以代理没有实现接口的类。</li><li>生成的代理类是目标对象的子类，因此可以重写目标对象的方法，实现代理逻辑。</li><li>CGLIB 库性能比 JDK 动态代理高，因为它使用字节码生成技术直接对目标对象进行操作，而不是通过反射调用目标方法。</li></ul><p>​    缺点</p><ul><li><p>由于 CGLIB 是直接操作字节码生成代理类，因此可能会有一些类加载方面的问题。</p></li><li><p>由于它是生成子类来实现代理，因此如果目标类被final关键字修饰，CGLIB就无法对其进行代理，会导致代理失败的情况。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TeacherDao</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Cglib代理，不需要实现接口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyFactory</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span><span class="token punctuation">{</span>    <span class="token comment">//维护一个目标对象</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span> target<span class="token punctuation">;</span>    <span class="token comment">//传入一个被代理的对象</span>    <span class="token keyword">public</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">(</span><span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//返回一个代理对象，目标对象的代理对象</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getProxyInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//创建一个工具类</span>        <span class="token class-name">Enhancer</span> enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置父类</span>        enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置回调函数</span>        enhancer<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建子类对象，即代理对象</span>        <span class="token keyword">return</span> enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// intercept()会调用目标对象的方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token class-name">MethodProxy</span> methodProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Cglib代理模式开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> invoke <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Cglib代理提交"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> invoke<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//创建目标对象</span>        <span class="token class-name">TeacherDao</span> teacherDao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TeacherDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取代理对象，将目标对象传递给代理对象</span>        <span class="token class-name">ProxyFactory</span> proxyFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">(</span>teacherDao<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TeacherDao</span> proxyInstance <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TeacherDao</span><span class="token punctuation">)</span>proxyFactory<span class="token punctuation">.</span><span class="token function">getProxyInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//执行代理对象的方法，触发intercept()方法从而实现对目标对象的调用</span>        proxyInstance<span class="token punctuation">.</span><span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h3><ul><li><p>模板方法模式是一种设计模式，可以让程序员通过定义一些基本算法的步骤，来约束程序员在这些步骤上完成操作。这种模式既不会改变已有的算法步骤，也不会另外编写新的算法，只要在基本算法的步骤上进行扩展就可以了。常常用于处理需要按照一定步骤进行处理的问题。</p></li><li><p>模板方法模式包含以下角色：</p><ul><li>抽象模板（Abstract Template）类： 定义了模板方法和一些抽象方法，这些抽象方法由子类来实现。</li><li>具体模板（Concrete Template）类： 实现了抽象模板类中定义的抽象方法，完成模板方法中的各个步骤。</li><li>客户端（Client）类： 调用模板方法来完成具体的业务逻辑。</li></ul></li><li><p>模板方法模式优点：</p><ol><li>算法骨架是固定的，易于控制和管理；</li><li>扩展性好，具体的实现可以在子类中定义；</li><li>符合开闭原则，代码在使用过程中可以扩展，但不需要修改。</li></ol></li><li><p>模板方法模式缺点：</p><ol><li>模板方法中定义的步骤是固定的，不够灵活。</li><li>如果具体实现类过多，会导致子类数量过于庞大，导致系统复杂度的提高。</li></ol><p>抽象模板</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">SoyaMilk</span> <span class="token punctuation">{</span>    <span class="token comment">//模板方法，make 模板方法可以做成final，不让子类去覆盖</span>    <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addCondiment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">soak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">beat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//选材料</span>    <span class="token keyword">void</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1选好材料--新鲜黄豆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//添加不同的配料，抽象方法</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">addCondiment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//浸泡</span>    <span class="token keyword">void</span> <span class="token function">soak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"3黄豆和材料开始浸泡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">beat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"4黄豆和配料放入豆浆机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体模板</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedBeanSoyamilk</span> <span class="token keyword">extends</span> <span class="token class-name">SoyaMilk</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">addCondiment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"加入上好的红豆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PeanutSoyaMilk</span> <span class="token keyword">extends</span> <span class="token class-name">SoyaMilk</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">addCondiment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"加入上好的花生"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>客户端</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//制作红豆豆浆</span>        <span class="token class-name">SoyaMilk</span> redBeanSoyamilk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedBeanSoyamilk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redBeanSoyamilk<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"====="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SoyaMilk</span> peanutSoyaMilk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PeanutSoyaMilk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        peanutSoyaMilk<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>也可以引入钩子函数，它默认不做任何事情，子类可以视情况要不要覆盖</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">SoyaMilk</span> <span class="token punctuation">{</span>    <span class="token comment">//模板方法，make 模板方法可以做成final，不让子类去覆盖</span>    <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">customWant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">addCondiment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">soak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">beat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//选材料</span>    <span class="token keyword">void</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1选好材料--新鲜黄豆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//添加不同的配料，抽象方法</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">addCondiment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//浸泡</span>    <span class="token keyword">void</span> <span class="token function">soak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"3黄豆和材料开始浸泡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">beat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"4黄豆和配料放入豆浆机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//钩子方法，决定是否需要添加配料</span>    <span class="token keyword">boolean</span> <span class="token function">customWant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PureSoyaMilk</span> <span class="token keyword">extends</span> <span class="token class-name">SoyaMilk</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">addCondiment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//空实现</span>    <span class="token punctuation">}</span>    <span class="token comment">//不需要配料 实现钩子方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">boolean</span> <span class="token function">customWant</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><ul><li><p>命令模式是一种行为型设计模式，它将一个请求封装为一个对象，使得请求的发送者和接收者分别独立，且可随时增加新的请求。该模式分为四个角色：抽象命令、具体命令、调用者和接收者。抽象命令类定义了一个抽象的接口，具体命令类实现了抽象命令，并封装了一个或多个接收者，调用者负责调用具体命令来执行请求。</p></li><li><p>命令模式优点：</p><ol><li>解耦请求的发送者和接收者，降低了耦合度；</li><li>可以轻松添加新的命令，符合开闭原则；</li><li>可以将命令排队，实现请求的批处理、撤销和重做等操作。</li></ol></li><li><p>命令模式缺点：</p><ol><li>每个具体命令类都需要定义一个接收者，导致类的数量增加；</li><li>命令的执行时间和执行顺序不易控制。</li></ol></li><li><p>应用场景：</p><ol><li>系统需要将请求调用者和请求接收者解耦，使得调用者和接收者不直接交互；</li><li>系统需要支持命令的撤销(Undo)和恢复(Redo)操作；</li><li>系统需要支持命令的排队、记录日志、多次执行等功能。</li></ol></li><li><p>例如，电灯遥控器使用了命令模式。用户按下遥控器上的按钮时，遥控器会发送一个对应的命令到电灯控制器，控制器会将命令封装为一个对象，并将其送到电灯上执行。这样，在每个命令对象中，封装了具体的操作和接受者对象，从而实现了请求发送者和接收者之间的解耦。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//创建命令接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>    <span class="token comment">//执行操作</span>    <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//撤销操作</span>    <span class="token keyword">void</span> <span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LightOffCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>    <span class="token comment">//聚合 LightReceiver</span>    <span class="token class-name">LightReceiver</span> light<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">LightOffCommand</span><span class="token punctuation">(</span><span class="token class-name">LightReceiver</span> light<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>light <span class="token operator">=</span> light<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//调用接收者方法</span>        light<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        light<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LightOnCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span><span class="token punctuation">{</span>    <span class="token comment">//聚合 LightReceiver</span>    <span class="token class-name">LightReceiver</span> light<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">LightOnCommand</span><span class="token punctuation">(</span><span class="token class-name">LightReceiver</span> light<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>light <span class="token operator">=</span> light<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//调用接收者方法</span>        light<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        light<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//空执行 用于初始化每个按钮，当调用空命令时，对象什么都不做，</span><span class="token comment">// 这也是一种设计模式，可以省掉对空的判断</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NoCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//命令执行对象（接收者）</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LightReceiver</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"电灯打开了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"电灯关闭了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RemoteController</span> <span class="token punctuation">{</span>    <span class="token comment">//开按钮的命令数组</span>    <span class="token class-name">Command</span><span class="token punctuation">[</span><span class="token punctuation">]</span> onCommands<span class="token punctuation">;</span>    <span class="token comment">//关按钮的命令数组</span>    <span class="token class-name">Command</span><span class="token punctuation">[</span><span class="token punctuation">]</span> offCommands<span class="token punctuation">;</span>    <span class="token comment">//执行撤销的命令</span>    <span class="token class-name">Command</span> undoCommand<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">RemoteController</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        onCommands<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Command</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        offCommands<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Command</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//使用空命令进行初始化</span>            onCommands<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NoCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            offCommands<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NoCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//给我们的按钮设置需要的命令</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCommands</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">,</span><span class="token class-name">Command</span> onCommand<span class="token punctuation">,</span><span class="token class-name">Command</span> offCommand<span class="token punctuation">)</span><span class="token punctuation">{</span>        onCommands<span class="token punctuation">[</span>no<span class="token punctuation">]</span><span class="token operator">=</span>onCommand<span class="token punctuation">;</span>        offCommands<span class="token punctuation">[</span>no<span class="token punctuation">]</span><span class="token operator">=</span>offCommand<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//按下开的按钮</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onButtonWasPushed</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//找到你按开的按钮，调用对应方法</span>        onCommands<span class="token punctuation">[</span>no<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//记录本次操作，用于撤销</span>        undoCommand<span class="token operator">=</span>onCommands<span class="token punctuation">[</span>no<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//按下关的按钮</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">offButtonWasPushed</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//找到你按开的按钮，调用对应方法</span>        offCommands<span class="token punctuation">[</span>no<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//记录本次操作，用于撤销</span>        undoCommand<span class="token operator">=</span>offCommands<span class="token punctuation">[</span>no<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//按下撤销的按钮</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">undoButtonWasPushed</span><span class="token punctuation">(</span><span class="token keyword">int</span> no<span class="token punctuation">)</span><span class="token punctuation">{</span>      undoCommand<span class="token punctuation">.</span><span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//使用命令设计模式，完成通过遥控器对电灯的操作</span>        <span class="token comment">//创建电灯的对象（接收者）</span>        <span class="token class-name">LightReceiver</span> lightReceiver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LightReceiver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建电灯相关的开关命令</span>        <span class="token class-name">LightOnCommand</span> lightOnCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LightOnCommand</span><span class="token punctuation">(</span>lightReceiver<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">LightOffCommand</span> lightOffCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LightOffCommand</span><span class="token punctuation">(</span>lightReceiver<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//需要一个遥控器</span>        <span class="token class-name">RemoteController</span> remoteController <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RemoteController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//给遥控器设置相关命令，比如no=0是电灯的开和关操作</span>        remoteController<span class="token punctuation">.</span><span class="token function">setCommands</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>lightOnCommand<span class="token punctuation">,</span>lightOffCommand<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//按下开灯</span>        remoteController<span class="token punctuation">.</span><span class="token function">onButtonWasPushed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//按下关灯</span>        remoteController<span class="token punctuation">.</span><span class="token function">offButtonWasPushed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//按下撤销</span>        remoteController<span class="token punctuation">.</span><span class="token function">undoButtonWasPushed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h3><ul><li>访问者模式是在一个程序中对于某个特定的数据结构中的所有元素进行操作，而这些操作可以被独立地改变而不需要改变这些元素的类。简单来说，就是把操作和数据分离，让操作可以独立地变化。在该模式中，数据结构提供一个接受访问者对象的方法，让访问者来处理数据结构中的元素。而访问者则会针对不同类型的元素，执行不同的操作。这样可以方便地增加新的操作，而不用修改已有的类。</li><li>组成<ul><li>Element：元素抽象类，定义了一个接受访问者的方法accept，这个方法接收一个访问者作为参数，让访问者处理这个元素。</li><li>Visitor：访问者抽象类，定义了一系列访问ConcreteElementA和ConcreteElementB的方法。这些方法参数中都包含了具体的元素对象，这样访问者就可以针对不同的元素对象做出不同的操作。</li><li>在实际的实现中，可能还会有一个ObjectStructure类来存储所有的元素对象，Visitor对象则在访问ObjectStructure的过程中，对其中的元素对象进行处理。但这并不是访问者模式的必要组成部分，可以根据实际情况来决定是否需要添加。</li></ul></li></ul><p>访问者模式的优点：</p><ul><li>增加新的操作方法很容易，只需要实现一个新的访问者即可，不需要修改元素类或已有的访问者。</li><li>将数据结构和处理逻辑分离开来，符合单一职责原则。</li><li>可以对原有的数据结构进行访问控制，只允许访问者访问特定的元素。</li></ul><p>访问者模式的缺点：</p><ul><li><p>增加新元素类型很困难，需要在所有访问者中添加相应的处理方法。</p></li><li><p>增加新的访问者会导致访问者类的数量增加，系统更加复杂。</p></li><li><p>访问者访问元素时，它们之间的关系是没有封装的，这可能会导致元素被破坏。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//元素抽象类</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token comment">//通过一个方法让访问者可以访问</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">Action</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Man</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">Action</span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>        action<span class="token punctuation">.</span><span class="token function">getManResult</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//这里我们使用到了双分派，即首先在客户端程序中，</span><span class="token comment">// 将具体的状态作为参数传递到了Woman中完成了一次分派</span><span class="token comment">// 然后Woman这个类里面调用了作为参数的具体方法中的方法getWomanResult</span><span class="token comment">//同时将自己this作为参数传入，2完成第二次的分派</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Woman</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token comment">//接受action</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">Action</span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//把自己传进去</span>        action<span class="token punctuation">.</span><span class="token function">getWomanResult</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问抽象类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Action</span> <span class="token punctuation">{</span>    <span class="token comment">//得到男性的测评结果</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">getManResult</span><span class="token punctuation">(</span><span class="token class-name">Man</span> man<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//得到女性的测评结果</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">getWomanResult</span><span class="token punctuation">(</span><span class="token class-name">Woman</span> man<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Fail</span> <span class="token keyword">extends</span> <span class="token class-name">Action</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getManResult</span><span class="token punctuation">(</span><span class="token class-name">Man</span> man<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"男人给的评价是该回家了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getWomanResult</span><span class="token punctuation">(</span><span class="token class-name">Woman</span> man<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"女人给的评价是该回家了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Success</span> <span class="token keyword">extends</span> <span class="token class-name">Action</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getManResult</span><span class="token punctuation">(</span><span class="token class-name">Man</span> man<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"男人给的评价是成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getWomanResult</span><span class="token punctuation">(</span><span class="token class-name">Woman</span> man<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"女人给的评价是很成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Wait</span> <span class="token keyword">extends</span> <span class="token class-name">Action</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getManResult</span><span class="token punctuation">(</span><span class="token class-name">Man</span> man<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"男人表示回家等消息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getWomanResult</span><span class="token punctuation">(</span><span class="token class-name">Woman</span> man<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"女人表示回家等消息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数据结构</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//数据结构，管理很多人</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ObjectStructure</span> <span class="token punctuation">{</span>    <span class="token comment">//维护一个集合</span>    <span class="token keyword">private</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> persons<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//增加到list</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attach</span><span class="token punctuation">(</span><span class="token class-name">Person</span> person<span class="token punctuation">)</span> <span class="token punctuation">{</span>        persons<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//移除</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">detach</span><span class="token punctuation">(</span><span class="token class-name">Person</span> person<span class="token punctuation">)</span> <span class="token punctuation">{</span>        persons<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//显示测评情况</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token class-name">Action</span> action<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Person</span> person <span class="token operator">:</span> persons<span class="token punctuation">)</span> <span class="token punctuation">{</span>            person<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>客户端</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//创建ObjectStructure</span>        <span class="token class-name">ObjectStructure</span> objectStructure <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectStructure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectStructure<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Fail</span> fail <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//查看当前结果</span>        objectStructure<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span>fail<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;==&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectStructure<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Success</span> success <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectStructure<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span>success<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;==&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Wait</span> wait <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectStructure<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Woman</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectStructure<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span>wait<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行结果</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">男人给的评价是该回家了<span class="token operator">&lt;=</span><span class="token operator">=</span><span class="token operator">&gt;</span>男人给的评价是成功男人给的评价是成功<span class="token operator">&lt;=</span><span class="token operator">=</span><span class="token operator">&gt;</span>男人表示回家等消息男人表示回家等消息女人表示回家等消息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类图</p><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/image-20230414220916979.png"></p></li></ul><h3 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h3><ul><li><p>迭代器模式（Iterator Pattern）是一种行为型设计模式，它提供了一种方法，可以顺序地访问一个聚合对象（如列表、树形结构等）中各个元素，而不必暴露该对象的内部表示。</p></li><li><p>在迭代器模式中，一般有两个关键角色：迭代器和聚合对象。</p></li><li><p>迭代器是一个遍历聚合对象的接口，具有 hasNext() 方法和 next() 方法。hasNext() 用于判断是否还有下一个元素，next() 用于取出下一个元素。</p></li><li><p>聚合对象是一个类或接口，它具有一个或多个方法，可以返回一个实现了迭代器接口的对象。这个迭代器对象可以用来遍历聚合对象中的元素。</p></li><li><p>迭代器模式的优点：</p><ul><li><p>可以遍历不同类型的聚合对象，而无需知道其内部结构，使得遍历算法与聚合对象解耦。</p></li><li><p>简化了遍历过程，使得代码更加简洁，对于复杂聚合对象的遍历尤为有效。</p></li></ul></li><li><p>迭代器模式的缺点：</p><ul><li><p>增加了新的聚合类和迭代器类，增加了系统的复杂度。</p></li><li><p>在遍历过程中，如果聚合对象发生了修改，可能会导致迭代器失效。</p></li></ul></li><li><p>迭代器模式适用于需要对聚合对象进行遍历操作的场景，例如需要对一个列表、树形结构、图形结构等数据结构进行遍历操作。迭代器模式可以将遍历算法和聚合对象分离开来，使得聚合对象可以进行任何修改，而不影响遍历算法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Department</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> description<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//学院</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">College</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//增加系的方法</span>    <span class="token keyword">void</span> <span class="token function">addDepartment</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//返回一个迭代器遍历</span>    <span class="token class-name">Iterator</span> <span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>学院</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ComputerCollege</span> <span class="token keyword">implements</span> <span class="token class-name">College</span><span class="token punctuation">{</span>    <span class="token class-name">Department</span><span class="token punctuation">[</span><span class="token punctuation">]</span> departments<span class="token punctuation">;</span>    <span class="token keyword">int</span> numOfDepartment<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//保存当前数组的对象个数</span>    <span class="token keyword">public</span> <span class="token class-name">ComputerCollege</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        departments<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">addDepartment</span><span class="token punctuation">(</span><span class="token string">"JAVA"</span><span class="token punctuation">,</span><span class="token string">"咖啡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addDepartment</span><span class="token punctuation">(</span><span class="token string">"Python"</span><span class="token punctuation">,</span><span class="token string">"蟒蛇"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addDepartment</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">,</span><span class="token string">"语言"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"计算机学院"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addDepartment</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">)</span> <span class="token punctuation">{</span>       departments<span class="token punctuation">[</span>numOfDepartment<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> desc<span class="token punctuation">)</span><span class="token punctuation">;</span>       numOfDepartment<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Iterator</span> <span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ComputerCollageIterator</span><span class="token punctuation">(</span>departments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InfoCollage</span> <span class="token keyword">implements</span> <span class="token class-name">College</span><span class="token punctuation">{</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Department</span><span class="token punctuation">&gt;</span></span> departments<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">InfoCollage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>departments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Department</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addDepartment</span><span class="token punctuation">(</span><span class="token string">"信息安全"</span><span class="token punctuation">,</span><span class="token string">"安全"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addDepartment</span><span class="token punctuation">(</span><span class="token string">"信息加密"</span><span class="token punctuation">,</span><span class="token string">"加密"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addDepartment</span><span class="token punctuation">(</span><span class="token string">"信息盗取"</span><span class="token punctuation">,</span><span class="token string">"开盒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"信息工程学院"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addDepartment</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">)</span> <span class="token punctuation">{</span>        departments<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> desc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Iterator</span> <span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">InfoCollageIterator</span><span class="token punctuation">(</span>departments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>迭代器</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ComputerCollageIterator</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span> <span class="token punctuation">{</span>    <span class="token comment">//这里我们需要Department是以怎样的方式存放</span>    <span class="token class-name">Department</span><span class="token punctuation">[</span><span class="token punctuation">]</span> departments<span class="token punctuation">;</span>    <span class="token keyword">int</span> position<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//遍历的位置</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//判断是否还有下一个元素</span>        <span class="token keyword">return</span> position <span class="token operator">&lt;</span> departments<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> departments<span class="token punctuation">[</span>position<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> departments<span class="token punctuation">[</span>position<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//删除的方法默认空实现</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span>  <span class="token class-name">ComputerCollageIterator</span><span class="token punctuation">(</span><span class="token class-name">Department</span><span class="token punctuation">[</span><span class="token punctuation">]</span> departments<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>departments <span class="token operator">=</span> departments<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InfoCollageIterator</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span> <span class="token punctuation">{</span>    <span class="token comment">//信息工程学院是以list存放系的</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Department</span><span class="token punctuation">&gt;</span></span> departments <span class="token punctuation">;</span>    <span class="token keyword">int</span> index<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">InfoCollageIterator</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Department</span><span class="token punctuation">&gt;</span></span> departments<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>departments <span class="token operator">=</span> departments<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//判断集合还有没有下一个元素</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;=</span>departments<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            index<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> departments<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//空实现remove</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>客户端</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OutPutImpl</span> <span class="token punctuation">{</span>    <span class="token comment">//获取学院集合</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">College</span><span class="token punctuation">&gt;</span></span> collegeList<span class="token punctuation">;</span>    <span class="token comment">//需要一个构造器</span>    <span class="token keyword">public</span> <span class="token class-name">OutPutImpl</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">College</span><span class="token punctuation">&gt;</span></span> collegeList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>collegeList <span class="token operator">=</span> collegeList<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//遍历所有的学院,输出各个学院的系</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printCollage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//从collageList取出所有的学院 java中的list已经实现了Iterator接口</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">College</span> college <span class="token operator">:</span> collegeList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//取出一个学院</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学院名称==&gt;"</span> <span class="token operator">+</span> college<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//取出学院的Iterator</span>            <span class="token class-name">Iterator</span> collegeIterator <span class="token operator">=</span> college<span class="token punctuation">.</span><span class="token function">createIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printDepartment</span><span class="token punctuation">(</span>collegeIterator<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//输出，学院输出系</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printDepartment</span><span class="token punctuation">(</span><span class="token class-name">Iterator</span> iterator<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">Department</span> department<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">Department</span><span class="token punctuation">)</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"系名称==&gt;"</span><span class="token operator">+</span>department<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//创建学院</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">College</span><span class="token punctuation">&gt;</span></span> collegeList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ComputerCollege</span> computerCollege <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComputerCollege</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">InfoCollage</span> infoCollage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InfoCollage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        collegeList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>computerCollege<span class="token punctuation">)</span><span class="token punctuation">;</span>        collegeList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>infoCollage<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">OutPutImpl</span> outPut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutPutImpl</span><span class="token punctuation">(</span>collegeList<span class="token punctuation">)</span><span class="token punctuation">;</span>        outPut<span class="token punctuation">.</span><span class="token function">printCollage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类图</p><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/ComputerCollege.png"></p></li></ul><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><ul><li><p>让多个对象可以观察一个对象，并在该对象发生更改时获取通知并做出响应。类似于我们订阅了某个YouTube频道，每当该频道发布新视频时，我们就会收到通知并可以在时间合适的情况下观看视频。在观察者模式中，主要包含两种角色：观察者和被观察者。被观察者负责发布通知，同时也可以添加和删除观察者。观察者则负责接收通知，并在需要时做出响应。该模式可以帮助我们实现松耦合的代码架构，有效地提高代码的可扩展性和灵活性。</p></li><li><p>观察者模式的优点</p><ul><li>它可以将主题与观察者解耦，使得主题与观察者可以独立的变化。此外，观察者模式可以很容易的添加或删除观察者，而不需要修改主题的代码。</li></ul></li><li><p>观察者模式的缺点</p><ul><li>当观察者太多时，通知所有观察者可能会导致性能问题。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//被观察者接口，需要让WeatherData实现</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">registerObserver</span><span class="token punctuation">(</span><span class="token class-name">Observer</span> observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">removeObserver</span><span class="token punctuation">(</span><span class="token class-name">Observer</span> observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>观察者接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//观察者接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>    <span class="token comment">/**     *     * @param temperature 温度     * @param pressure 气压     * @param humidity 湿度     */</span>    <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">float</span> temperature<span class="token punctuation">,</span><span class="token keyword">float</span> pressure<span class="token punctuation">,</span><span class="token keyword">float</span> humidity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * WeatherData * 包含最新的天气情况信息 * 含有观察者集合使用ArrayList管理 * 当有数据有更新时，就主动调用ArrayList， 通知所有的接入方就看到最新消息 * @author fj * @since 2023/4/15 21:10 */</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeatherData</span> <span class="token keyword">implements</span> <span class="token class-name">Subject</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> temperature<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> pressure<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> humidity<span class="token punctuation">;</span>    <span class="token comment">//观察者集合</span>    <span class="token keyword">private</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Observer</span><span class="token punctuation">&gt;</span></span> observers<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">WeatherData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        observers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Observer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dataChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//调用接入方的update</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//当数据有更新时就调用setData</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setData</span><span class="token punctuation">(</span><span class="token keyword">float</span> temperature<span class="token punctuation">,</span><span class="token keyword">float</span> pressure<span class="token punctuation">,</span><span class="token keyword">float</span> humidity<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>temperature<span class="token operator">=</span>temperature<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pressure<span class="token operator">=</span>pressure<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>humidity<span class="token operator">=</span>humidity<span class="token punctuation">;</span>        <span class="token comment">//调用dataChange将最新的消息推送给接入方currentConditions</span>        <span class="token function">dataChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//注册一个观察者</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerObserver</span><span class="token punctuation">(</span><span class="token class-name">Observer</span> observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        observers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//移除一个观察者</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeObserver</span><span class="token punctuation">(</span><span class="token class-name">Observer</span> observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>observers<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">)</span> observers<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//遍历所有的观察者并通知</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Observer</span> observer <span class="token operator">:</span> observers<span class="token punctuation">)</span><span class="token punctuation">{</span>            observer<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token function">getTemperature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">getPressure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">getHumidity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体观察者</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//观察者</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CurrentConditions</span> <span class="token keyword">implements</span>  <span class="token class-name">Observer</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> temperature<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> pressure<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> humidity<span class="token punctuation">;</span>    <span class="token comment">//更新天气情况由WeatherData 来调用，我使用推送模式</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">float</span> temperature<span class="token punctuation">,</span> <span class="token keyword">float</span> pressure<span class="token punctuation">,</span> <span class="token keyword">float</span> humidity<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>temperature <span class="token operator">=</span> temperature<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pressure <span class="token operator">=</span> pressure<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>humidity <span class="token operator">=</span> humidity<span class="token punctuation">;</span>        <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//显示</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"温度=&gt;"</span><span class="token operator">+</span>temperature<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"压力=&gt;"</span><span class="token operator">+</span>pressure<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"湿度=&gt;"</span><span class="token operator">+</span>humidity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaiduSite</span> <span class="token keyword">implements</span> <span class="token class-name">Observer</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> temperature<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> pressure<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> humidity<span class="token punctuation">;</span>    <span class="token comment">//更新天气情况由WeatherData 来调用，我使用推送模式</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">float</span> temperature<span class="token punctuation">,</span> <span class="token keyword">float</span> pressure<span class="token punctuation">,</span> <span class="token keyword">float</span> humidity<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>temperature <span class="token operator">=</span> temperature<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pressure <span class="token operator">=</span> pressure<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>humidity <span class="token operator">=</span> humidity<span class="token punctuation">;</span>        <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//显示</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"百度温度=&gt;"</span><span class="token operator">+</span>temperature<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"百度压力=&gt;"</span><span class="token operator">+</span>pressure<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"百度湿度=&gt;"</span><span class="token operator">+</span>humidity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>客户端</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//创建一个WeatherData</span>        <span class="token class-name">WeatherData</span> weatherData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeatherData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建观察者</span>        <span class="token class-name">CurrentConditions</span> currentConditions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CurrentConditions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BaiduSite</span> baiduSite <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BaiduSite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        weatherData<span class="token punctuation">.</span><span class="token function">registerObserver</span><span class="token punctuation">(</span>currentConditions<span class="token punctuation">)</span><span class="token punctuation">;</span>        weatherData<span class="token punctuation">.</span><span class="token function">registerObserver</span><span class="token punctuation">(</span>baiduSite<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//测试</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通知各个注册的观察者"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        weatherData<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token number">10f</span><span class="token punctuation">,</span><span class="token number">100f</span><span class="token punctuation">,</span><span class="token number">30.3f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">通知各个注册的观察者温度=&gt;10.0压力=&gt;100.0湿度=&gt;30.3百度温度=&gt;10.0百度压力=&gt;100.0百度湿度=&gt;30.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类图</p><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F.png"></p></li></ul><h3 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h3><ul><li><p>中介者模式是一种行为型设计模式，其目的是通过提供一个中介对象来简化对象之间的通信。在这种模式中，各个对象之间不直接相互交互，而是通过中介对象来进行交互。这使得各个对象之间的关系更加松散，也更容易扩展和修改。</p></li><li><p>中介者模式通常由一个中介对象和多个相关对象组成。中介者对象负责协调相关对象的交互，使它们能够有效地通信。当相关对象发生改变时，中介者对象可以将这些改变转发给其他相关对象，从而保持所有相关对象的状态一致性。</p></li><li><p>中介者模式常用于复杂的系统，尤其是那些对象之间存在大量相互依赖关系的系统中。其优点包括减少对象之间的耦合、提高系统的可复用性和可维护性、代码复杂性降低等。</p><p>中介者接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 定义了中介者接口，其中有一个sendMessage方法用于接收同事对象发送的消息， * 并将消息传递给其他的同事对象。 */</span><span class="token comment">// 中介者接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Mediator</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">,</span> <span class="token class-name">Colleague</span> sender<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>中介者接口的实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 实现了中介者接口， * 其中保存了对所有同事对象的引用。 * 当有同事对象发送消息时， * 根据消息的来源不同将消息传递给不同的同事对象。 */</span><span class="token comment">// 具体中介者类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteMediator</span> <span class="token keyword">implements</span> <span class="token class-name">Mediator</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">ColleagueA</span> colleagueA<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">ColleagueB</span> colleagueB<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setColleagueA</span><span class="token punctuation">(</span><span class="token class-name">ColleagueA</span> colleagueA<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>colleagueA <span class="token operator">=</span> colleagueA<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setColleagueB</span><span class="token punctuation">(</span><span class="token class-name">ColleagueB</span> colleagueB<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>colleagueB <span class="token operator">=</span> colleagueB<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">,</span> <span class="token class-name">Colleague</span> sender<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sender <span class="token operator">==</span> colleagueA<span class="token punctuation">)</span> <span class="token punctuation">{</span>            colleagueB<span class="token punctuation">.</span><span class="token function">receiveMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            colleagueA<span class="token punctuation">.</span><span class="token function">receiveMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同事抽象类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 定义了抽象同事类， * 其中保存了对中介者对象的引用， * 并声明了两个抽象方法：sendMessage和receiveMessage。 */</span><span class="token comment">// 抽象同事类</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Colleague</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token class-name">Mediator</span> mediator<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Colleague</span><span class="token punctuation">(</span><span class="token class-name">Mediator</span> mediator<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mediator <span class="token operator">=</span> mediator<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">receiveMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同事抽象类的实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 具体实现了同事类A， * 实现了sendMessage方法并在其中通过中介者对象将消息发送给其他的同事对象。 * 同时，实现了receiveMessage方法，用于接收其他同事对象的消息。 */</span><span class="token comment">// 具体同事类A</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ColleagueA</span> <span class="token keyword">extends</span> <span class="token class-name">Colleague</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ColleagueA</span><span class="token punctuation">(</span><span class="token class-name">Mediator</span> mediator<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>mediator<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mediator<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ColleagueA received message: "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ColleagueB</span> <span class="token keyword">extends</span> <span class="token class-name">Colleague</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ColleagueB</span><span class="token punctuation">(</span><span class="token class-name">Mediator</span> mediator<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>mediator<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mediator<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ColleagueB received message: "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>客户端</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ConcreteMediator</span> mediator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteMediator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ColleagueA</span> colleagueA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ColleagueA</span><span class="token punctuation">(</span>mediator<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ColleagueB</span> colleagueB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ColleagueB</span><span class="token punctuation">(</span>mediator<span class="token punctuation">)</span><span class="token punctuation">;</span>        mediator<span class="token punctuation">.</span><span class="token function">setColleagueA</span><span class="token punctuation">(</span>colleagueA<span class="token punctuation">)</span><span class="token punctuation">;</span>        mediator<span class="token punctuation">.</span><span class="token function">setColleagueB</span><span class="token punctuation">(</span>colleagueB<span class="token punctuation">)</span><span class="token punctuation">;</span>        colleagueA<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token string">"Hello colleagueB!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        colleagueB<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token string">"Hi colleagueA!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在客户端代码中，创建了一个具体中介者对象和两个具体同事对象，并将它们注册到中介者对象中。然后，两个具体同事对象分别向对方发送消息。运行这段代码，我们会看到如下的输出结果：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">ColleagueB received message: Hello colleagueB!ColleagueA received message: Hi colleagueA!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>说明同事对象之间通过中介者对象成功地进行了通信。</p><p>类图</p><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/ConcreteMediator.png"></p><p>优点：</p><ol><li>减少了对象之间的紧密耦合关系，增强了灵活性和可维护性。</li><li>通过引入中介者对象，简化了对象之间的交互流程，降低了系统的复杂度。</li><li>可以使对象之间的关系更加松散，有助于在系统中更好地进行分布式开发。</li><li>可以降低系统的耦合度，使得系统更加易于修改和扩展。</li></ol><p>缺点：</p><ol><li>引入中介者对象会增加系统的复杂度，使得系统的整体结构更加抽象化。</li><li>中介者对象会集中承载系统的交互逻辑，可能会成为系统的瓶颈。</li><li>在某些情况下，中介者对象可能会过度膨胀，变得庞大且难以维护。</li></ol><p>总之，中介者模式适合于系统中对象之间的交互复杂度较高、相互之间关系紧密、耦合度较大的情况。如果系统的交互复杂度较低，或者对象之间的交互关系较为简单，中介者模式可能就过于复杂了，不适合使用。</p></li></ul><h3 id="备忘录模式"><a href="#备忘录模式" class="headerlink" title="备忘录模式"></a>备忘录模式</h3><ul><li><p>备忘录模式是一种行为型模式，它允许在不破坏对象封装的前提下捕获并保存其内部状态，并在需要时进行恢复。它由三个核心组件组成：备忘录、发起人和管理者。</p><ul><li><p>备忘录（Memento）：负责存储发起人的内部状态。</p></li><li><p>发起人（Originator）：负责创建备忘录，并将其内部状态保存到备忘录中。</p></li><li><p>管理者（Caretaker）：负责存储和管理备忘录。</p></li></ul></li><li><p>备忘录模式的主要思想是：</p><ul><li>将要保存的对象的状态封装成备忘录对象，由发起人创建备忘录对象并将其存储在管理者中，当需要恢复对象状态时，由管理者返回备忘录对象并让发起人将其内部状态恢复为备忘录中存储的状态。这样可以避免直接操作对象导致的封装破坏，同时也可以将对象的状态保存到磁盘或数据库等外部存储器中。</li></ul></li><li><p>优点：</p><ul><li>它可以使对象状态的保存和恢复更加灵活、简单和安全，同时可以避免在对象外部直接访问其内部状态造成的封装破坏。</li></ul></li><li><p>缺点：</p><ul><li>它可能会对系统的性能产生影响，尤其是在备忘录对象较多、备忘录对象较大时。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//备忘录</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Memento</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> state<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Memento</span><span class="token punctuation">(</span><span class="token class-name">String</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> state<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> state<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//发起人</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Originator</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> state<span class="token punctuation">;</span>    <span class="token comment">//编写一个方法，可以保存一个状态对象Memento</span>    <span class="token comment">//因此编写一个方法返回一个memento</span>    <span class="token keyword">public</span> <span class="token class-name">Memento</span> <span class="token function">saveStateMemento</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Memento</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//通过备忘录对象，回复状态</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getStateFromMemento</span><span class="token punctuation">(</span><span class="token class-name">Memento</span> memento<span class="token punctuation">)</span><span class="token punctuation">{</span>        state<span class="token operator">=</span> memento<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//备忘录管理</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Caretaker</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Memento</span><span class="token punctuation">&gt;</span></span> mementoList<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Memento</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addMemento</span><span class="token punctuation">(</span><span class="token class-name">Memento</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mementoList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Memento</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mementoList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//获取第index个Originator的备忘录对象</span>    <span class="token keyword">public</span> <span class="token class-name">Memento</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> mementoList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>客户端</p><pre class="line-numbers language-javav" data-language="javav"><code class="language-javav">public class Client {    public static void main(String[] args) {        Originator originator = new Originator();        Caretaker caretaker = new Caretaker();        originator.setState("状态1");        //保存了当前的状态        Memento memento = originator.saveStateMemento();        caretaker.addMemento(memento);        System.out.println(originator.getState());        originator.setState("状态2");        caretaker.addMemento(originator.saveStateMemento());        System.out.println(originator.getState());        //回复到状态1        Memento memento1 = caretaker.get(0);        originator.getStateFromMemento(memento1);        System.out.println(originator.getState());    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">状态<span class="token number">1</span>状态<span class="token number">2</span>状态<span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>类图</p><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/%E5%A4%87%E5%BF%98%E5%BD%95.png"></p></li></ul><h3 id="解释器模式"><a href="#解释器模式" class="headerlink" title="解释器模式"></a>解释器模式</h3><p>解释器模式是一种行为型模式，它定义了一组语法规则并描述了这些规则如何解释这些语言表达式。它由四个主要组成部分组成：抽象表达式、终结符表达式、非终结符表达式和上下文。</p><ul><li>抽象表达式（Abstract Expression）：抽象类或接口，它定义了一个抽象的解释操作interpret()方法，用于对自身进行解释。</li><li>终结符表达式（Terminal Expression）：终结符表达式是一个实现了抽象表达式的类，它是一种基本表达式，不能再分解为更小的元素。</li><li>非终结符表达式（Nonterminal Expression）：非终结符表达式是一个实现了抽象表达式的类，它由多个终结符表达式和/或其他非终结符表达式组合而成，用于表示复杂的解释操作。</li><li>上下文（Context）：上下文是一个环境类，它存储了要解释的语言表达式。</li></ul><p>解释器模式的主要思想是：</p><ul><li>将语言的语法规则通过面向对象的方式进行描述，对每个非终结符表达式定义一个解释操作，在解释操作中定义该非终结符表达式的语法规则，并递归调用其组成部分的解释操作，从而实现整个语言表达式的解释。该模式使得添加新规则和表达式变得简单，只需要添加相应的类和方法即可，同时也增强了语言解析的灵活性。</li></ul><p>解释器模式的优缺点：</p><ul><li>它使得语言解析的逻辑能够独立于语法规则的表达式层次结构而变化，易于扩展、易于实现，同时也有利于优化解释器的性能。其缺点是：当语法规则变得复杂时，可能会导致类的数量急剧增加，系统变得更加复杂难以维护。</li></ul><h3 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h3><p>状态模式是一种行为型设计模式，它允许一个对象在其内部状态改变时改变它的行为。</p><p>状态模式的核心理念是：将对象的所有状态都封装成一个个的对象，即状态对象，当对象的状态发生改变时，就切换到另一个状态对象。</p><p>该模式实现时通常涉及到几个角色：</p><ul><li>环境类(Context)：用于维护当前状态，可以拥有一个状态接口的引用，以便通过调用 State 接口的方法来更新状态，并将控制权交给新的状态对象。</li><li>抽象状态(State)：定义状态所支持的接口，用于在系统的不同状态下的行为进行抽象定义。</li><li>具体状态(ConcreteState)：实现了抽象状态接口，并定义其内部状态的行为。</li></ul><p>下面我们通过一个简单的例子来演示状态模式如何工作。</p><p>假设我们有一个购物车(Cart)对象，它具有“未付款”和“已付款”两种状态，每个状态下会有不同的行为，比如在未付款状态下，我们可以添加商品、删除商品、查看购物车等行为，而在已付款状态下，只能查看购物车。</p><p>首先，我们定义了一个 CartState 接口作为状态类的基类，里面包含了两个方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CartState</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token class-name">String</span> product<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">viewCart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们实现两个具体状态类 UnpaidState（未付款状态），PaidState（已付款状态），并分别实现 CartState 接口的方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UnpaidState</span> <span class="token keyword">implements</span> <span class="token class-name">CartState</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> products <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token class-name">String</span> product<span class="token punctuation">)</span> <span class="token punctuation">{</span>        products<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>product <span class="token operator">+</span> <span class="token string">"添加到购物车中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">viewCart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--- 你的购物车物品列表 ---"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> product <span class="token operator">:</span> products<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--- 总计： $"</span> <span class="token operator">+</span> products<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" ---"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaidState</span> <span class="token keyword">implements</span> <span class="token class-name">CartState</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> products <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token class-name">String</span> product<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你已经付款，不能再添加商品！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">viewCart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--- 你的购物车物品列表 ---"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> product <span class="token operator">:</span> products<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--- 总计： $"</span> <span class="token operator">+</span> products<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" ---"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后，我们定义 Cart 类，并且实现状态的切换方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cart</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">CartState</span> currentState<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Cart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>currentState <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UnpaidState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setState</span><span class="token punctuation">(</span><span class="token class-name">CartState</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>currentState <span class="token operator">=</span> state<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token class-name">String</span> product<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>currentState<span class="token punctuation">.</span><span class="token function">addProduct</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">viewCart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>currentState<span class="token punctuation">.</span><span class="token function">viewCart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Cart</span> cart <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cart<span class="token punctuation">.</span><span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token string">"Product 1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cart<span class="token punctuation">.</span><span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token string">"Product 2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cart<span class="token punctuation">.</span><span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token string">"Product 3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                cart<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PaidState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                cart<span class="token punctuation">.</span><span class="token function">addProduct</span><span class="token punctuation">(</span><span class="token string">"Product 4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cart<span class="token punctuation">.</span><span class="token function">viewCart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，我们演示了状态模式如何工作。我们创建了 CartState 接口，并使用 UnpaidState 和 PaidState 实例来实现其状态。在 Cart 类中，我们使用 currentState 对象来保持 Cart 的状态，并使用 setState() 方法将其状态改变，并调用 addProduct() 和 viewCart() 方法来演示系统的不同状态下的行为。</p><p>这样，我们就成功实现了一个简单的状态模式示例。</p><h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><p>策略模式是一种行为型设计模式，它允许在运行时根据具体情况或需求选择不同的算法或策略。</p><p>策略模式的核心思想是将不同的算法或策略封装成独立的类，使得它们可以互相替换，而客户端代码不会受到任何影响。策略模式通常涉及到三个角色：</p><ul><li>环境(Context)：持有一个策略类的引用，它会根据具体情况调用相应的策略类来执行任务。</li><li>抽象策略(Strategy)：定义了一个公共接口，所有的具体策略都必须实现此接口。</li><li>具体策略(ConcreteStrategy)：实现了抽象策略接口，并提供了不同的算法或策略。</li></ul><p>优点：</p><ol><li>策略模式可以提高代码的可扩展性，使得系统更加灵活，易于维护和扩展。</li><li>策略模式可以将算法的实现与使用分离，客户端代码只需关注算法的接口，而不需要了解算法的具体实现。</li><li>策略模式可以降低系统的耦合度，不同的策略实现都仅仅有一个公共的接口，使得它们可以相互替换，减少了代码之间的依赖和耦合。</li><li>策略模式可以避免出现庞大的条件语句，代码更清晰、简洁。</li></ol><p>缺点：</p><ol><li>策略模式会增加代码的数量，因为每个策略都需要一个具体实现类。</li><li>策略模式会增加代码结构的复杂度，因为需要创建一系列的策略类和环境类，并且需要客户端去选择使用不同的策略。</li><li>在某些情况下，使用策略模式可能会导致性能降低，因为客户端可能需要动态选择不同的策略，而切换策略时会产生额外的开销。</li></ol><p>抽象策略</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">FlyBehavior</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//子类具体实现</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BadFlyBehavior</span> <span class="token keyword">implements</span> <span class="token class-name">FlyBehavior</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不善于飞翔的鸭子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GoodFlyBehavior</span> <span class="token keyword">implements</span> <span class="token class-name">FlyBehavior</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"擅长飞行的鸭子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NoFlyBehavior</span> <span class="token keyword">implements</span> <span class="token class-name">FlyBehavior</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不善于飞翔的鸭子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>环境角色</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Duck</span> <span class="token punctuation">{</span>    <span class="token comment">//属性，策略接口</span>    <span class="token class-name">FlyBehavior</span> flyBehavior<span class="token punctuation">;</span>    <span class="token comment">//其他属性</span>    <span class="token keyword">public</span> <span class="token class-name">Duck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">disPlay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//显示鸭子信息</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">quack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"鸭子叫"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"鸭子会游泳"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flyBehavior<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            flyBehavior<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setFlyBehavior</span><span class="token punctuation">(</span><span class="token class-name">FlyBehavior</span> flyBehavior<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>flyBehavior <span class="token operator">=</span> flyBehavior<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体策略角色</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ToyDuck</span> <span class="token keyword">extends</span> <span class="token class-name">Duck</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ToyDuck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        flyBehavior<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">NoFlyBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">disPlay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"玩具鸭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WildDuck</span> <span class="token keyword">extends</span> <span class="token class-name">Duck</span><span class="token punctuation">{</span>    <span class="token comment">//构造器传入FlyBehavior</span>    <span class="token keyword">public</span> <span class="token class-name">WildDuck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        flyBehavior<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">GoodFlyBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">disPlay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"野鸭子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeiJinDuck</span> <span class="token keyword">extends</span> <span class="token class-name">Duck</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">BeiJinDuck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        flyBehavior<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">NoFlyBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">disPlay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"北京鸭子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类图</p><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.png"></p><h3 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h3><ul><li><p>责任链模式（Chain of Responsibility）是一种行为型设计模式。它通过将请求的发送者和接收者解耦，使得多个对象都有机会处理请求。将这些对象串成一条链，并沿着这条链传递请求，知道有一个对象处理它为止。即将能够处理同一件事情的对象连成一条责任链，所提交的请求沿着这条链传递，直到有一个对象处理它，这样既可以提高系统的灵活性和可扩展性，又可以降低系统的耦合度。</p></li><li><p>在责任链模式中，一般会设计出一个抽象处理者类，然后定义出一些具体的处理者类。每个具体的处理者类都应该包含一个指向下一个处理者的引用，从而形成一个链式结构，用户向处理者对象提交请求，处理者对象对请求进行处理，如果它不能处理此请求，则将请求的处理权交给下一个处理者对象，直到请求被处理完毕。</p></li></ul><p>责任链模式优点如下：</p><ol><li>解耦逻辑 - 将请求发送者和接收者解耦，使得多个对象都有机会处理请求，客户端不需要知道请求被处理的具体过程，方便维护和修改。</li><li>增强系统的灵活性 - 可以在运行时动态添加或者删除责任链上的对象，改变处理请求的顺序，灵活性大大增强。</li><li>提高代码的可扩展性 - 可以增加或更换责任链上的处理者类，方便扩展或修改业务逻辑。</li></ol><p>责任链模式缺点如下：</p><ol><li>不能保证请求一定被处理 - 对于链中处理者对象都没有处理该请求的情况，需要提供默认的处理方式，否则该请求将得不到处理。</li><li>对性能有一定影响 - 请求处理时需要穿透整个责任链，直到找到能够处理该请求的节点，这样会对性能产生一定的影响。</li><li>容易造成循环调用 - 如果设计不当，可能会造成循环调用问题，导致系统崩溃。</li></ol><p>抽象处理者</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Approve</span> <span class="token punctuation">{</span>    <span class="token class-name">Approve</span> approve<span class="token punctuation">;</span><span class="token comment">//下一个处理者</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token comment">//名字</span>    <span class="token keyword">public</span> <span class="token class-name">Approve</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//下一个处理者</span>    <span class="token keyword">public</span> <span class="token class-name">Approve</span><span class="token punctuation">(</span><span class="token class-name">Approve</span> approve<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>approve <span class="token operator">=</span> approve<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//处理审批请求的方法，得到一个请求，处理是子类完成，因此该方法做成抽象</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">processRequest</span><span class="token punctuation">(</span><span class="token class-name">PurchaseRequest</span> purchaseRequest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体处理者</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DepartmentApprove</span> <span class="token keyword">extends</span> <span class="token class-name">Approve</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">DepartmentApprove</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processRequest</span><span class="token punctuation">(</span><span class="token class-name">PurchaseRequest</span> pur<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pur<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请求编号"</span><span class="token operator">+</span>pur<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"被"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"处理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            approve<span class="token punctuation">.</span><span class="token function">processRequest</span><span class="token punctuation">(</span>pur<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CollageApprove</span> <span class="token keyword">extends</span> <span class="token class-name">Approve</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">CollageApprove</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processRequest</span><span class="token punctuation">(</span><span class="token class-name">PurchaseRequest</span> pur<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pur<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">5000</span><span class="token operator">&amp;&amp;</span>pur<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请求编号"</span><span class="token operator">+</span>pur<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"被"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"处理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            approve<span class="token punctuation">.</span><span class="token function">processRequest</span><span class="token punctuation">(</span>pur<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ViceSchoolMasterApprove</span> <span class="token keyword">extends</span> <span class="token class-name">Approve</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ViceSchoolMasterApprove</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processRequest</span><span class="token punctuation">(</span><span class="token class-name">PurchaseRequest</span> pur<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pur<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">1000</span><span class="token operator">&amp;&amp;</span>pur<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">30000</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请求编号"</span><span class="token operator">+</span>pur<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"被"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"处理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            approve<span class="token punctuation">.</span><span class="token function">processRequest</span><span class="token punctuation">(</span>pur<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SchoolMasterApprove</span> <span class="token keyword">extends</span> <span class="token class-name">Approve</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">SchoolMasterApprove</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processRequest</span><span class="token punctuation">(</span><span class="token class-name">PurchaseRequest</span> pur<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pur<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">30000</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请求编号"</span><span class="token operator">+</span>pur<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"被"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"处理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            approve<span class="token punctuation">.</span><span class="token function">processRequest</span><span class="token punctuation">(</span>pur<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请求</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PurchaseRequest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> type<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//请求类型</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> price<span class="token operator">=</span><span class="token number">0.0f</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">PurchaseRequest</span><span class="token punctuation">(</span><span class="token keyword">int</span> type<span class="token punctuation">,</span><span class="token keyword">float</span> price<span class="token punctuation">,</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>客户端</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 创建一个请求</span>        <span class="token class-name">PurchaseRequest</span> purchaseRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PurchaseRequest</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">33100</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建相关审批人</span>        <span class="token class-name">DepartmentApprove</span> departmentApprove <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DepartmentApprove</span><span class="token punctuation">(</span><span class="token string">"主任"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CollageApprove</span> collageApprove <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CollageApprove</span><span class="token punctuation">(</span><span class="token string">"院长"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ViceSchoolMasterApprove</span> viceSchoolMasterApprove <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ViceSchoolMasterApprove</span><span class="token punctuation">(</span><span class="token string">"副校长"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SchoolMasterApprove</span> schoolMasterApprove <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SchoolMasterApprove</span><span class="token punctuation">(</span><span class="token string">"校长"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//需要将各个审批的下一个处理者设置好 构成一个环形</span>        departmentApprove<span class="token punctuation">.</span><span class="token function">setApprove</span><span class="token punctuation">(</span>collageApprove<span class="token punctuation">)</span><span class="token punctuation">;</span>        collageApprove<span class="token punctuation">.</span><span class="token function">setApprove</span><span class="token punctuation">(</span>viceSchoolMasterApprove<span class="token punctuation">)</span><span class="token punctuation">;</span>        viceSchoolMasterApprove<span class="token punctuation">.</span><span class="token function">setApprove</span><span class="token punctuation">(</span>schoolMasterApprove<span class="token punctuation">)</span><span class="token punctuation">;</span>        schoolMasterApprove<span class="token punctuation">.</span><span class="token function">setApprove</span><span class="token punctuation">(</span>departmentApprove<span class="token punctuation">)</span><span class="token punctuation">;</span>        viceSchoolMasterApprove<span class="token punctuation">.</span><span class="token function">processRequest</span><span class="token punctuation">(</span>purchaseRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">请求编号<span class="token number">1</span>被校长处理<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>无论谁调用processRequest()方法，请求都能被对应的请求处理类处理</p><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/%E8%B4%A3%E4%BB%BB%E9%93%BE.png"></p>]]></content>
      
      
      <categories>
          
          <category> java后端 </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis-plus笔记</title>
      <link href="/2023/04/05/Mybatis-plus%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/04/05/Mybatis-plus%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="一、MyBatis-Plus"><a href="#一、MyBatis-Plus" class="headerlink" title="一、MyBatis-Plus"></a>一、MyBatis-Plus</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p><a class="link" href="https://github.com/baomidou/mybatis-plus">MyBatis-Plus (opens new window)<i class="fas fa-external-link-alt"></i></a>（简称 MP）是一个 <a class="link" href="https://www.mybatis.org/mybatis-3/">MyBatis (opens new window)<i class="fas fa-external-link-alt"></i></a>的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p><blockquote><p>我们的愿景是成为 MyBatis 最好的搭档，就像 <a class="link" href="https://baomidou.com/img/contra.jpg">魂斗罗<i class="fas fa-external-link-alt"></i></a> 中的 1P、2P，基友搭配，效率翻倍。</p></blockquote><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/relationship-with-mybatis.png"></p><h2 id="2-特性"><a href="#2-特性" class="headerlink" title="2.特性"></a>2.特性</h2><ul><li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li><li><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li><li><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li><li><strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li><li><strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li><li><strong>支持 ActiveRecord 模式</strong>：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li><li><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ Write once, use anywhere ）</li><li><strong>内置代码生成器</strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li><li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li><li><strong>分页插件支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li><li><strong>内置性能分析插件</strong>：可输出 SQL 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li><li><strong>内置全局拦截插件</strong>：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li></ul><h2 id="3-支持数据库"><a href="#3-支持数据库" class="headerlink" title="3.支持数据库"></a>3.支持数据库</h2><blockquote><p>任何能使用 <code>MyBatis</code> 进行 CRUD, 并且支持标准 SQL 的数据库，具体支持情况如下，如果不在下列表查看分页部分教程 PR 您的支持。</p></blockquote><ul><li>MySQL，Oracle，DB2，H2，HSQL，SQLite，PostgreSQL，SQLServer，Phoenix，Gauss ，ClickHouse，Sybase，OceanBase，Firebird，Cubrid，Goldilocks，csiidb</li><li>达梦数据库，虚谷数据库，人大金仓数据库，南大通用(华库)数据库，南大通用数据库，神通数据库，瀚高数据库</li></ul><h2 id="4-框架结构"><a href="#4-框架结构" class="headerlink" title="4.框架结构"></a>4.框架结构</h2><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/mybatis-plus-framework.jpg" style="zoom:50%;"><h2 id="5-官方地址"><a href="#5-官方地址" class="headerlink" title="5.官方地址"></a>5.官方地址</h2><blockquote><p><strong>官方网站：</strong><a class="link" href="https://baomidou.com/">https://baomidou.com/<i class="fas fa-external-link-alt"></i></a></p><p><strong>官方文档：</strong><a class="link" href="https://baomidou.com/pages/24112f/">https://baomidou.com/pages/24112f/<i class="fas fa-external-link-alt"></i></a></p></blockquote><h1 id="二、入门案例"><a href="#二、入门案例" class="headerlink" title="二、入门案例"></a>二、入门案例</h1><h2 id="1-开发环境"><a href="#1-开发环境" class="headerlink" title="1.开发环境"></a>1.开发环境</h2><ul><li><strong>IDE：IDEA 2019.3.5</strong></li><li><strong>JDK：JDK8+</strong></li><li><strong>构建工具：Maven 3.5.4</strong></li><li><strong>MySQL：MySQL 8.0.24</strong></li><li><strong>Navicat：Navicat Premium 15</strong></li><li><strong>Spring Boot：2.6.7</strong></li><li><strong>MyBatis-Plus：3.5.1</strong></li></ul><h2 id="2-建库建表"><a href="#2-建库建表" class="headerlink" title="2.建库建表"></a>2.建库建表</h2><ul><li><p><strong>打开Navicat运行以下SQL脚本进行建库建表</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token identifier"><span class="token punctuation">`</span>mybatis_plus<span class="token punctuation">`</span></span> <span class="token comment">/*!40100 DEFAULT CHARACTER SET utf8mb4 */</span><span class="token punctuation">;</span> <span class="token keyword">use</span> <span class="token identifier"><span class="token punctuation">`</span>mybatis_plus<span class="token punctuation">`</span></span><span class="token punctuation">;</span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>user<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>     <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'主键ID'</span><span class="token punctuation">,</span>     <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span>     <span class="token identifier"><span class="token punctuation">`</span>age<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'年龄'</span><span class="token punctuation">,</span>     <span class="token identifier"><span class="token punctuation">`</span>email<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'邮箱'</span><span class="token punctuation">,</span>     <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>插入几条测试数据</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">user</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> email<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'Jone'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'test1@baomidou.com'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'test2@baomidou.com'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token string">'test3@baomidou.com'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'Sandy'</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">'test4@baomidou.com'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'Billie'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token string">'test5@baomidou.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="3-创建工程"><a href="#3-创建工程" class="headerlink" title="3.创建工程"></a>3.创建工程</h2><ul><li><p><strong>使用<code>Spring Initializer</code>快速初始化一个 Spring Boot 工程</strong></p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/image-20220519140839640.png" style="zoom:80%;"><img lazyload="" alt="image" data-src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220519141335981.png" style="zoom:80%;"><img lazyload="" alt="image" data-src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220519141737405.png" style="zoom:80%;"><img lazyload="" alt="image" data-src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220519141849937.png" style="zoom:80%;"></li><li><p><strong>引入<code>MyBatis-Plus</code>的依赖</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.5.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>安装<code>Lombok</code>插件</strong></p><img lazyload="" alt="image" data-src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220519143257305.png" style="zoom:80%;"></li></ul><h2 id="4-配置编码"><a href="#4-配置编码" class="headerlink" title="4.配置编码"></a>4.配置编码</h2><ul><li><p><strong>配置<code>application.yml</code>文件</strong></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#配置端口</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token comment">#配置数据源</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token comment">#配置数据源类型</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> com.zaxxer.hikari.HikariDataSource    <span class="token comment">#配置连接数据库的信息</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/mybatis_plus<span class="token punctuation">?</span>characterEncoding=utf<span class="token punctuation">-</span>8<span class="token important">&amp;useSSL=false</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>username<span class="token punctuation">}</span>    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>password<span class="token punctuation">}</span><span class="token comment">#MyBatis-Plus相关配置</span><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>  <span class="token key atrule">configuration</span><span class="token punctuation">:</span>    <span class="token comment">#配置日志</span>    <span class="token key atrule">log-impl</span><span class="token punctuation">:</span> org.apache.ibatis.logging.stdout.StdOutImpl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>在 Spring Boot 启动类中添加 <code>@MapperScan</code> 注解，扫描 Mapper 文件夹</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"指定Mapper接口所在的包"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisPlusDemoApplication</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">MybatisPlusDemoApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>编写实体类 <code>User.java</code>（此处使用了 Lombok 简化代码）</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>编写 Mapper 包下的 <code>UserMapper</code>接口</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="5-测试查询"><a href="#5-测试查询" class="headerlink" title="5.测试查询"></a>5.测试查询</h2><ul><li><p><strong>编写一个测试类<code>MyBatisPlusTest.java</code></strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBatisPlusTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">UserMapper</span> userMapper<span class="token punctuation">;</span>    <span class="token comment">/**     * 测试查询所有数据     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">testSelectList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//通过条件构造器查询一个list集合，若没有条件，则可以设置null为参数</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>控制台打印查询结果</strong></p><p><img lazyload="" alt="image" data-src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220519150454211.png"></p></li></ul><h1 id="三、增删改查"><a href="#三、增删改查" class="headerlink" title="三、增删改查"></a>三、增删改查</h1><h2 id="1-BaseMapper-lt-T-gt"><a href="#1-BaseMapper-lt-T-gt" class="headerlink" title="1.BaseMapper<T>"></a>1.BaseMapper&lt;T&gt;</h2><blockquote><p>说明:</p><ul><li>通用 CRUD 封装BaseMapper 接口，为 <code>Mybatis-Plus</code> 启动时自动解析实体表关系映射转换为 <code>Mybatis</code> 内部对象注入容器</li><li>泛型 <code>T</code> 为任意实体对象</li><li>参数 <code>Serializable</code> 为任意类型主键 <code>Mybatis-Plus</code> 不推荐使用复合主键约定每一张表都有自己的唯一 <code>id</code> 主键</li><li>对象 <code>Wrapper</code> 为条件构造器</li></ul></blockquote><p>MyBatis-Plus中的基本CRUD在内置的BaseMapper中都已得到了实现，因此我们继承该接口以后可以直接使用。</p><p>本次演示的CRUD操作不包含参数带有条件构造器的方法，关于条件构造器将单独在一个章节进行演示。</p><hr><blockquote><p><strong>BaseMapper中提供的CRUD方法：</strong></p></blockquote><ul><li><p><strong>增加：Insert</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 插入一条记录</span><span class="token keyword">int</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">T</span> entity<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>删除：Delete</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 根据 entity 条件，删除记录</span><span class="token keyword">int</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">WRAPPER</span><span class="token punctuation">)</span> <span class="token class-name">Wrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 删除（根据ID 批量删除）</span><span class="token keyword">int</span> <span class="token function">deleteBatchIds</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">COLLECTION</span><span class="token punctuation">)</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Serializable</span><span class="token punctuation">&gt;</span></span> idList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据 ID 删除</span><span class="token keyword">int</span> <span class="token function">deleteById</span><span class="token punctuation">(</span><span class="token class-name">Serializable</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据 columnMap 条件，删除记录</span><span class="token keyword">int</span> <span class="token function">deleteByMap</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">COLUMN_MAP</span><span class="token punctuation">)</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> columnMap<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>修改：Update</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 根据 whereWrapper 条件，更新记录</span><span class="token keyword">int</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">ENTITY</span><span class="token punctuation">)</span> <span class="token class-name">T</span> updateEntity<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">WRAPPER</span><span class="token punctuation">)</span> <span class="token class-name">Wrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> whereWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据 ID 修改</span><span class="token keyword">int</span> <span class="token function">updateById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">ENTITY</span><span class="token punctuation">)</span> <span class="token class-name">T</span> entity<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>查询：Selete</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 根据 ID 查询</span><span class="token class-name">T</span> <span class="token function">selectById</span><span class="token punctuation">(</span><span class="token class-name">Serializable</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据 entity 条件，查询一条记录</span><span class="token class-name">T</span> <span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">WRAPPER</span><span class="token punctuation">)</span> <span class="token class-name">Wrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 查询（根据ID 批量查询）</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectBatchIds</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">COLLECTION</span><span class="token punctuation">)</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Serializable</span><span class="token punctuation">&gt;</span></span> idList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据 entity 条件，查询全部记录</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectList</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">WRAPPER</span><span class="token punctuation">)</span> <span class="token class-name">Wrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 查询（根据 columnMap 条件）</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectByMap</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">COLUMN_MAP</span><span class="token punctuation">)</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> columnMap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据 Wrapper 条件，查询全部记录</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectMaps</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">WRAPPER</span><span class="token punctuation">)</span> <span class="token class-name">Wrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据 Wrapper 条件，查询全部记录。注意： 只返回第一个字段的值</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectObjs</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">WRAPPER</span><span class="token punctuation">)</span> <span class="token class-name">Wrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据 entity 条件，查询全部记录（并翻页）</span><span class="token class-name">IPage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectPage</span><span class="token punctuation">(</span><span class="token class-name">IPage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> page<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">WRAPPER</span><span class="token punctuation">)</span> <span class="token class-name">Wrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据 Wrapper 条件，查询全部记录（并翻页）</span><span class="token class-name">IPage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectMapsPage</span><span class="token punctuation">(</span><span class="token class-name">IPage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> page<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">WRAPPER</span><span class="token punctuation">)</span> <span class="token class-name">Wrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据 Wrapper 条件，查询总记录数</span><span class="token class-name">Integer</span> <span class="token function">selectCount</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">WRAPPER</span><span class="token punctuation">)</span> <span class="token class-name">Wrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="2-调用Mapper层实现CRUD"><a href="#2-调用Mapper层实现CRUD" class="headerlink" title="2.调用Mapper层实现CRUD"></a>2.调用Mapper层实现CRUD</h2><h3 id="2-1插入"><a href="#2-1插入" class="headerlink" title="2.1插入"></a>2.1插入</h3><hr><blockquote><p><strong>最终执行的结果，所获取的id为1527206783590903810</strong></p><p><strong>这是因为MyBatis-Plus在实现插入数据时，会默认基于雪花算法的策略生成id</strong></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  * 测试插入一条数据  * MyBatis-Plus在实现插入数据时，会默认基于雪花算法的策略生成id  */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"Vz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"vz@oz6.cn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">"添加成功！"</span> <span class="token operator">:</span> <span class="token string">"添加失败！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"受影响的行数为："</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//1527206783590903810（当前 id 为雪花算法自动生成的id）</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"id自动获取"</span> <span class="token operator">+</span> user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2删除"><a href="#2-2删除" class="headerlink" title="2.2删除"></a>2.2删除</h3><hr><h4 id="a、根据ID删除数据"><a href="#a、根据ID删除数据" class="headerlink" title="a、根据ID删除数据"></a>a、根据ID删除数据</h4><blockquote><p><strong>调用方法：int deleteById(Serializable id);</strong></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  * 测试根据id删除一条数据  */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDeleteById</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span><span class="token number">1527206783590903810L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">"删除成功！"</span> <span class="token operator">:</span> <span class="token string">"删除失败！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"受影响的行数为："</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="b、根据ID批量删除数据"><a href="#b、根据ID批量删除数据" class="headerlink" title="b、根据ID批量删除数据"></a>b、根据ID批量删除数据</h4><blockquote><p><strong>调用方法：int deleteBatchIds(@Param(Constants.COLLECTION) Collection&lt;? extends Serializable&gt; idList);</strong></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  * 测试通过id批量删除数据  */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDeleteBatchIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> ids <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">6L</span><span class="token punctuation">,</span><span class="token number">7L</span><span class="token punctuation">,</span><span class="token number">8L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">deleteBatchIds</span><span class="token punctuation">(</span>ids<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">"删除成功！"</span> <span class="token operator">:</span> <span class="token string">"删除失败！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"受影响的行数为："</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="c、根据Map条件删除数据"><a href="#c、根据Map条件删除数据" class="headerlink" title="c、根据Map条件删除数据"></a>c、根据Map条件删除数据</h4><blockquote><p><strong>调用方法：int deleteByMap(@Param(Constants.COLUMN_MAP) Map&lt;String, Object&gt; columnMap);</strong></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**   * 测试根据Map集合中所设置的条件删除数据   */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDeleteByMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//当前演示为根据name和age删除数据</span>    <span class="token comment">//执行SQL为：DELETE FROM user WHERE name = ? AND age = ?</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"Vz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">deleteByMap</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">"删除成功！"</span> <span class="token operator">:</span> <span class="token string">"删除失败！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"受影响的行数为："</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3修改"><a href="#2-3修改" class="headerlink" title="2.3修改"></a>2.3修改</h3><blockquote><p><strong>调用方法：int updateById(@Param(Constants.ENTITY) T entity);</strong></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  * 测试根据id修改用户信息  */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUpdateById</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//执行SQL为： UPDATE user SET name=?, age=?, email=? WHERE id=?</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">6L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"VzUpdate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"Vz@sina.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">"修改成功！"</span> <span class="token operator">:</span> <span class="token string">"修改失败！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"受影响的行数为："</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4查询"><a href="#2-4查询" class="headerlink" title="2.4查询"></a>2.4查询</h3><hr><h4 id="a、根据ID查询用户信息"><a href="#a、根据ID查询用户信息" class="headerlink" title="a、根据ID查询用户信息"></a>a、根据ID查询用户信息</h4><blockquote><p><strong>调用方法：T selectById(Serializable id);</strong></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  * 测试根据id查询用户数据  */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectById</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="b、根据多个ID查询多个用户信息"><a href="#b、根据多个ID查询多个用户信息" class="headerlink" title="b、根据多个ID查询多个用户信息"></a>b、根据多个ID查询多个用户信息</h4><blockquote><p><strong>调用方法：List<t> selectBatchIds(@Param(Constants.COLLECTION) Collection&lt;? extends Serializable&gt; idList);</t></strong></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  * 根据多个id查询用户数据  */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectBatchIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//执行SQL为：SELECT id,name,age,email FROM user WHERE id IN ( ? , ? , ? )</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> ids <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span><span class="token number">2L</span><span class="token punctuation">,</span><span class="token number">3L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectBatchIds</span><span class="token punctuation">(</span>ids<span class="token punctuation">)</span><span class="token punctuation">;</span>    users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="c、根据Map条件查询用户信息"><a href="#c、根据Map条件查询用户信息" class="headerlink" title="c、根据Map条件查询用户信息"></a>c、根据Map条件查询用户信息</h4><blockquote><p><strong>调用方法：List<t> selectByMap(@Param(Constants.COLUMN_MAP) Map&lt;String, Object&gt; columnMap);</t></strong></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  * 根据Map所设置的条件查询用户  */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectByMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//执行SQL为：SELECT id,name,age,email FROM user WHERE age = ?</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectByMap</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="d、查询所有用户信息"><a href="#d、查询所有用户信息" class="headerlink" title="d、查询所有用户信息"></a>d、查询所有用户信息</h4><blockquote><p><strong>调用方法：List<t> selectList(@Param(Constants.WRAPPER) Wrapper<t> queryWrapper);</t></t></strong></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  * 测试查询所有数据  */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">testSelectList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-通用Service"><a href="#3-通用Service" class="headerlink" title="3.通用Service"></a>3.通用Service</h2><blockquote><p>说明:</p><ul><li>通用 Service CRUD 封装<code>IService</code>接口，进一步封装 CRUD 采用 <code>get 查询单行</code> <code>remove 删除</code> <code>list 查询集合</code> <code>page 分页</code> 前缀命名方式区分 <code>Mapper</code> 层避免混淆，</li><li>泛型 <code>T</code> 为任意实体对象</li><li>建议如果存在自定义通用 Service 方法的可能，请创建自己的 <code>IBaseService</code> 继承 <code>Mybatis-Plus</code> 提供的基类</li><li>对象 <code>Wrapper</code> 为 条件构造器</li></ul></blockquote><p>MyBatis-Plus中有一个接口 **<code>IService</code>**和其实现类 **<code>ServiceImpl</code>**，封装了常见的业务层逻辑，详情查看源码IService和ServiceImpl</p><p>因此我们在使用的时候仅需在自己定义的**<code>Service</code><strong>接口中继承</strong><code>IService</code><strong>接口，在自己的实现类中实现自己的Service并继承</strong><code>ServiceImpl</code>**即可</p><hr><blockquote><p><strong>IService中的CRUD方法</strong></p></blockquote><ul><li><p><strong>增加：Save、SaveOrUpdate</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 插入一条记录（选择字段，策略插入）</span><span class="token keyword">boolean</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">T</span> entity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 插入（批量）</span><span class="token keyword">boolean</span> <span class="token function">saveBatch</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> entityList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 插入（批量）</span><span class="token keyword">boolean</span> <span class="token function">saveBatch</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> entityList<span class="token punctuation">,</span> <span class="token keyword">int</span> batchSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// TableId 注解存在更新记录，否插入一条记录</span><span class="token keyword">boolean</span> <span class="token function">saveOrUpdate</span><span class="token punctuation">(</span><span class="token class-name">T</span> entity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据updateWrapper尝试更新，否继续执行saveOrUpdate(T)方法</span><span class="token keyword">boolean</span> <span class="token function">saveOrUpdate</span><span class="token punctuation">(</span><span class="token class-name">T</span> entity<span class="token punctuation">,</span> <span class="token class-name">Wrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> updateWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 批量修改插入</span><span class="token keyword">boolean</span> <span class="token function">saveOrUpdateBatch</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> entityList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 批量修改插入</span><span class="token keyword">boolean</span> <span class="token function">saveOrUpdateBatch</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> entityList<span class="token punctuation">,</span> <span class="token keyword">int</span> batchSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>删除：Remove</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 根据 entity 条件，删除记录</span><span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Wrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据 ID 删除</span><span class="token keyword">boolean</span> <span class="token function">removeById</span><span class="token punctuation">(</span><span class="token class-name">Serializable</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据 columnMap 条件，删除记录</span><span class="token keyword">boolean</span> <span class="token function">removeByMap</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> columnMap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 删除（根据ID 批量删除）</span><span class="token keyword">boolean</span> <span class="token function">removeByIds</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Serializable</span><span class="token punctuation">&gt;</span></span> idList<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>修改：Update</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 根据 UpdateWrapper 条件，更新记录 需要设置sqlset</span><span class="token keyword">boolean</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">Wrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> updateWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据 whereWrapper 条件，更新记录</span><span class="token keyword">boolean</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">T</span> updateEntity<span class="token punctuation">,</span> <span class="token class-name">Wrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> whereWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据 ID 选择修改</span><span class="token keyword">boolean</span> <span class="token function">updateById</span><span class="token punctuation">(</span><span class="token class-name">T</span> entity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据ID 批量更新</span><span class="token keyword">boolean</span> <span class="token function">updateBatchById</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> entityList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据ID 批量更新</span><span class="token keyword">boolean</span> <span class="token function">updateBatchById</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> entityList<span class="token punctuation">,</span> <span class="token keyword">int</span> batchSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>查询：Get、List、Count</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 根据 ID 查询</span><span class="token class-name">T</span> <span class="token function">getById</span><span class="token punctuation">(</span><span class="token class-name">Serializable</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据 Wrapper，查询一条记录。结果集，如果是多个会抛出异常，随机取一条加上限制条件 wrapper.last("LIMIT 1")</span><span class="token class-name">T</span> <span class="token function">getOne</span><span class="token punctuation">(</span><span class="token class-name">Wrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据 Wrapper，查询一条记录</span><span class="token class-name">T</span> <span class="token function">getOne</span><span class="token punctuation">(</span><span class="token class-name">Wrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> queryWrapper<span class="token punctuation">,</span> <span class="token keyword">boolean</span> throwEx<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据 Wrapper，查询一条记录</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">getMap</span><span class="token punctuation">(</span><span class="token class-name">Wrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据 Wrapper，查询一条记录</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">V</span> <span class="token function">getObj</span><span class="token punctuation">(</span><span class="token class-name">Wrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> queryWrapper<span class="token punctuation">,</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> mapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 查询所有</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 查询列表</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token class-name">Wrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 查询（根据ID 批量查询）</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">listByIds</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Serializable</span><span class="token punctuation">&gt;</span></span> idList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 查询（根据 columnMap 条件）</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">listByMap</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> columnMap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 查询所有列表</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">listMaps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 查询列表</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">listMaps</span><span class="token punctuation">(</span><span class="token class-name">Wrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 查询全部记录</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">listObjs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 查询全部记录</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">listObjs</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> mapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据 Wrapper 条件，查询全部记录</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">listObjs</span><span class="token punctuation">(</span><span class="token class-name">Wrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据 Wrapper 条件，查询全部记录</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">listObjs</span><span class="token punctuation">(</span><span class="token class-name">Wrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> queryWrapper<span class="token punctuation">,</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> mapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 查询总记录数</span><span class="token keyword">int</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据 Wrapper 条件，查询总记录数</span><span class="token keyword">int</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token class-name">Wrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>分页：Page</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 根据 ID 查询</span><span class="token class-name">T</span> <span class="token function">getById</span><span class="token punctuation">(</span><span class="token class-name">Serializable</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据 Wrapper，查询一条记录。结果集，如果是多个会抛出异常，随机取一条加上限制条件 wrapper.last("LIMIT 1")</span><span class="token class-name">T</span> <span class="token function">getOne</span><span class="token punctuation">(</span><span class="token class-name">Wrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据 Wrapper，查询一条记录</span><span class="token class-name">T</span> <span class="token function">getOne</span><span class="token punctuation">(</span><span class="token class-name">Wrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> queryWrapper<span class="token punctuation">,</span> <span class="token keyword">boolean</span> throwEx<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据 Wrapper，查询一条记录</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">getMap</span><span class="token punctuation">(</span><span class="token class-name">Wrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据 Wrapper，查询一条记录</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">V</span> <span class="token function">getObj</span><span class="token punctuation">(</span><span class="token class-name">Wrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> queryWrapper<span class="token punctuation">,</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> mapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="4-调用Service层操作数据"><a href="#4-调用Service层操作数据" class="headerlink" title="4.调用Service层操作数据"></a>4.调用Service层操作数据</h2><blockquote><p>我们在自己的Service接口中通过继承MyBatis-Plus提供的IService接口，不仅可以获得其提供的CRUD方法，而且还可以使用自身定义的方法。</p></blockquote><ul><li><p><strong>创建<code>UserService</code>并继承<code>IService</code></strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  * UserService继承IService模板提供的基础功能   */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token keyword">extends</span> <span class="token class-name">IService</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>创建<code>UserService</code>的实现类并继承<code>ServiceImpl</code></strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  * ServiceImpl实现了IService，提供了IService中基础功能的实现   * 若ServiceImpl无法满足业务需求，则可以使用自定的UserService定义方法，并在实现类中实现  */</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserMapper</span><span class="token punctuation">,</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>测试查询记录数</strong></p><blockquote><p><strong>调用方法：int count();</strong></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//查询总记录数</span>    <span class="token comment">//执行的SQL为：SELECT COUNT( * ) FROM user</span>    <span class="token keyword">long</span> count <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"总记录数："</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>测试批量插入数据</strong></p><blockquote><p><strong>调用方法：boolean saveBatch(Collection<t> entityList);</t></strong></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"Vz"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">boolean</span> b <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">saveBatch</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b <span class="token operator">?</span> <span class="token string">"添加成功！"</span> <span class="token operator">:</span> <span class="token string">"添加失败！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="四、常用注解"><a href="#四、常用注解" class="headerlink" title="四、常用注解"></a>四、常用注解</h1><blockquote><p>MyBatis-Plus提供的注解可以帮我们解决一些数据库与实体之间相互映射的问题。</p></blockquote><h2 id="1-TableName"><a href="#1-TableName" class="headerlink" title="1.@TableName"></a>1.@TableName</h2><blockquote><p>经过以上的测试，在使用MyBatis-Plus实现基本的CRUD时，我们并没有指定要操作的表，只是在Mapper接口继承BaseMapper时，设置了泛型User，而操作的表为user表，由此得出结论，MyBatis-Plus在确定操作的表时，由BaseMapper的泛型决定，即实体类型决定，且默认操作的表名和实体类型的类名一致。</p></blockquote><h3 id="1-1引出问题"><a href="#1-1引出问题" class="headerlink" title="1.1引出问题"></a>1.1引出问题</h3><hr><blockquote><p><strong>若实体类类型的类名和要操作的表的表名不一致，会出现什么问题？</strong></p></blockquote><ul><li><p>我们将表<code>user</code>更名为<code>t_user</code>，测试查询功能</p><p><img lazyload="" alt="image" data-src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220520093844842.png"></p></li><li><p>程序抛出异常，<strong>Table ‘mybatis_plus.user’ doesn’t exist</strong>，因为现在的表名为<code>t_user</code>，而默认操作的表名和实体类型的类名一致，即<code>user</code>表</p><p><img lazyload="" alt="image" data-src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220520094126411.png"></p></li></ul><h3 id="1-2解决问题"><a href="#1-2解决问题" class="headerlink" title="1.2解决问题"></a>1.2解决问题</h3><hr><h4 id="a、使用注解解决问题"><a href="#a、使用注解解决问题" class="headerlink" title="a、使用注解解决问题"></a>a、使用注解解决问题</h4><blockquote><p><strong>在实体类类型上添加<code>@TableName("t_user")</code>，标识实体类对应的表，即可成功执行SQL语句</strong></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@TableName</span><span class="token punctuation">(</span><span class="token string">"t_user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="b、使用全局配置解决问题"><a href="#b、使用全局配置解决问题" class="headerlink" title="b、使用全局配置解决问题"></a>b、使用全局配置解决问题</h4><blockquote><p><strong>在开发的过程中，我们经常遇到以上的问题，即实体类所对应的表都有固定的前缀，例如 <code>t_</code> 或 <code>tbl_</code> 此时，可以使用MyBatis-Plus提供的全局配置，为实体类所对应的表名设置默认的前缀，那么就不需要在每个实体类上通过@TableName标识实体类对应的表</strong></p></blockquote><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>  <span class="token key atrule">global-config</span><span class="token punctuation">:</span>    <span class="token key atrule">db-config</span><span class="token punctuation">:</span>      <span class="token comment"># 设置实体类所对应的表的统一前缀</span>      <span class="token key atrule">table-prefix</span><span class="token punctuation">:</span> t_<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-TableId"><a href="#2-TableId" class="headerlink" title="2.@TableId"></a>2.@TableId</h2><blockquote><p><strong>经过以上的测试，MyBatis-Plus在实现CRUD时，会默认将id作为主键列，并在插入数据时，默认基于雪花算法的策略生成id</strong></p></blockquote><h3 id="2-1引出问题"><a href="#2-1引出问题" class="headerlink" title="2.1引出问题"></a>2.1引出问题</h3><hr><blockquote><p><strong>若实体类和表中表示主键的不是id，而是其他字段，例如uid，MyBatis-Plus会自动识别uid为主键列吗？</strong></p></blockquote><ul><li><p>我们实体类中的属性<code>id</code>改为<code>uid</code>，将表中的字段<code>id</code>也改为<code>uid</code>，测试添加功能</p><p><img lazyload="" alt="image" data-src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220520100939157.png"></p><p><img lazyload="" alt="image" data-src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220520100715109.png"></p></li><li><p>程序抛出异常，<strong>Field ‘uid’ doesn’t have a default value</strong>，说明MyBatis-Plus没有将<code>uid</code>作为主键赋值</p><p><img lazyload="" alt="image" data-src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220520101317761.png"></p></li></ul><h3 id="2-2解决问题"><a href="#2-2解决问题" class="headerlink" title="2.2解决问题"></a>2.2解决问题</h3><hr><blockquote><p><strong>在实体类中uid属性上通过<code>@TableId</code>将其标识为主键，即可成功执行SQL语句</strong></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Date</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@TableId</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> uid<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-TableId的value属性"><a href="#2-3-TableId的value属性" class="headerlink" title="2.3@TableId的value属性"></a>2.3@TableId的value属性</h3><hr><blockquote><p>若实体类中主键对应的属性为id，而表中表示主键的字段为uid，此时若只在属性id上添加注解@TableId，则抛出异常**Unknown column ‘id’ in ‘field list’**，即MyBatis-Plus仍然会将id作为表的主键操作，而表中表示主键的是字段uid此时需要通过@TableId注解的value属性，指定表中的主键字段，<code>@TableId("uid")</code>或<code>@TableId(value="uid")</code></p></blockquote><p><img lazyload="" alt="image" data-src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220520103030977.png"></p><h3 id="2-4-TableId的type属性"><a href="#2-4-TableId的type属性" class="headerlink" title="2.4@TableId的type属性"></a>2.4@TableId的type属性</h3><hr><blockquote><p><strong>type属性用来定义主键策略：默认雪花算法</strong></p></blockquote><p><strong>常用的主键策略：</strong></p><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">IdType.ASSIGN_ID（默认）</td><td align="center">基于雪花算法的策略生成数据id，与数据库id是否设置自增无关</td></tr><tr><td align="center">IdType.AUTO</td><td align="center">使用数据库的自增策略，注意，该类型请确保数据库设置了id自增，</td></tr></tbody></table><p><strong>配置全局主键策略：</strong></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#MyBatis-Plus相关配置</span><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>  <span class="token key atrule">configuration</span><span class="token punctuation">:</span>    <span class="token comment">#配置日志</span>    <span class="token key atrule">log-impl</span><span class="token punctuation">:</span> org.apache.ibatis.logging.stdout.StdOutImpl  <span class="token key atrule">global-config</span><span class="token punctuation">:</span>    <span class="token key atrule">db-config</span><span class="token punctuation">:</span>      <span class="token comment">#配置mp的主键策略为自增</span>      <span class="token key atrule">id-type</span><span class="token punctuation">:</span> auto      <span class="token comment"># 设置实体类所对应的表的统一前缀</span>      <span class="token key atrule">table-prefix</span><span class="token punctuation">:</span> t_<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-TbaleField"><a href="#3-TbaleField" class="headerlink" title="3.@TbaleField"></a>3.@TbaleField</h2><blockquote><p>经过以上的测试，我们可以发现，MyBatis-Plus在执行SQL语句时，要保证实体类中的属性名和表中的字段名一致</p><p>如果实体类中的属性名和字段名不一致的情况，会出现什么问题呢？</p></blockquote><h3 id="3-1情况一"><a href="#3-1情况一" class="headerlink" title="3.1情况一"></a>3.1情况一</h3><hr><p>若实体类中的属性使用的是驼峰命名风格，而表中的字段使用的是下划线命名风格</p><p>例如实体类属性<code>userName</code>，表中字段<code>user_name</code></p><p>此时MyBatis-Plus会自动将下划线命名风格转化为驼峰命名风格</p><p>相当于在MyBatis中配置</p><h3 id="3-2情况二"><a href="#3-2情况二" class="headerlink" title="3.2情况二"></a>3.2情况二</h3><hr><blockquote><p>若实体类中的属性和表中的字段不满足情况1</p><p>例如实体类属性<code>name</code>，表中字段<code>username</code></p><p>此时需要在实体类属性上使用<code>@TableField("username")</code>设置属性所对应的字段名</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@TableId</span><span class="token punctuation">(</span><span class="token string">"uid"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-TableLogic"><a href="#4-TableLogic" class="headerlink" title="4.@TableLogic"></a>4.@TableLogic</h2><h3 id="4-1逻辑删除"><a href="#4-1逻辑删除" class="headerlink" title="4.1逻辑删除"></a>4.1逻辑删除</h3><hr><blockquote><p>物理删除：真实删除，将对应数据从数据库中删除，之后查询不到此条被删除的数据</p><p>逻辑删除：假删除，将对应数据中代表是否被删除字段的状态修改为“被删除状态”，之后在数据库中仍旧能看到此条数据记录</p><p>使用场景：可以进行数据恢复</p></blockquote><h3 id="4-2实现逻辑删除"><a href="#4-2实现逻辑删除" class="headerlink" title="4.2实现逻辑删除"></a>4.2实现逻辑删除</h3><hr><ul><li><p><strong>数据库中创建逻辑删除状态列，设置默认值为0</strong></p><p><img lazyload="" alt="image" data-src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220520134529809.png"></p></li><li><p><strong>实体类中添加逻辑删除属性</strong></p><p><img lazyload="" alt="image" data-src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220520134636112.png"></p></li><li><p><strong>测试删除功能，真正执行的是修改</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDeleteById</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span><span class="token number">1527472864163348482L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">"删除成功！"</span> <span class="token operator">:</span> <span class="token string">"删除失败！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"受影响的行数为："</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img lazyload="" alt="image" data-src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220520135637388.png"></p></li><li><p><strong>此时执行查询方法，查询的结果为自动添加条件<code>is_deleted=0</code></strong></p><p><img lazyload="" alt="image" data-src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220520140036445.png"></p></li></ul><h1 id="五、条件构造器"><a href="#五、条件构造器" class="headerlink" title="五、条件构造器"></a>五、条件构造器</h1><h2 id="1-Wrapper介绍"><a href="#1-Wrapper介绍" class="headerlink" title="1.Wrapper介绍"></a>1.Wrapper介绍</h2><p><img lazyload="" alt="image" data-src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220521092812125.png"></p><ul><li><p><code>Wrapper</code> ： 条件构造抽象类，最顶端父类</p><ul><li><p><code>AbstractWrapper </code>： 用于查询条件封装，生成 sql 的 where 条件</p><ul><li><p><code>QueryWrapper </code>： 查询条件封装</p></li><li><p><code>UpdateWrapper </code>： Update 条件封装</p></li><li><p><code>AbstractLambdaWrapper </code>： 使用Lambda 语法</p><ul><li><p><code>LambdaQueryWrapper </code>：用于Lambda语法使用的查询Wrapper</p></li><li><p><code>LambdaUpdateWrapper </code>： Lambda 更新封装Wrapper</p></li></ul></li></ul></li></ul></li></ul><h2 id="2-QueryWrapper"><a href="#2-QueryWrapper" class="headerlink" title="2.QueryWrapper"></a>2.QueryWrapper</h2><ul><li><p><strong>组装查询条件</strong></p><blockquote><p><strong>执行SQL：</strong>SELECT uid AS id,username AS name,age,email,is_deleted FROM t_user WHERE is_deleted=0 AND (username LIKE ? AND age BETWEEN ? AND ? AND email IS NOT NULL)</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//查询用户名包含a，年龄在20到30之间，邮箱信息不为null的用户信息</span>    <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queryWrapper<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isNotNull</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>组装排序条件</strong></p><blockquote><p><strong>执行SQL：</strong>SELECT uid AS id,username AS name,age,email,is_deleted FROM t_user WHERE is_deleted=0 ORDER BY age DESC,id ASC</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//查询用户信息，按照年龄的降序排序，若年龄相同，则按照id升序排序</span>    <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queryWrapper<span class="token punctuation">.</span><span class="token function">orderByDesc</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orderByAsc</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>组装删除条件</strong></p><blockquote><p><strong>执行SQL：</strong>UPDATE t_user SET is_deleted=1 WHERE is_deleted=0 AND (email IS NULL)</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//删除邮箱地址为null的用户信息</span>    <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queryWrapper<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">"删除成功！"</span> <span class="token operator">:</span> <span class="token string">"删除失败！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"受影响的行数为："</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>条件的优先级</strong></p><blockquote><p><strong>执行SQL：</strong>UPDATE t_user SET user_name=?, email=? WHERE is_deleted=0 AND (age &gt; ? AND user_name LIKE ? OR email IS NULL)</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test04</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//将（年龄大于20并且用户名中包含有a）或邮箱为null的用户信息修改</span>    <span class="token class-name">UpdateWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> updateWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UpdateWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    updateWrapper<span class="token punctuation">.</span><span class="token function">gt</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"Oz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"test@oz6.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> updateWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">"修改成功！"</span> <span class="token operator">:</span> <span class="token string">"修改失败！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"受影响的行数为："</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>执行SQL：</strong>UPDATE t_user SET username=?, email=? WHERE is_deleted=0 AND (username LIKE ? AND (age &gt; ? OR email IS NULL))</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test05</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//将用户名中包含有a并且（年龄大于20或邮箱为null）的用户信息修改</span>    <span class="token class-name">UpdateWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> updateWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UpdateWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    updateWrapper<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>i<span class="token operator">-&gt;</span>i<span class="token punctuation">.</span><span class="token function">gt</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"Vz7797"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"test@ss8o.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> updateWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">"修改成功！"</span> <span class="token operator">:</span> <span class="token string">"修改失败！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"受影响的行数为："</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>组装select子句</strong></p><blockquote><p><strong>执行SQL：</strong>SELECT username,age,email FROM t_user WHERE is_deleted=0</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test06</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//查询用户的用户名、年龄、邮箱信息</span>    <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queryWrapper<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token string">"email"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> maps <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectMaps</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    maps<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>实现子查询</strong></p><blockquote><p><strong>执行SQL：</strong>SELECT uid AS id,user_name AS name,age,email,is_deleted FROM t_user WHERE is_deleted=0 AND (uid IN (select uid from t_user where uid &lt;= 100))</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test07</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//查询id小于等于100的用户信息</span>    <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queryWrapper<span class="token punctuation">.</span><span class="token function">inSql</span><span class="token punctuation">(</span><span class="token string">"uid"</span><span class="token punctuation">,</span> <span class="token string">"select uid from t_user where uid &lt;= 100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="3-UpdateWrapper"><a href="#3-UpdateWrapper" class="headerlink" title="3.UpdateWrapper"></a>3.UpdateWrapper</h2><blockquote><p>UpdateWrapper不仅拥有QueryWrapper的组装条件功能，还提供了set方法进行修改对应条件的数据库信息</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test08</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//将用户名中包含有a并且（年龄大于20或邮箱为null）的用户信息修改</span>    <span class="token class-name">UpdateWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> updateWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UpdateWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    updateWrapper<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span> i <span class="token operator">-&gt;</span> i<span class="token punctuation">.</span><span class="token function">gt</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">,</span><span class="token string">"svip@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> updateWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">"修改成功！"</span> <span class="token operator">:</span> <span class="token string">"修改失败！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"受影响的行数为："</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-condition"><a href="#4-condition" class="headerlink" title="4.condition"></a>4.condition</h2><blockquote><p>在真正开发的过程中，组装条件是常见的功能，而这些条件数据来源于用户输入，是可选的，因此我们在组装这些条件时，必须先判断用户是否选择了这些条件，若选择则需要组装该条件，若没有选择则一定不能组装，以免影响SQL执行的结果</p></blockquote><ul><li><p><strong>思路一</strong></p><blockquote><p><strong>执行SQL：</strong>SELECT uid AS id,user_name AS name,age,email,is_deleted FROM t_user WHERE is_deleted=0 AND (user_name LIKE ? AND age &lt;= ?)</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test09</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span>    <span class="token class-name">Integer</span> ageBegin <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">Integer</span> ageEnd <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>    <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//isNotBlank判断某个字符创是否不为空字符串、不为null、不为空白符</span>        queryWrapper<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token string">"user_name"</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ageBegin <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        queryWrapper<span class="token punctuation">.</span><span class="token function">ge</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> ageBegin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ageEnd <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        queryWrapper<span class="token punctuation">.</span><span class="token function">le</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> ageEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>思路二</strong></p><blockquote><p>上面的实现方案没有问题，但是代码比较复杂，我们可以使用带condition参数的重载方法构建查询条件，简化代码的编写</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test10</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span>    <span class="token class-name">Integer</span> ageBegin <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">Integer</span> ageEnd <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>    <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queryWrapper<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"user_name"</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">ge</span><span class="token punctuation">(</span>ageBegin <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">,</span> ageBegin<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">le</span><span class="token punctuation">(</span>ageEnd <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">,</span> ageEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="5-LambdaQueryWrapper"><a href="#5-LambdaQueryWrapper" class="headerlink" title="5.LambdaQueryWrapper"></a>5.LambdaQueryWrapper</h2><blockquote><p>功能等同于QueryWrapper，提供了Lambda表达式的语法可以避免填错列名。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test11</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span>    <span class="token class-name">Integer</span> ageBegin <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">Integer</span> ageEnd <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>    <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queryWrapper<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">ge</span><span class="token punctuation">(</span>ageBegin <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">,</span> ageBegin<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">le</span><span class="token punctuation">(</span>ageEnd <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">,</span> ageEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-LambdaUpdateWrapper"><a href="#6-LambdaUpdateWrapper" class="headerlink" title="6.LambdaUpdateWrapper"></a>6.LambdaUpdateWrapper</h2><blockquote><p>功能等同于UpdateWrapper，提供了Lambda表达式的语法可以避免填错列名。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test12</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//将用户名中包含有a并且（年龄大于20或邮箱为null）的用户信息修改</span>    <span class="token class-name">LambdaUpdateWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> updateWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaUpdateWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    updateWrapper<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> i<span class="token punctuation">.</span><span class="token function">gt</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getEmail</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    updateWrapper<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">,</span> <span class="token string">"小黑"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getEmail</span><span class="token punctuation">,</span><span class="token string">"abc@atguigu.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> updateWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result："</span><span class="token operator">+</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="六、常用插件"><a href="#六、常用插件" class="headerlink" title="六、常用插件"></a>六、常用插件</h1><h2 id="1-分页插件"><a href="#1-分页插件" class="headerlink" title="1.分页插件"></a>1.分页插件</h2><blockquote><p>MyBatis Plus自带分页插件，只要简单的配置即可实现分页功能</p></blockquote><ul><li><p><strong>添加配置类<code>MyBatisPlusConfig</code></strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.atguigu.mybatisplus.mapper"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBatisPlusConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">MybatisPlusInterceptor</span> <span class="token function">mybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">MybatisPlusInterceptor</span> interceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//添加分页插件</span>        interceptor<span class="token punctuation">.</span><span class="token function">addInnerInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PaginationInnerInterceptor</span><span class="token punctuation">(</span><span class="token class-name">DbType</span><span class="token punctuation">.</span><span class="token constant">MYSQL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> interceptor<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>编写测试方法</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//new Page()中的两个参数分别是当前页码，每页显示数量</span>    <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> page <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectPage</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> page<span class="token punctuation">.</span><span class="token function">getRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="2-自定义分页"><a href="#2-自定义分页" class="headerlink" title="2.自定义分页"></a>2.自定义分页</h2><blockquote><p>上面调用的是MyBatis-Plus提供的带有分页的方法，那么我们自己定义的方法如何实现分页呢？</p></blockquote><ul><li><p><strong>在<code>UserMapper</code>接口中定义一个方法</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  * 根据年龄查询用户列表，分页显示   * @param page 分页对象,xml中可以从里面进行取值,传递参数 Page 即自动分页,必须放在第一位   * @param age 年龄   * @return   */</span><span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectPageVo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"page"</span><span class="token punctuation">)</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> page<span class="token punctuation">,</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>在<code>UserMapper.xml</code>中编写SQL实现该方法</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectPageVo<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    select id,username as name,age,email from t_user where age &gt; #{age}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>编写测试方法</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPageVo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> page <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectPageVo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> page<span class="token punctuation">.</span><span class="token function">getRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="3-乐观锁"><a href="#3-乐观锁" class="headerlink" title="3.乐观锁"></a>3.乐观锁</h2><blockquote><p><strong>作用：当要更新一条记录的时候，希望这条记录没有被别人更新</strong></p></blockquote><p>乐观锁的实现方式：</p><ul><li>取出记录时，获取当前 version</li><li>更新时，带上这个 version</li><li>执行更新时， set version = newVersion where version = oldVersion</li><li>如果 version 不对，就更新失败</li></ul><h3 id="3-1场景"><a href="#3-1场景" class="headerlink" title="3.1场景"></a>3.1场景</h3><hr><ul><li>一件商品，成本价是80元，售价是100元。老板先是通知小李，说你去把商品价格增加50元。小李正在玩游戏，耽搁了一个小时。正好一个小时后，老板觉得商品价格增加到150元，价格太高，可能会影响销量。又通知小王，你把商品价格降低30元。</li><li>此时，小李和小王同时操作商品后台系统。小李操作的时候，系统先取出商品价格100元；小王也在操作，取出的商品价格也是100元。小李将价格加了50元，并将100+50=150元存入了数据库；小王将商品减了30元，并将100-30=70元存入了数据库。是的，如果没有锁，小李的操作就完全被小王的覆盖了。</li><li>现在商品价格是70元，比成本价低10元。几分钟后，这个商品很快出售了1千多件商品，老板亏1万多。</li></ul><h3 id="3-2乐观锁与悲观锁"><a href="#3-2乐观锁与悲观锁" class="headerlink" title="3.2乐观锁与悲观锁"></a>3.2乐观锁与悲观锁</h3><hr><ul><li>上面的故事，如果是乐观锁，小王保存价格前，会检查下价格是否被人修改过了。如果被修改过了，则重新取出的被修改后的价格，150元，这样他会将120元存入数据库。</li><li>如果是悲观锁，小李取出数据后，小王只能等小李操作完之后，才能对价格进行操作，也会保证最终的价格是120元。</li></ul><h3 id="3-3模拟修改冲突"><a href="#3-3模拟修改冲突" class="headerlink" title="3.3模拟修改冲突"></a>3.3模拟修改冲突</h3><hr><ul><li><p><strong>数据库中增加商品表</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> t_product <span class="token punctuation">(</span>     id <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'主键ID'</span><span class="token punctuation">,</span>     NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'商品名称'</span><span class="token punctuation">,</span>     price <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span> <span class="token keyword">COMMENT</span> <span class="token string">'价格'</span><span class="token punctuation">,</span>     VERSION <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span> <span class="token keyword">COMMENT</span> <span class="token string">'乐观锁版本号'</span><span class="token punctuation">,</span>     <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>添加一条数据</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_product <span class="token punctuation">(</span>id<span class="token punctuation">,</span> NAME<span class="token punctuation">,</span> price<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'外星人笔记本'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>添加一个实体类<code>Product</code></strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> price<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> version<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>添加一个Mapper接口<code>ProductMapper</code></strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ProductMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Product</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>测试方法</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testProduct01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//1.小李获取商品价格</span>    <span class="token class-name">Product</span> productLi <span class="token operator">=</span> productMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小李获取的商品价格为："</span> <span class="token operator">+</span> productLi<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2.小王获取商品价格</span>    <span class="token class-name">Product</span> productWang <span class="token operator">=</span> productMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小李获取的商品价格为："</span> <span class="token operator">+</span> productWang<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//3.小李修改商品价格+50</span>    productLi<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span>productLi<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    productMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>productLi<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//4.小王修改商品价格-30</span>    productWang<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span>productWang<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    productMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>productWang<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//5.老板查询商品价格</span>    <span class="token class-name">Product</span> productBoss <span class="token operator">=</span> productMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"老板获取的商品价格为："</span> <span class="token operator">+</span> productBoss<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>执行结果</strong></p><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/image-20220521225803162.png"></p></li></ul><h3 id="3-4乐观锁解决问题"><a href="#3-4乐观锁解决问题" class="headerlink" title="3.4乐观锁解决问题"></a>3.4乐观锁解决问题</h3><hr><ul><li><p><strong>实体类<code>version</code>字段添加注解<code>@Version</code></strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> price<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Version</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> version<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>添加乐观锁插件配置</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">MybatisPlusInterceptor</span> <span class="token function">mybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">MybatisPlusInterceptor</span> interceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//添加分页插件</span>    interceptor<span class="token punctuation">.</span><span class="token function">addInnerInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PaginationInnerInterceptor</span><span class="token punctuation">(</span><span class="token class-name">DbType</span><span class="token punctuation">.</span><span class="token constant">MYSQL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//添加乐观锁插件</span>    interceptor<span class="token punctuation">.</span><span class="token function">addInnerInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OptimisticLockerInnerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> interceptor<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>再次执行测试方法</strong></p><blockquote><p>小李查询商品信息：</p><p>​SELECT id,name,price,version FROM t_product WHERE id=?</p><p>小王查询商品信息：</p><p>​SELECT id,name,price,version FROM t_product WHERE id=?</p><p>小李修改商品价格，自动将version+1</p><p>​UPDATE t_product SET name=?, price=?, version=? WHERE id=? AND version=?</p><p>​Parameters: 外星人笔记本(String), 150(Integer), 1(Integer), 1(Long), 0(Integer)</p><p>小王修改商品价格，此时version已更新，条件不成立，修改失败</p><p>​UPDATE t_product SET name=?, price=?, version=? WHERE id=? AND version=?</p><p>​Parameters: 外星人笔记本(String), 70(Integer), 1(Integer), 1(Long), 0(Integer)</p><p>最终，小王修改失败，查询价格：150</p><p>​SELECT id,name,price,version FROM t_product WHERE id=?</p></blockquote></li><li><p><strong>优化执行流程</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testProduct01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//1.小李获取商品价格</span>    <span class="token class-name">Product</span> productLi <span class="token operator">=</span> productMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小李获取的商品价格为："</span> <span class="token operator">+</span> productLi<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2.小王获取商品价格</span>    <span class="token class-name">Product</span> productWang <span class="token operator">=</span> productMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小李获取的商品价格为："</span> <span class="token operator">+</span> productWang<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//3.小李修改商品价格+50</span>    productLi<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span>productLi<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    productMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>productLi<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//4.小王修改商品价格-30</span>    productWang<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span>productWang<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> productMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>productWang<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//操作失败，重试</span>        <span class="token class-name">Product</span> productNew <span class="token operator">=</span> productMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        productNew<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span>productNew<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        productMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>productNew<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//5.老板查询商品价格</span>    <span class="token class-name">Product</span> productBoss <span class="token operator">=</span> productMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"老板获取的商品价格为："</span> <span class="token operator">+</span> productBoss<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img lazyload="" alt="image" data-src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220521230448577.png"></p></li></ul><h1 id="七、通用枚举"><a href="#七、通用枚举" class="headerlink" title="七、通用枚举"></a>七、通用枚举</h1><blockquote><p>表中的有些字段值是固定的，例如性别（男或女），此时我们可以使用MyBatis-Plus的通用枚举来实现</p></blockquote><ul><li><p><strong>数据库表添加字段<code>sex</code></strong></p><p><img lazyload="" alt="image" data-src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220521231317777.png"></p></li><li><p><strong>创建通用枚举类型</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Getter</span><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">SexEnum</span> <span class="token punctuation">{</span>    <span class="token function">MALE</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">FEMALE</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"女"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@EnumValue</span> <span class="token comment">//将注解所标识的属性的值存储到数据库中</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> sex<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> sexName<span class="token punctuation">;</span>    <span class="token class-name">SexEnum</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> sex<span class="token punctuation">,</span> <span class="token class-name">String</span> sexName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sexName <span class="token operator">=</span> sexName<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>User实体类中添加属性sex</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>    <span class="token annotation punctuation">@TableLogic</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> isDeleted<span class="token punctuation">;</span>  <span class="token comment">//逻辑删除</span>    <span class="token keyword">private</span> <span class="token class-name">SexEnum</span> sex<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>配置扫描通用枚举</strong></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#MyBatis-Plus相关配置</span><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>  <span class="token comment">#指定mapper文件所在的地址</span>  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mapper/<span class="token important">*.xml</span>  <span class="token key atrule">configuration</span><span class="token punctuation">:</span>    <span class="token comment">#配置日志</span>    <span class="token key atrule">log-impl</span><span class="token punctuation">:</span> org.apache.ibatis.logging.stdout.StdOutImpl  <span class="token key atrule">global-config</span><span class="token punctuation">:</span>    <span class="token key atrule">banner</span><span class="token punctuation">:</span> off    <span class="token key atrule">db-config</span><span class="token punctuation">:</span>      <span class="token comment">#配置mp的主键策略为自增</span>      <span class="token key atrule">id-type</span><span class="token punctuation">:</span> auto      <span class="token comment"># 设置实体类所对应的表的统一前缀</span>      <span class="token key atrule">table-prefix</span><span class="token punctuation">:</span> t_  <span class="token comment">#配置类型别名所对应的包</span>  <span class="token key atrule">type-aliases-package</span><span class="token punctuation">:</span> com.atguigu.mybatisplus.pojo  <span class="token comment"># 扫描通用枚举的包</span>  <span class="token key atrule">type-enums-package</span><span class="token punctuation">:</span> com.atguigu.mybatisplus.enums<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>执行测试方法</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token class-name">SexEnum</span><span class="token punctuation">.</span><span class="token constant">MALE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result:"</span><span class="token operator">+</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="八、多数据源"><a href="#八、多数据源" class="headerlink" title="八、多数据源"></a>八、多数据源</h1><blockquote><p>适用于多种场景：纯粹多库、 读写分离、 一主多从、 混合模式等</p></blockquote><p>场景说明：</p><p>我们创建两个库，分别为：<code>mybatis_plus</code>（以前的库不动）与<code>mybatis_plus_1</code>（新建），将mybatis_plus库的<code>product</code>表移动到mybatis_plus_1库，这样每个库一张表，通过一个测试用例分别获取用户数据与商品数据，如果获取到说明多库模拟成功</p><h2 id="1-创建数据库及表"><a href="#1-创建数据库及表" class="headerlink" title="1.创建数据库及表"></a>1.创建数据库及表</h2><ul><li><p><strong>创建数据库<code>mybatis_plus_1</code>和表`product</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token identifier"><span class="token punctuation">`</span>mybatis_plus_1<span class="token punctuation">`</span></span> <span class="token comment">/*!40100 DEFAULT CHARACTER SET utf8mb4 */</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token identifier"><span class="token punctuation">`</span>mybatis_plus_1<span class="token punctuation">`</span></span><span class="token punctuation">;</span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> product <span class="token punctuation">(</span>     id <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'主键ID'</span><span class="token punctuation">,</span>     name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'商品名称'</span><span class="token punctuation">,</span>     price <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span> <span class="token keyword">COMMENT</span> <span class="token string">'价格'</span><span class="token punctuation">,</span>     version <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span> <span class="token keyword">COMMENT</span> <span class="token string">'乐观锁版本号'</span><span class="token punctuation">,</span>     <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>添加测试数据</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> product <span class="token punctuation">(</span>id<span class="token punctuation">,</span> NAME<span class="token punctuation">,</span> price<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'外星人笔记本'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>删除<code>mybatis_plus</code>库中的<code>product</code>表</strong> </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">use</span> mybatis_plus<span class="token punctuation">;</span> <span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> product<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h2 id="2-新建工程引入依赖"><a href="#2-新建工程引入依赖" class="headerlink" title="2.新建工程引入依赖"></a>2.新建工程引入依赖</h2><blockquote><p><strong>自行新建一个Spring Boot工程并选择MySQL驱动及Lombok依赖</strong></p></blockquote><p><strong>引入MyBaits-Plus的依赖及多数据源的依赖</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.5.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>dynamic-datasource-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.5.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-编写配置文件"><a href="#3-编写配置文件" class="headerlink" title="3.编写配置文件"></a>3.编写配置文件</h2><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token comment"># 配置数据源信息</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">dynamic</span><span class="token punctuation">:</span>      <span class="token comment"># 设置默认的数据源或者数据源组,默认值即为master</span>      <span class="token key atrule">primary</span><span class="token punctuation">:</span> master      <span class="token comment"># 严格匹配数据源,默认false.true未匹配到指定数据源时抛异常,false使用默认数据源</span>      <span class="token key atrule">strict</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>      <span class="token key atrule">datasource</span><span class="token punctuation">:</span>        <span class="token key atrule">master</span><span class="token punctuation">:</span>          <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/mybatis_plus<span class="token punctuation">?</span>characterEncoding=utf<span class="token punctuation">-</span>8<span class="token important">&amp;useSSL=false</span>          <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver          <span class="token key atrule">username</span><span class="token punctuation">:</span> root          <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">132537</span>        <span class="token key atrule">slave_1</span><span class="token punctuation">:</span>          <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/mybatis_plus_1<span class="token punctuation">?</span>characterEncoding=utf<span class="token punctuation">-</span>8<span class="token important">&amp;useSSL=false</span>          <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver          <span class="token key atrule">username</span><span class="token punctuation">:</span> root          <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">132537</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-创建实体类"><a href="#4-创建实体类" class="headerlink" title="4.创建实体类"></a>4.创建实体类</h2><ul><li><p>新建一个<code>User</code>实体类（如果数据库表名有t_前缀记得配置）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>新建一个实体类<code>Product</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> price<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> version<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="5-创建Mapper及Service"><a href="#5-创建Mapper及Service" class="headerlink" title="5.创建Mapper及Service"></a>5.创建Mapper及Service</h2><ul><li><p>新建接口<code>UserMapper</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>新建接口<code>ProductMapper</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ProductMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Product</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>新建Service接口<code>UserService</code>指定操作的数据源</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@DS</span><span class="token punctuation">(</span><span class="token string">"master"</span><span class="token punctuation">)</span> <span class="token comment">//指定操作的数据源，master为user表</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token keyword">extends</span> <span class="token class-name">IService</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>新建Service接口<code>ProductService</code>指定操作的数据源</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@DS</span><span class="token punctuation">(</span><span class="token string">"slave_1"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ProductService</span> <span class="token keyword">extends</span> <span class="token class-name">IService</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Product</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>自行建立Service的实现类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="6-编写测试方法"><a href="#6-编写测试方法" class="headerlink" title="6.编写测试方法"></a>6.编写测试方法</h2><blockquote><p><strong>记得在启动类中添加注解<code>@MapperScan()</code></strong></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">TestDatasourceApplicationTests</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Resource</span><span class="token class-name">UserService</span> userService<span class="token punctuation">;</span><span class="token annotation punctuation">@Resource</span><span class="token class-name">ProductService</span> productService<span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">User</span> user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Product</span> product <span class="token operator">=</span> productService<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"User = "</span> <span class="token operator">+</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Product = "</span> <span class="token operator">+</span> product<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img lazyload="" alt="image" data-src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220522113049945.png"></p><h1 id="九、MyBatisX插件"><a href="#九、MyBatisX插件" class="headerlink" title="九、MyBatisX插件"></a>九、MyBatisX插件</h1><blockquote><p>MyBatis-Plus为我们提供了强大的mapper和service模板，能够大大的提高开发效率。</p><p>但是在真正开发过程中，MyBatis-Plus并不能为我们解决所有问题，例如一些复杂的SQL，多表联查，我们就需要自己去编写代码和SQL语句，我们该如何快速的解决这个问题呢，这个时候可以使用MyBatisX插件。</p><p>MyBatisX一款基于 IDEA 的快速开发插件，为效率而生。</p></blockquote><h2 id="1-安装MyBatisX插件"><a href="#1-安装MyBatisX插件" class="headerlink" title="1.安装MyBatisX插件"></a>1.安装MyBatisX插件</h2><blockquote><p><strong>打开IDEA，File-&gt; Setteings-&gt;Plugins-&gt;MyBatisX，搜索栏搜索MyBatisX然后安装。</strong></p></blockquote><p><img lazyload="" alt="image" data-src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220522115718361.png"></p><h2 id="2-快速生成代码"><a href="#2-快速生成代码" class="headerlink" title="2.快速生成代码"></a>2.快速生成代码</h2><ul><li><p>新建一个Spring Boot项目引入依赖（创建工程时记得勾选lombok及mysql驱动）</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.5.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>dynamic-datasource-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.5.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置数据源信息</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> com.zaxxer.hikari.HikariDataSource    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/mybatis_plus<span class="token punctuation">?</span>characterEncoding=utf<span class="token punctuation">-</span>8<span class="token important">&amp;useSSL=false</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">132537</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在IDEA中与数据库建立链接</p><p><img lazyload="" alt="image" data-src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220522120758740.png"></p></li><li><p>填写数据库信息并保存</p><p><img lazyload="" alt="image" data-src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220522121434468.png"></p></li><li><p>找到我们需要生成的表点击右键</p><p><img lazyload="" alt="image" data-src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220522121613909.png"></p></li><li><p>填写完信息以后下一步</p><p><img lazyload="" alt="image" data-src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220522122127649.png"></p></li><li><p>继续填写信息</p><p><img lazyload="" alt="image" data-src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220522122525598.png"></p></li><li><p><strong>大功告成（真特么好用yyds）</strong></p><p><img lazyload="" alt="image" data-src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220522122612334.png"></p></li></ul><h2 id="3-快速生成CRUD"><a href="#3-快速生成CRUD" class="headerlink" title="3.快速生成CRUD"></a>3.快速生成CRUD</h2><blockquote><p>MyBaitsX可以根据我们在Mapper接口中输入的方法名快速帮我们生成对应的sql语句</p></blockquote><p><img lazyload="" alt="image" data-src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220522123143852.png"></p><p><img lazyload="" alt="image" data-src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220522123202310.png"></p><h1 id="十、致谢"><a href="#十、致谢" class="headerlink" title="十、致谢"></a>十、致谢</h1><p>感谢尚硅谷杨博超老师：<a class="link" href="https://www.bilibili.com/video/BV12R4y157Be?p=1">https://www.bilibili.com/video/BV12R4y157Be?p=1<i class="fas fa-external-link-alt"></i></a></p><p>感谢MyBatis-Plus作者苞米豆：<a class="link" href="https://baomidou.com/">https://baomidou.com/<i class="fas fa-external-link-alt"></i></a></p>]]></content>
      
      
      <categories>
          
          <category> java后端 </category>
          
          <category> 持久层 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统笔记</title>
      <link href="/2023/04/05/OS%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/04/05/OS%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="OS笔记"><a href="#OS笔记" class="headerlink" title="OS笔记"></a>OS笔记</h2><h3 id="一、操作系统引论"><a href="#一、操作系统引论" class="headerlink" title="一、操作系统引论"></a>一、操作系统引论</h3><h4 id="1-1-操作系统的目标和作用"><a href="#1-1-操作系统的目标和作用" class="headerlink" title="1.1 操作系统的目标和作用"></a>1.1 操作系统的目标和作用</h4><h5 id="1-1-1-操作系统的目标"><a href="#1-1-1-操作系统的目标" class="headerlink" title="1.1.1 操作系统的目标"></a>1.1.1 操作系统的目标</h5><ul><li><p><strong>方便性</strong></p></li><li><p><strong>有效性</strong></p><ol><li>提高系统资源利用率</li><li>提高系统吞吐量</li></ol></li><li><p><em><strong>可扩充性</strong></em></p></li><li><p><strong>开放性</strong></p></li></ul><h5 id="1-1-2-操作系统的作用"><a href="#1-1-2-操作系统的作用" class="headerlink" title="1.1.2 操作系统的作用"></a>1.1.2 操作系统的作用</h5><ul><li>作为用户与计算机硬件系统之间的接口</li><li>作为计算机系统资源的管理者</li><li>实现了对计算机资源的抽象</li></ul><h5 id="1-1-3-操作系统的功能"><a href="#1-1-3-操作系统的功能" class="headerlink" title="1.1.3 操作系统的功能"></a>1.1.3 操作系统的功能</h5><ol><li><p>处理器管理</p><ol><li>进程控制</li><li>进程同步</li><li>进程通信</li><li>调度</li></ol></li><li><p>存储器管理</p><ol><li>内存分配</li><li>内存保护</li><li>地址映射</li><li>内存扩充</li></ol><p></p></li><li><p>I/O设备管理</p><ol><li>缓存管理</li><li>设备分配</li><li>设备处理</li></ol></li><li><p>文件管理</p><ol><li>文件存储空间的管理</li><li>目录管理</li><li>文件的读写管理和保护</li></ol></li></ol><h5 id="1-1-4-操作系统发展的主要动力"><a href="#1-1-4-操作系统发展的主要动力" class="headerlink" title="1.1.4 操作系统发展的主要动力"></a>1.1.4 操作系统发展的主要动力</h5><ul><li>不断提高计算机资源利用率</li></ul><h5 id="1-1-5-操作系统的特征"><a href="#1-1-5-操作系统的特征" class="headerlink" title="1.1.5  操作系统的特征"></a>1.1.5  操作系统的特征</h5><ol><li><p>并发性</p><ul><li>同一时间间隔内执行和调度多个程序的能力</li></ul></li><li><p>并行性</p><ul><li>同一时刻执行的事件</li></ul></li><li><p>共享性</p><ul><li>系统中的资源供多个并发执行的应用程序同时使用<ul><li>同时共享</li><li>独占共享</li></ul></li></ul></li><li><p>虚拟</p><ul><li><p>时分复用</p><ul><li>虚拟处理器 四核八线程</li></ul></li><li><p>空分复用</p><ul><li>虚拟磁盘 (分区)</li></ul></li></ul></li><li><p>异步</p><ul><li>多道环境下，允许多个程序并发执行</li><li>单处理环境下，允许多个程序分时交替执行</li></ul></li></ol><h4 id="1-2-操作系统的发展过程"><a href="#1-2-操作系统的发展过程" class="headerlink" title="1.2 操作系统的发展过程"></a>1.2 操作系统的发展过程</h4><h5 id="1-2-1-未配置操作系统的计算机系统"><a href="#1-2-1-未配置操作系统的计算机系统" class="headerlink" title="1.2.1 未配置操作系统的计算机系统"></a>1.2.1 未配置操作系统的计算机系统</h5><ul><li><p>人工操作方式</p></li><li><p>脱机输入/输出方式</p></li></ul><h5 id="1-2-2-单道批处理系统"><a href="#1-2-2-单道批处理系统" class="headerlink" title="1.2.2 单道批处理系统"></a>1.2.2 单道批处理系统</h5><ol><li><em>单道批处理系统执行流程</em></li></ol><p><a href="https://imgse.com/i/vvFDLn"><img lazyload="" alt="image" data-src="https://s1.ax1x.com/2022/09/14/vvFDLn.png"></a></p><ol start="2"><li><p>文字描述</p><p>先把一批作业以脱机方式输入到磁带上，并在系统中配上监督（Monitor)，在它的控制下，使这批作业能一个接一个地连续处理。其处理过程是：首先由监督程序将磁带上的第一个作业装入内存，并把运行控制权交给该作业；当该作业处理完成时，又把控制权交还给监督程序，再由监督程序把磁带上的第二个作业调入内存</p></li><li><p><strong>单道批处理系统的缺点</strong></p></li></ol><ul><li>单道批处理系统最主要的缺点是，系统中的资源得不到充分的利用。</li></ul><h5 id="1-2-3-多道批处理系统"><a href="#1-2-3-多道批处理系统" class="headerlink" title="1.2.3 多道批处理系统"></a>1.2.3 多道批处理系统</h5><ol><li><p><strong>多道批程序设计的基本概念</strong></p><p>用户所提交的作业先存在外存上，并排成一个队列，成为<strong>后备队列</strong>。然后由作业系统调度程序按照一定的算法，从后备队列中选择若干个作业调入内存，使它们共享CPU和系统的各种资源。</p></li><li><p><strong>多道批处理系统的优缺点</strong></p><ol><li>资源利用率高</li><li>系统吞吐量大</li><li>平均周转时间长</li><li>无交互能力</li></ol></li><li><p><strong>需要解决的问题</strong></p><ol><li>处理机争用问题</li><li>内存分配和保护问题</li><li>IO设备分配问题</li><li>文件的组织和管理问题</li><li>作业管理问题</li><li>用户与系统的接口问题</li></ol></li></ol><h5 id="操作系统的概念"><a href="#操作系统的概念" class="headerlink" title="操作系统的概念"></a><font color="red">操作系统的概念</font></h5><ul><li>操作系统是一组能有效的组织和管理计算机硬件和软件资源，合理的对各类作业进行调度，以方便用户使用的程序集合。</li></ul><h5 id="1-2-4-分时系统-Time-Sharing-System"><a href="#1-2-4-分时系统-Time-Sharing-System" class="headerlink" title="1.2.4 分时系统(Time Sharing System)"></a>1.2.4 分时系统(Time Sharing System)</h5><p><strong>1. 分时系统的引入</strong></p><ul><li><p>推动分时系统形成和发展的主要动力是<font color="red">用户对人机交互的需求。</font></p></li><li><p>用户需求的具体体现 </p><ol><li><p>人机交互</p></li><li><p>共享主机</p></li></ol></li><li><p>分时系统是什么？</p></li><li><p><strong>分时系统是指在一台主机上连接了多个配有显示器和键盘的终端并由此所组成的系统，该系统允许多个用户通过自己的终端，以交互方式使用计算机，共享主机中的资源。</strong></p></li></ul><p><strong>2. 实时操作系统</strong></p><ul><li><p>与分时系统比较</p><ol><li>多路性</li><li>独立性</li><li>及时性</li><li>交互性</li><li>可靠性:多级容错，保障系统安全</li></ol></li></ul><h4 id="1-3-操作系统体系结构"><a href="#1-3-操作系统体系结构" class="headerlink" title="1.3  操作系统体系结构"></a>1.3  操作系统体系结构</h4><h5 id="1-3-1-操作系统的运行机制"><a href="#1-3-1-操作系统的运行机制" class="headerlink" title="1.3.1 操作系统的运行机制"></a>1.3.1 操作系统的运行机制</h5><p><a href="https://imgse.com/i/vz0sJI"><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/markdownvz0sJI.png"></a></p><ol><li><p>时钟管理</p><ol><li>计时–&gt;提供系统时间</li><li>时钟中断–&gt;进程切换</li></ol></li><li><p>中断机制</p><ol><li><p>提到多道程序的CPU利用率</p></li><li><p>外中断：中断信号来源于–&gt;外部设备</p></li><li><p>内中断：中断信号来源于–&gt;当前指令</p></li><li><p>中断机制处理</p><p><a href="https://imgse.com/i/vzDOIJ"><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/markdownvzDOIJ.png"></a></p></li></ol></li><li><p>原语</p><ol><li>由若干条指令组成</li><li>用来完成某个特定功能</li><li>执行过程不会被中断–&gt;原子性</li></ol></li><li><p>系统数据结构</p><ol><li>进程管理：作业控制块、进程控制块</li><li>存储器管理：存储器分配与回收</li><li>设备管理：缓冲区、设备控制块</li></ol></li><li><p>系统调用</p><ol><li>由操作系统实现，给应用程序调用</li><li>是一套接口的集合</li><li>应用程序访问内核的方式</li></ol></li></ol><h4 id="1-4-操作系统的体系结构"><a href="#1-4-操作系统的体系结构" class="headerlink" title="1.4 操作系统的体系结构"></a>1.4 操作系统的体系结构</h4><ol><li>无结构OS</li><li>模块化OS</li><li>分层式结构OS</li><li>微内核OS</li></ol><h3 id="二、进程管理"><a href="#二、进程管理" class="headerlink" title="二、进程管理"></a>二、进程管理</h3><h4 id="2-1-什么是进程"><a href="#2-1-什么是进程" class="headerlink" title="2.1  什么是进程"></a>2.1  什么是进程</h4><ol><li><p>进程是一个具用特定功能的查询关于某个数据集合的一次运行活动，是系统进行<font color="red">资源分配和调度</font>的一个独立单位。</p><ul><li>进程是程序的一次执行</li><li>进程是一个程序在处理机上顺序执行时所发生的<font color="red">活动</font></li><li>进程是程序在一个<font color="red">数据集合</font>上运行的过程</li><li>进程是系统进行<font color="red">资源分配和调度</font>的一个<font color="red">独立单位</font></li></ul><p>系统会为每一个进程分配一定的内存空间，该内存空间为该进程私享</p></li></ol><h5 id="2-1-1-进程的结构"><a href="#2-1-1-进程的结构" class="headerlink" title="2.1.1 进程的结构"></a>2.1.1 进程的结构</h5><p><a href="https://imgse.com/i/vz6hwT"><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/markdownvz6hwT.png"></a></p><ul><li>控制块 PCB<ul><li>一个进程对应一个PCB，处理机通过PCB对进程进行管理。</li></ul></li><li>数据段</li><li>程序段</li></ul><h5 id="2-1-2-进程的特征"><a href="#2-1-2-进程的特征" class="headerlink" title="2.1.2 进程的特征"></a>2.1.2 进程的特征</h5><ol><li>动态性:由创建而生，由撤销而亡。</li><li>并发性：多个进程同时运行</li><li>独立性：独立资源分配<ul><li>每个进程都有自己的独立内存空间，进程内的线程都公共享用。</li></ul></li><li>异步性：相互独立、互不干扰<ul><li>当一个进程阻塞时，并不影响其他进程的运行。</li></ul></li></ol><h4 id="2-2-线程的概念"><a href="#2-2-线程的概念" class="headerlink" title="2.2  线程的概念"></a>2.2  线程的概念</h4><ol><li>Thread  j进程的轻型实体，是一系列活动按事先设定好的顺序依次执行的过程，是一系列的集合。</li><li>是一条执行路径不能单独存在，必须包含在进程中</li><li>线程是OS中运算调度的最小单位</li></ol><h5 id="2-2-1-线程的属性"><a href="#2-2-1-线程的属性" class="headerlink" title="2.2.1 线程的属性"></a>2.2.1 线程的属性</h5><ul><li>轻型实体</li><li>独立调度和分配资源的基本单位</li><li>可并发执行</li><li>共享进程资源</li></ul><h5 id="2-2-2-线程的实现方式"><a href="#2-2-2-线程的实现方式" class="headerlink" title="2.2.2 线程的实现方式"></a>2.2.2 线程的实现方式</h5><ol><li><p>用户级线程</p><ol><li>线程间的切换由进程进行管理，不需要访问内核,<ul><li>线程同属于一个进程，同属于一块内存空间，在进程内就能完成切换</li></ul></li></ol></li><li><p>内核级线程</p><ol><li><p>线程切换的开销比较大，但运行效率高</p><ul><li><p>因为每次切换线程都需要访问到内核对应的进程，</p><p>在访问目标切换到的线程对应的内核，在访问到目标线程进行·切换</p></li><li><p>操作是在内核完成的，所有执行效率较高</p></li></ul></li></ol></li></ol><p><a href="https://imgse.com/i/vz2ieP"><img lazyload="" alt="image" data-src="https://s1.ax1x.com/2022/09/16/vz2ieP.png"></a></p><h4 id="2-3-进程与线程比较"><a href="#2-3-进程与线程比较" class="headerlink" title="2.3 进程与线程比较"></a>2.3 进程与线程比较</h4><ul><li><p><strong>一句话 ： <font color="red">&nbsp;线程相对于进程，大大的降低创建、撤销和切换可执行实体的成本和难度</font></strong></p></li><li><p>调度 <font color="red">调度的基本单位是线程</font></p></li><li><p>拥有资源 <font color="red">线程不拥有资源，而是从进程中获取,只有使用权</font></p></li><li><p>并发性  引入进程和线程都是为了提高并发性</p></li><li><p>系统开销  <font color="red">创建和撤销进程以及进程切换的开销较高，而线程相对于小很多</font></p></li><li><p>地址空间和其他资源  <font color="red">进程相互独立，线程共享进程的内存空间，线程中的寄存器资源是独立的</font></p></li><li><p>通信 <font color="red">线程可以直接进行通信</font></p></li></ul><h4 id="2-4-进程的基本形态"><a href="#2-4-进程的基本形态" class="headerlink" title="2.4  进程的基本形态"></a>2.4  进程的基本形态</h4><ul><li><p>就绪（Ready）</p><ul><li>此时该进程以获取的需要的资源，等待进程调度执行</li></ul></li><li><p>执行（Running）</p></li><li><p>阻塞 (Blocked)</p></li></ul><p><a href="https://imgse.com/i/vzW5Rg"><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/markdownvzW5Rg.png"></a></p><p>进程得到允许后进入就绪状态，就绪底层数据结构是队列，先进先出，当进程得到调度进入运行状态，执行完毕后释放资源,如果运行中有IO处理等其他业务，会进入阻塞状态（同样，阻塞底层数据结构也是队列）等待数据处理完毕，在继续运行。如果中间出现异常，执行异常处理，异常无法抛出，进程终止。</p><h4 id="2-5-进程控制"><a href="#2-5-进程控制" class="headerlink" title="2.5 进程控制"></a>2.5 进程控制</h4><h5 id="2-5-1-进程控制的方法"><a href="#2-5-1-进程控制的方法" class="headerlink" title="2.5.1  进程控制的方法"></a>2.5.1  进程控制的方法</h5><ul><li><p><strong>OS通过<font color="red">原语</font>对进程进行控制</strong></p><ul><li>原语由一些指令组成，这些指令一般是执行效率非常高。</li><li>通过这些指令对进程进行创建，撤销，挂起，阻塞，挂起，唤醒，进程切换的操作。<ul><li>原语具有<font color="red">原子性</font>的特点，即原语中的操作，要么全做要么全不做,不会被中断。</li></ul></li><li>原语控制进程的函数</li><li><a href="https://imgse.com/i/vzoYse"><img lazyload="" alt="image" data-src="https://s1.ax1x.com/2022/09/16/vzoYse.png"></a></li></ul></li></ul><h5 id="2-5-2-进程控制：挂起与激活"><a href="#2-5-2-进程控制：挂起与激活" class="headerlink" title="2.5.2 进程控制：挂起与激活"></a>2.5.2 进程控制：挂起与激活</h5><ul><li>目的：为了系统和用户观察和分析进程</li><li><a href="https://imgse.com/i/vzHExf"><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/markdownvzHExf.png"></a></li><li>挂起原语：<strong>suspend</strong><ul><li>静止就绪:放外存，不调度，原因：进程一直没有得到调度。</li><li>静止阻塞：等待事件 某个进程长期处于阻塞队列，会占用内存资源，所以要挂起进入静止阻塞状态。</li><li>Tips:<font color="red">在运行状态不能执行挂机原语，在进程进入阻塞状态，或处于就绪状态，才可以挂起</font>，进入阻塞状态的线程被挂起，将数据放在外存，被激活后重新将数据恢复到内存</li></ul></li><li>激活原语：active</li></ul><h5 id="2-5-3-处理机调度"><a href="#2-5-3-处理机调度" class="headerlink" title="2.5.3  处理机调度"></a>2.5.3  处理机调度</h5><ul><li><p>根据算法和原则将处理机资源进行重新分配</p></li><li><p><strong>前提</strong>：进程数远大于处理机数</p></li><li><p><strong>目的</strong>：提高资源利用率，减少处理机空闲时间</p></li><li><p><strong>调度的层次</strong> </p></li><li><p><strong>高级调度/作业调度</strong></p><ul><li><p>把后备作业调入内存</p></li><li><p>只调入一次，调出一次</p><ul><li><strong>人话：<font color="red">将磁盘安装的应用程序打开，转换为内存中进程</font></strong></li></ul></li><li><p><strong>中级调度/内存调度</strong></p></li></ul></li><li><p>​将<font color="red">进程</font>调至外存，条件合适在调入内存<br>​    - 人话：此时进程在内存中，由于IO等原因，长时间处于阻塞状态，通过内存调度转换为静态阻塞，将进程调入到外存。可以执行多次调度。 </p><ul><li>在内外存对换区进行进程交换</li></ul></li><li><p><strong>低级调度/进程调度</strong></p><ul><li>从就绪队列选取分配给处理机<ul><li>按照某种算法将就绪队列进程分配给处理机</li><li>最基本的调度，频率非常高</li></ul></li></ul></li><li><p><strong>调度方式</strong> </p></li><li><p><strong>剥夺式/抢占式调度</strong></p><ul><li>立即暂停当前进程<ul><li>直接暂停正在执行的进，将处理机资源按照原则交给另一个。</li></ul></li><li>分配处理机给另一个进程</li><li>原则：优先权/短进程优先/时间片原则</li><li><strong>非剥夺/非抢占式调度</strong><ul><li>若有进程请求执行</li><li>等待直到当前进程完成或阻塞</li><li>缺点：适用于批处理系统，不适用于分时/实时系统</li></ul></li></ul></li><li><p><strong>调度时机</strong></p><ul><li>进程运行完毕</li><li>进程时间片用完</li><li>进程要求IO操作</li><li>进程执行某种原语</li><li>高优先级进程申请运行（剥夺式调度）</li></ul></li></ul><h5 id="2-5-4-调度算法"><a href="#2-5-4-调度算法" class="headerlink" title="2.5.4 调度算法"></a>2.5.4 调度算法</h5><ul><li><p>进程调度：**<font color="red">先来先服务（FCFS,First Come First Served）</font>**</p><ul><li><strong>算法内容</strong>：调度<font color="red">作业/就绪队列</font>里的进程最先入队者,等待操作完成或阻塞。<ul><li>阻塞后会进入阻塞队列，同样的也需要等待处理机调度。</li></ul></li><li><strong>算法原则</strong>：按进程入队顺序执行</li><li><strong>调度方式</strong>：非抢占式调度</li><li><strong>适用场景</strong>：作业/进程调度</li><li><strong>优缺点</strong>：<ul><li><font color="red">有利于CPU繁忙作业，充分利用CPU资源</font><ul><li>处理需要大量计算的数据，需要充分利用CPU资源以快速得到运算结果。</li></ul></li><li>不利于IO繁忙型作业，操作耗时。<ul><li>如果当前进程一直在进行IO操作，会导致后面的进程一直处于等待状态，一直得不到处理机调度。</li></ul></li></ul></li></ul></li><li><p>短作业优先（SJF，Shortest Job First）</p><ul><li><p><strong>算法内容：</strong>所需服务时间最短的<font color="red">作业/进程</font>优先执行</p><ul><li>从就绪队列·中取出剩余时间最短的进程执行</li><li>Tips:就绪队列中优先检查曾经阻塞过，被恢复到就绪队列，这时进程已经运行过一段时间，所以是按照最短剩余时间来优先执行</li></ul></li><li><p><strong>算法原则：</strong>最求最少的平均（带权）周转时间，</p><ul><li><p>什么是带权周转时间？</p><ul><li><p>作业周转时间与系统为作业提供的服务时间的比值</p><p>这个比值就是带权周转时间，带权周转时间越大作业越短。</p></li></ul></li></ul></li><li><p><strong>调度方式：</strong> SJF/SPF非抢占式</p></li><li><p><strong>使用场景：</strong>作业/进程调度</p></li><li><p><strong>优缺点：</strong></p><ul><li><font color="red">平均等待/周转时间最少</font></li><li>长作业时间会增加或饥饿<ul><li>耗时较长的进程一直得不到调度</li></ul></li><li>估计时间不准确，不能保证紧迫任务及时处理</li></ul></li></ul></li><li><p>高响应比优先调度（Highest Response Ratio Next, HRRN）</p><ul><li><strong>算法内容：</strong>结合FCFS和SFJ，综合考虑等待时间和服务时间计算响应比，高的优先调度</li><li><strong>算法原则：</strong>综合考虑作业/进程的等待时间和服务时间</li><li><strong>调度方式：</strong>非抢占式</li><li><strong>适用场景：</strong>作业/进程调度</li><li><strong>响应比计算：</strong><ul><li>响应比=（等待时间+服务时间）/服务时间&gt;=1</li><li>只有当前进程放弃执行权（完成或者阻塞时），重新计算所有进程响应比</li><li><font color="red">长作业等待越久响应比越高，更容易获得处理机</font></li></ul></li></ul></li><li><p>优先级调度(Highest Priority First，HPF)</p><ul><li><strong>算法内容：</strong>按作业/进程的优先级进行调度</li><li><strong>算法原则：</strong>优先级最高（紧迫程度）的作业/进程先调度</li><li><strong>调度方式：</strong>抢占/非抢占式（并不能获得及时执行）</li><li><strong>适用场景：</strong>作业/进程调度</li><li><strong>优先级设置规则：</strong><ul><li>静态/动态优先级</li><li>系统&gt;用户，交互型/非交互型；IO型&gt;计算型</li><li>低优先级进程可能会产生饥饿</li></ul></li></ul></li><li><p>时间片轮转调度（Round Robin, RR）</p><ul><li><strong>算法内容：</strong>按进程到达就绪队列的顺序，轮流分配一个时间片去执行，时间用完则剥夺。</li><li><strong>算法原则：</strong>公平轮流为每一个进程服务，进程在一定时间内得到响应</li><li><strong>调度放式：</strong>抢占式，由时钟中断确定时间到</li><li><strong>使用场景：</strong>进程调度</li><li><strong>优缺点：</strong><ul><li><font color="red">公平，响应快，适用于分时系统</font></li><li>时间片决定因素，系统响应时间，就绪队列进程数量，系统处理能力</li><li>时间片太大，相当于FCFS,太小，处理机切换频繁，开销增大。</li></ul></li></ul></li><li><p>多级反馈队列调度（Multilevel Feedback Queue）</p><ul><li><a href="https://imgse.com/i/xpqa2n"><img lazyload="" alt="image" data-src="https://s1.ax1x.com/2022/09/18/xpqa2n.png"></a></li><li>算法内容<ul><li>设置多个优先级排序的就绪队列优先级从高到低，时间片从小到大新进程采用队列降级法<ul><li>第一级队列中按照FCFS分时间片，没有执行完毕的进程移入第二级，只有前一队列中的进程全部执行完或阻塞，才开始执行第二及队列。</li><li>第一及队列中的进程阻塞，加入到第二及队列尾部。</li></ul></li></ul></li><li><strong>算法原则：</strong>集合前几种算法，相当于PSA+RR</li><li><strong>调度方式：</strong>抢占式</li><li><strong>适用场景：</strong>进程调度</li><li><strong>优缺点：</strong><ul><li>对各类型相对公平；快速响应</li><li>终端作业用户：短作业优先</li><li>批处理作业用户：周转时间短</li><li>长处理作业用户：在前几个队列部分执行</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络复习</title>
      <link href="/2023/04/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%A4%8D%E4%B9%A0/"/>
      <url>/2023/04/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="网络复习提纲"><a href="#网络复习提纲" class="headerlink" title="网络复习提纲"></a>网络复习提纲</h1><h4 id="1、-以太网的核心技术是什么-简述该协议协的要点。"><a href="#1、-以太网的核心技术是什么-简述该协议协的要点。" class="headerlink" title="1、 以太网的核心技术是什么?简述该协议协的要点。"></a>1、 以太网的核心技术是什么?简述该协议协的要点。</h4><p>以太网的核心技术是CSMA/CD（Carrier Sense Multiple Access with Collision Detection，带冲突检测的载波监听多路访问）技术。这种技术允许多个设备共享同一个以太网，避免了数据冲突和数据丢失，提高了网络的可靠性和效率。</p><p>CSMA/CD协议的要点如下：</p><ol><li>载波监听：发送数据前，设备首先要监听信道上是否有其它设备正在发送数据。如果检测到信道上有其它设备正在发送数据，设备会等待一段时间后再重新尝试发送数据。</li><li>多路访问：多个设备可以共享同一个以太网，同时发送和接收数据。</li><li>冲突检测：当两个或多个设备在同一时间尝试发送数据时，数据包会发生冲突。在这种情况下，所有设备都会检测到冲突，并且停止发送数据。这种机制可以防止数据包丢失，同时确保网络的可靠性。</li><li>重传机制：如果数据包在发送过程中发生冲突或者发送失败，设备会等待一段时间后重新尝试发送数据。这个过程会一直持续，直到数据包被成功发送或者达到重传次数的上限。</li></ol><p>总之，CSMA/CD协议是以太网实现共享访问和高效数据传输的关键技术，它通过使用载波监听和冲突检测机制，确保了多个设备在同一时间可以共享同一个以太网，并且可以避免数据冲突和数据丢失。同时，CSMA/CD协议还采用了重传机制，保证了数据的可靠传输。</p><h4 id="2、湖工校园网是局域网还是城域网、或广域网？其协议结构一般涉及ISO-TCP-x2F-IP-的哪些层？"><a href="#2、湖工校园网是局域网还是城域网、或广域网？其协议结构一般涉及ISO-TCP-x2F-IP-的哪些层？" class="headerlink" title="2、湖工校园网是局域网还是城域网、或广域网？其协议结构一般涉及ISO(TCP/IP)的哪些层？"></a>2、湖工校园网是局域网还是城域网、或广域网？其协议结构一般涉及ISO(TCP/IP)的哪些层？</h4><ul><li>局域网</li><li>物理层和数据链路层</li></ul><h4 id="3、什么是C-x2F-S客户－服务器、P2P-对等-两种通信方式，比较它们的区别、它们的联系。"><a href="#3、什么是C-x2F-S客户－服务器、P2P-对等-两种通信方式，比较它们的区别、它们的联系。" class="headerlink" title="3、什么是C/S客户－服务器、P2P(对等)两种通信方式，比较它们的区别、它们的联系。"></a>3、什么是C/S客户－服务器、P2P(对等)两种通信方式，比较它们的区别、它们的联系。</h4><ul><li><p><strong>C/S</strong></p><ul><li><p>客户端主要负责界面和处理业务逻辑，并为用户提供网络请求服务的接口，如数据查询服务</p></li><li><p>服务端一般以数据处理能力较强的数据库管理系统作为后台，负责接收和处理用户对服务的请求，并将这些服务透明地提供给用户。</p></li><li><p>特点：</p><ul><li>优点：交互性强，具有安全的存取模式，网络通信量低，响应速度快，利于处理大量的数据，可以充分利用两端硬件环境的优势，将任务合理分配到客户端和服务器端来实现，既适用于实际应用程序，又适用于统一的计算和处理。</li><li>缺点：即该结构的程序为针对性开发，不能灵活变更，维护和管理的难度比较大，通常只局限于小型局域网，不利于扩展。</li></ul><p><a href="https://imgse.com/i/zB0xK0"><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/markdownzB0xK0.png"></a></p></li></ul></li><li><p><strong>P2P</strong></p><ul><li>P2P（Peer-to-Peer）称为对等互连模型。<br>在此环境中，网络上的各台主机具有相同的功能，无主从之分，任一台计算机都是既可当服务器，设定共享资源供网络中其他计算机使用，又可作为工作站。<br>   从程序实现来说，一个应用程序同时起到客户端和服务器的作用。<br>   目前，它是小型局域网常用的组网方式，其优点是配置容易，通信便利，成本低；<br>   缺点是可靠性不如C/S模型，易遭黑客攻击。</li></ul><h4 id="4、设某帧待发送数据D-x3D-10100101-采用的生成多项式为P-x3D-X3-1-试求其实际发送-的序列。若采用以上生成多项式，求CRC校验码？"><a href="#4、设某帧待发送数据D-x3D-10100101-采用的生成多项式为P-x3D-X3-1-试求其实际发送-的序列。若采用以上生成多项式，求CRC校验码？" class="headerlink" title="4、设某帧待发送数据D=10100101,采用的生成多项式为P=X3 +1, 试求其实际发送  的序列。若采用以上生成多项式，求CRC校验码？"></a>4、设某帧待发送数据D=10100101,采用的生成多项式为P=X3 +1, 试求其实际发送  的序列。若采用以上生成多项式，求CRC校验码？</h4></li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="5、画图说明域名服务器（DNS）的工作原理和工作逻辑"><a href="#5、画图说明域名服务器（DNS）的工作原理和工作逻辑" class="headerlink" title="5、画图说明域名服务器（DNS）的工作原理和工作逻辑"></a>5、画图说明域名服务器（DNS）的工作原理和工作逻辑</h4><pre><code>                         +------------+                         |  用户输入域名   |                         +------------+                                |                                |                                v                         +------------+                         |  本地 DNS 服务器 |                         +------------+                                |                                |                                v                    缓存中有该域名对应的 IP 地址吗？                                |                        +------------------+                        |    直接返回 IP 地址    |                        +------------------+                                |                                |                                v                         向根域名服务器查询                                |                                |                                v                         +------------+                         |  根域名服务器  |                         +------------+                                |                                |                                v                     返回顶级域名服务器的地址                                |                                |                                v                         +------------+                         |  顶级域名服务器 |                         +------------+                                |                                |                                v                      返回权限域名服务器的地址                                |                                |                                v                         +------------+                         |  权限域名服务器 |                         +------------+                                |                                |                                v                     返回该域名对应的 IP 地址                                |                                |                                v                         +------------+                         |  本地 DNS 服务器 |                         +------------+                                |                                |                                v                        返回该 IP 地址给用户                                |                                |                                v                         +------------+                         |  用户访问域名   |                         +------------+</code></pre><p><a class="link" href="https://blog.csdn.net/ITwang1/article/details/120567964">https://blog.csdn.net/ITwang1/article/details/120567964<i class="fas fa-external-link-alt"></i></a></p><ol><li>用户输入要访问的网址，例如example.com。</li><li>用户的计算机首先会查看本地DNS缓存，看是否已经存储了该域名对应的IP地址。</li><li>如果本地DNS缓存中没有该域名对应的IP地址，用户的计算机会向其配置的本地DNS服务器发出请求。</li><li>如果本地DNS服务器也没有该域名对应的IP地址，它会向根域名服务器发出请求。</li><li>根域名服务器会返回一个包含下一级DNS服务器的IP地址的响应给本地DNS服务器。</li><li>本地DNS服务器再向下一级DNS服务器发出请求，并继续这个过程，直到找到包含所需域名对应IP地址的DNS服务器。</li><li>找到域名对应的IP地址后，本地DNS服务器将其缓存，并将其返回给用户的计算机，以便用户的计算机可以与该服务器建立连接并访问所需的网站。</li></ol><h4 id="6、说明虚电路和数据报的特性，简述本质区别"><a href="#6、说明虚电路和数据报的特性，简述本质区别" class="headerlink" title="6、说明虚电路和数据报的特性，简述本质区别"></a>6、说明虚电路和数据报的特性，简述本质区别</h4><ul><li><p>虚电路</p><ul><li><p>虚电路需要先通过呼叫建立一条虚电路，且建立后通道被占用，其他节点不能使用</p></li><li><p>可靠，保持顺序，一旦发生故障数据全部丢失。</p></li></ul></li><li><p>数据报</p><ul><li>没有专用通路</li><li>分组传输，如有故障可以绕过故障点。</li><li>不能保证按顺序到达，丢失不能立即知晓。</li></ul></li><li><p>区别</p><ul><li>传输通路</li><li>传输方式</li></ul></li></ul><h4 id="7、在TCP-x2F-IP体系结构中，与OSI参考模型层次对应关系"><a href="#7、在TCP-x2F-IP体系结构中，与OSI参考模型层次对应关系" class="headerlink" title="7、在TCP/IP体系结构中，与OSI参考模型层次对应关系"></a>7、在TCP/IP体系结构中，与OSI参考模型层次对应关系</h4><ol><li>OSI参考模型采用七层模型，而TCP/IP采用四层架构</li><li><a class="link" href="https://zhuanlan.zhihu.com/p/248667559">https://zhuanlan.zhihu.com/p/248667559<i class="fas fa-external-link-alt"></i></a></li></ol><p>​    <img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/markdownv2-4140cd55e3a6751407d4680c43382e63_720w.webp"></p><h4 id="8、ISP指的是什么？路由选择功能是在TCP模型的哪层由何种设备实现的？"><a href="#8、ISP指的是什么？路由选择功能是在TCP模型的哪层由何种设备实现的？" class="headerlink" title="8、ISP指的是什么？路由选择功能是在TCP模型的哪层由何种设备实现的？"></a>8、ISP指的是什么？路由选择功能是在TCP模型的哪层由何种设备实现的？</h4><ul><li>ISP==&gt;互联网服务提供商</li><li>网络层<ul><li>实现设备-&gt;路由器&amp;三层交换机（？？？）</li></ul></li></ul><h4 id="9、以太网交换机中的端口-x2F-MAC地址映射表是交换机在数据转发过程中如何建立的"><a href="#9、以太网交换机中的端口-x2F-MAC地址映射表是交换机在数据转发过程中如何建立的" class="headerlink" title="9、以太网交换机中的端口/MAC地址映射表是交换机在数据转发过程中如何建立的?"></a>9、以太网交换机中的端口/MAC地址映射表是交换机在数据转发过程中如何建立的?</h4><ul><li>交换机在数据转发过程中通过自学习动态建立的</li></ul><h4 id="10、-分析以下IP地址是否正确。"><a href="#10、-分析以下IP地址是否正确。" class="headerlink" title="10、 分析以下IP地址是否正确。"></a>10、 分析以下IP地址是否正确。</h4><pre class="line-numbers language-none"><code class="language-none">A77.76.75.74     B 201.35.7.18.20C 78.76.311.55     D 254.254.254.254<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="11、在TCP-x2F-IP参考模型中，应用层是最高的一层，举出不少于几个应用层的协议，并说明其为何种应用。"><a href="#11、在TCP-x2F-IP参考模型中，应用层是最高的一层，举出不少于几个应用层的协议，并说明其为何种应用。" class="headerlink" title="11、在TCP/IP参考模型中，应用层是最高的一层，举出不少于几个应用层的协议，并说明其为何种应用。"></a>11、在TCP/IP参考模型中，应用层是最高的一层，举出不少于几个应用层的协议，并说明其为何种应用。</h4><ol><li>DNS域名解析<ul><li>域名转换为iP地址</li></ul></li><li>FTP文件传输协议<ul><li>局域网文件存储服务器</li></ul></li><li>HTTP超文本传输协议</li><li>SMTP电子邮件协议<ul><li>简单邮件发送协议</li></ul></li><li>POP3邮件读取协议</li><li>Telnet远程终端协议</li></ol><h4 id="12、简述计算机网络的功能。"><a href="#12、简述计算机网络的功能。" class="headerlink" title="12、简述计算机网络的功能。"></a>12、简述计算机网络的功能。</h4><ul><li>数据交换资源共享</li></ul><h4 id="13、各层传输的数据单位分别是什么？"><a href="#13、各层传输的数据单位分别是什么？" class="headerlink" title="13、各层传输的数据单位分别是什么？"></a>13、各层传输的数据单位分别是什么？</h4><ul><li>物理层 ————-&gt;比特</li><li>数据链路层——–&gt;帧</li><li>网络层————–&gt;数据包</li><li>传输层—————&gt;报文</li><li>会话层以上的单位不再另外命名都叫报文</li></ul><h4 id="14、设某学校需要创建内部网络，共有6个部门，每个部门约有20－30台主机，试问：-若要将几个部门从网络上分开，如果分配该学校使用一个C类地址，其网络地址为192-168-161-0应如何划分子网？即："><a href="#14、设某学校需要创建内部网络，共有6个部门，每个部门约有20－30台主机，试问：-若要将几个部门从网络上分开，如果分配该学校使用一个C类地址，其网络地址为192-168-161-0应如何划分子网？即：" class="headerlink" title="14、设某学校需要创建内部网络，共有6个部门，每个部门约有20－30台主机，试问：.若要将几个部门从网络上分开，如果分配该学校使用一个C类地址，其网络地址为192.168.161.0应如何划分子网？即："></a>14、设某学校需要创建内部网络，共有6个部门，每个部门约有20－30台主机，试问：.若要将几个部门从网络上分开，如果分配该学校使用一个C类地址，其网络地址为192.168.161.0应如何划分子网？即：</h4><p>.每个子网的网络地址 、..子网掩码  .每个子网IP地址范围。</p><pre class="line-numbers language-none"><code class="language-none"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="15、互连网之所以能给用户提供许多服务，就是因为其具有哪两个特性？"><a href="#15、互连网之所以能给用户提供许多服务，就是因为其具有哪两个特性？" class="headerlink" title="15、互连网之所以能给用户提供许多服务，就是因为其具有哪两个特性？"></a>15、互连网之所以能给用户提供许多服务，就是因为其具有哪两个特性？</h4><ul><li><strong>连通性</strong></li><li><strong>共享性</strong></li></ul><h4 id="16、按网络的覆盖范围分类，哪几种网络，-Internet-属于哪类网？"><a href="#16、按网络的覆盖范围分类，哪几种网络，-Internet-属于哪类网？" class="headerlink" title="16、按网络的覆盖范围分类，哪几种网络， Internet 属于哪类网？"></a>16、按网络的覆盖范围分类，哪几种网络， Internet 属于哪类网？</h4><ul><li>局域网（LAN）</li><li>城域网（MAN）</li><li>广域网（WAN）&lt;=====属于</li></ul><h4 id="17、制定互连网正式标准要经过哪三个阶段？其合理性和必要性是什么？"><a href="#17、制定互连网正式标准要经过哪三个阶段？其合理性和必要性是什么？" class="headerlink" title="17、制定互连网正式标准要经过哪三个阶段？其合理性和必要性是什么？"></a>17、制定互连网正式标准要经过哪三个阶段？其合理性和必要性是什么？</h4><ol><li>互联网草案———-在这个阶段还不是RFC文档</li><li>建议标准————–开始成为RFC文档</li><li>互联网标准</li></ol><ul><li>互联网草案的有效期只有6个月，只有到了建议标准阶段才以RFC文档形式发表</li></ul><h4 id="18、线路交换相比与分组交换最大的优点和最大的缺点分别是什么？"><a href="#18、线路交换相比与分组交换最大的优点和最大的缺点分别是什么？" class="headerlink" title="18、线路交换相比与分组交换最大的优点和最大的缺点分别是什么？"></a>18、线路交换相比与分组交换最大的优点和最大的缺点分别是什么？</h4><ol><li><p>线路交换 </p><ul><li><p>优点</p><ul><li><p>通信线路由双方用户专用，数据直达，所以传输时延小</p></li><li><p>通信双方之间的物理通路一旦建立，双方可以随时通信，实时性强</p></li><li><p>双方通信时按发送顺序传送数据，不存在失序问题。</p></li></ul></li><li><p>缺点</p><ul><li>通信线路建立时间长</li><li>物理通路被通信双方独占，即使通信线路空闲，也不能供其他用户使用，因而信道利用率低。</li><li>数据直达，不同类型，不同规格，不同速率的终端很难相互进行通信，也难以在通信过程中进行差错控制。</li></ul></li></ul></li><li><p>分组交换</p><ul><li>优点<ul><li>不需要建立专用线路，不存在连接建立时延</li><li>采用存储转发方式，当某条线路故障时可以选择其他线路</li><li>分组较短，出错几率减少，每次重发的数据量也减少，不仅提高了可靠性，也减少了时延。</li><li>加速了数据在网络中的传输。因为分组是逐个传输，可以使后一个分组的存储操作与前一个分组的转发操作并行，这种流水线式传输方式减少了传输时间。</li></ul></li><li>缺点<ul><li>数据进入节点后要经历存储转发，需要排队，差错校验，发送（转发），接收，当通信量大时，时延也会增大，实时性差。</li><li>分组交换只适用于数字信号</li><li>可能会出现失序、丢失、重复分组问题，增加了处理麻烦。</li></ul></li></ul></li></ol><h4 id="19、已知IP地址为177-99-202-134-子网掩码为255-255-255-240-试计算该IP的网络地址和主机号"><a href="#19、已知IP地址为177-99-202-134-子网掩码为255-255-255-240-试计算该IP的网络地址和主机号" class="headerlink" title="19、已知IP地址为177.99.202.134,子网掩码为255.255.255.240,试计算该IP的网络地址和主机号"></a>19、已知IP地址为177.99.202.134,子网掩码为255.255.255.240,试计算该IP的网络地址和主机号</h4><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/markdownimage-20230216203623096.png"></p><h4 id="20、举例说明计算机网络中可以共享的资源包括哪些？"><a href="#20、举例说明计算机网络中可以共享的资源包括哪些？" class="headerlink" title="20、举例说明计算机网络中可以共享的资源包括哪些？"></a>20、举例说明计算机网络中可以共享的资源包括哪些？</h4><ol><li>硬件</li><li>软件</li><li>数据</li><li>通信信道</li></ol><h4 id="21、下面有关虚电路和数据报的特性，正确的说法是哪些？"><a href="#21、下面有关虚电路和数据报的特性，正确的说法是哪些？" class="headerlink" title="21、下面有关虚电路和数据报的特性，正确的说法是哪些？"></a>21、下面有关虚电路和数据报的特性，正确的说法是哪些？</h4><pre class="line-numbers language-none"><code class="language-none">A 虚电路和数据报分别为面向连接和面向无连接的服务 T 虚电路服务是面向连接的，数据报服务是面向无连接的B 数据报在网络中沿同一条路径传输，并且按发出顺序到达 FC 虚电路在建立连接之前，分组中只需要携带连接标识 F 之后D 虚电路中的分组到达顺序与发送顺序相同。T<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="22、简述-10Base-T以太网中，各参数的含义。"><a href="#22、简述-10Base-T以太网中，各参数的含义。" class="headerlink" title="22、简述 10Base-T以太网中，各参数的含义。"></a>22、简述 10Base-T以太网中，各参数的含义。</h4><ul><li>Tips:10BASE－T是双绞线以太网</li><li>10===&gt;传输速率</li><li>BASE===&gt;基带（传输方式）</li><li>T===&gt;双绞线</li></ul><h4 id="23、随着微型计算机的广泛应用，大量的微型计算机是通过局域网连入广域网，而局域网与广域网的互联是通过何种网络设备实现的，为什么要采用这种设备？"><a href="#23、随着微型计算机的广泛应用，大量的微型计算机是通过局域网连入广域网，而局域网与广域网的互联是通过何种网络设备实现的，为什么要采用这种设备？" class="headerlink" title="23、随着微型计算机的广泛应用，大量的微型计算机是通过局域网连入广域网，而局域网与广域网的互联是通过何种网络设备实现的，为什么要采用这种设备？"></a>23、随着微型计算机的广泛应用，大量的微型计算机是通过局域网连入广域网，而局域网与广域网的互联是通过何种网络设备实现的，为什么要采用这种设备？</h4><ul><li>路由器实现</li><li><h2 id="why"><a href="#why" class="headerlink" title="why"></a>why</h2></li></ul><h4 id="24、地址解析协议的内容是什么？有何作用？"><a href="#24、地址解析协议的内容是什么？有何作用？" class="headerlink" title="24、地址解析协议的内容是什么？有何作用？"></a>24、地址解析协议的内容是什么？有何作用？</h4><ul><li>根据IP地址寻找MAC地址</li></ul><h4 id="25、分析路由聚合的必要性"><a href="#25、分析路由聚合的必要性" class="headerlink" title="25、分析路由聚合的必要性"></a>25、分析路由聚合的必要性</h4><h4 id="26、举出身边使用虚拟专用网的实例，并说明下其用途"><a href="#26、举出身边使用虚拟专用网的实例，并说明下其用途" class="headerlink" title="26、举出身边使用虚拟专用网的实例，并说明下其用途"></a>26、举出身边使用虚拟专用网的实例，并说明下其用途</h4><ol><li>比如说一个总公司在北京。分公司在全国各地，那么就可以用虚拟专用网络来架设一个该公司的内部通信网络，这需要总公司这边一台VPN，分公司里各一台vpn，虚拟专用网络就是在互联网上架设一跳加密的隧道，而负责加密解密的就是vpn设备，相当于是在互联网上单独开设了一条隧道供该公司信息通信，虽然走的互联网，但是之后在VPn解密之后的公司内网里才能通信，其他人是访问不到的。</li><li>访问国外一些被墙的网站。</li></ol><h4 id="27、路由信息协议（RIP）主要应用于？"><a href="#27、路由信息协议（RIP）主要应用于？" class="headerlink" title="27、路由信息协议（RIP）主要应用于？"></a>27、路由信息协议（RIP）主要应用于？</h4><ul><li>路由器</li></ul><h4 id="28、网络层向上提供的服务有哪两种？TCP-x2F-IP网络层设计思路是什么？"><a href="#28、网络层向上提供的服务有哪两种？TCP-x2F-IP网络层设计思路是什么？" class="headerlink" title="28、网络层向上提供的服务有哪两种？TCP/IP网络层设计思路是什么？"></a>28、网络层向上提供的服务有哪两种？TCP/IP网络层设计思路是什么？</h4><p>​网络层向上提供的服务有以下两种：</p><ol><li>数据传输服务：网络层提供的主要服务是将分组从源主机传输到目的主机。在这个过程中，网络层负责选择最佳路径和路由，以及确保数据传输的可靠性和正确性。</li><li>路由选择服务：网络层还提供了路由选择服务，这是因为在复杂的网络中有多条路径可以传输数据。网络层使用路由选择算法来选择最佳路径，从而确保分组能够有效地到达目的主机。</li></ol><p>TCP/IP网络层的设计思路是将网络层分为两个子层：互联网协议（Internet Protocol, IP）和网络访问层（Network Access Layer）。</p><p>IP子层负责将分组从源主机传输到目的主机。它定义了分组的格式和内容，包括分组的头部信息和数据部分。IP协议还负责在复杂的网络中选择最佳路径和路由，以确保分组能够有效地到达目的主机。</p><p>网络访问层负责将数据帧从一个主机传输到另一个主机。它定义了数据帧的格式和内容，包括数据帧的头部信息和数据部分。网络访问层还负责实现物理层的接口和访问控制。</p><p>TCP/IP网络层的设计思路是简单、灵活和可靠的。通过将网络层分为两个子层，TCP/IP网络层可以轻松地适应各种网络环境和设备类型，并提供高效、可靠的数据传输服务。</p><h4 id="29、为什么要划分子网？子网掩码的作用？"><a href="#29、为什么要划分子网？子网掩码的作用？" class="headerlink" title="29、为什么要划分子网？子网掩码的作用？"></a>29、为什么要划分子网？子网掩码的作用？</h4><p>1、减少网络流量</p><p>　　2、提高网络性能</p><p>　　3、简化管理</p><p>　　4、易于扩大地理范围</p><ul><li><strong>是用来划分<a class="link" href="https://www.zhihu.com/search?q=IP%E5%9C%B0%E5%9D%80&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:447915532%7D">IP地址<i class="fas fa-external-link-alt"></i></a>中哪一部分是网络号，哪一部分是机器号</strong></li></ul><p><img lazyload="" alt="image" data-src="https://freelooptc.oss-cn-shenzhen.aliyuncs.com/markdownimage-20230216201305312.png"></p><h4 id="30、要发送的数据比特序列为1010111101，生成多项式为G（x）-x3D-x5-1-试计算其CRC校验码。"><a href="#30、要发送的数据比特序列为1010111101，生成多项式为G（x）-x3D-x5-1-试计算其CRC校验码。" class="headerlink" title="30、要发送的数据比特序列为1010111101，生成多项式为G（x）=x5+ 1,试计算其CRC校验码。"></a>30、要发送的数据比特序列为1010111101，生成多项式为G（x）=x5+ 1,试计算其CRC校验码。</h4><h4 id="32-、HUB-网桥、集线器，二层交换机，路由器等分别工作在哪层，其主要作用是什么"><a href="#32-、HUB-网桥、集线器，二层交换机，路由器等分别工作在哪层，其主要作用是什么" class="headerlink" title="32 、HUB,网桥、集线器，二层交换机，路由器等分别工作在哪层，其主要作用是什么"></a>32 、HUB,网桥、集线器，二层交换机，路由器等分别工作在哪层，其主要作用是什么</h4><ul><li><p>HUB=====物理层=====网络连线的中央连接点，组成星型网络</p></li><li><p>二层交换机=====数据链路层=====物理地址寻址、数据的成帧、流量控制、数据的检错、重发</p></li><li><p>路由器=====网络层=====連接不同網路</p></li><li><p>网桥=====数据链路层</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些Mysql知识点</title>
      <link href="/2023/04/05/%E4%B8%80%E4%BA%9BMysql%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2023/04/05/%E4%B8%80%E4%BA%9BMysql%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库错题-amp-遗忘知识点"><a href="#数据库错题-amp-遗忘知识点" class="headerlink" title="数据库错题&amp;遗忘知识点"></a>数据库错题&amp;遗忘知识点</h1><h2 id="1-结构化查询语言"><a href="#1-结构化查询语言" class="headerlink" title="1. 结构化查询语言"></a>1. 结构化查询语言</h2><p>DDL：(Data Definition Language) 数据库模式定义语言，关键字：<font color="red">create ，alter，drop，rename，truncate</font><br>DML：(Data Manipulation Language) 数据操纵语言，关键字：<font color="red">Insert、delete、update </font><br>DCL：(Data Control Language) 数据库控制语言 ，关键字：<font color="red">grant、remove </font><br>DQL：数据库查询语言，关键字：<font color="red">select</font><br>TPL：事务处理语言<br>CCL：指针控制语言<br><strong>Tips: DDL作用在数据表上，DML作用在数据表的元组上</strong></p><h2 id="2-ORDER-BY-默认ASC-升序排序-DESC-降序排序"><a href="#2-ORDER-BY-默认ASC-升序排序-DESC-降序排序" class="headerlink" title="2. ORDER BY 默认ASC 升序排序 DESC 降序排序"></a>2. ORDER BY 默认ASC 升序排序 DESC 降序排序</h2><h2 id="3-主键和唯一索引"><a href="#3-主键和唯一索引" class="headerlink" title="3. 主键和唯一索引"></a>3. 主键和唯一索引</h2><p>主键是一种<font color="red">约束</font>，唯一索引是一种<font color="red">索引</font>，两者在本质上是不同的。<br><strong>主键创建后一定包含一个唯一性索引，唯一性索引并不一定就是主键。</strong><br>唯一性索引列允许空值，而主键列不允许为空值。<br>主键列在创建时，已经默认不为空值 + 唯一索引。<br>主键可以被其他表引用为外键，而唯一索引不能。<br>一个表最多只能创建<font color="red">一个主键</font>，但可以创建<font color="red">多个唯一索引</font>。<br>主键更适合那些不容易更改的唯一标识，如自动递增列、身份证号等。 在 RBO 模式下，<br>主键的执行计划优先级要高于唯一索引。 两者可以提高查询的速度。</p><h2 id="4-数据设计流程"><a href="#4-数据设计流程" class="headerlink" title="4. 数据设计流程"></a>4. 数据设计流程</h2><p>数据库设计通常分为6个阶段<br><font color="red">需求分析</font>：分析用户的需求，包括数据、功能和性能需求；<br><font color="red">概念结构设计</font>：主要采用<font color="red">E-R模型</font>进行设计，包括画E-R图；<br><font color="red">逻辑结构设计</font>：通过将E-R图转换成表，实现从<font color="red">E-R模型到关系模型</font>的转换；<br><font color="red">数据库物理设计</font>：主要是为所设计的数据库选择合适的<font color="red">存储结构和存取路径</font>；<br><font color="red">数据库的实施</font>：包括编程、测试和试运行；<br><font color="red">数据库运行与维护</font>：系统的运行与数据库的日常维护。</p><h2 id="5-字符串匹配"><a href="#5-字符串匹配" class="headerlink" title="5. 字符串匹配"></a>5. 字符串匹配</h2><p>“_”匹配任何单个字符</p><p>“%”匹配任意数目字符（包括零个字符）</p><p>“*”匹配0个或多个在它前面的字符</p><p>“[]”匹配在方括号中的任意一个字符</p><h2 id="6-数据库中删除约束的方法："><a href="#6-数据库中删除约束的方法：" class="headerlink" title="6. 数据库中删除约束的方法："></a>6. 数据库中删除约束的方法：</h2><p>删除<font color="red">主键约束</font>：<br>alter table 表名 drop primary key;<br>删除<font color="red">外键约束</font>：<br>alter table 表名 drop foreign key 外键;</p><h2 id="7-数据独立性包括物理独立性和逻辑独立性。"><a href="#7-数据独立性包括物理独立性和逻辑独立性。" class="headerlink" title="7. 数据独立性包括物理独立性和逻辑独立性。"></a>7. 数据独立性包括物理独立性和逻辑独立性。</h2><p><font color="red">物理独立性</font>指应用程序与<font color="blue">存储在磁盘的数据库</font>中数据相互独立，即数据物理存储改变时应用程序不变。<br><font color="red">逻辑独立性</font>指应用程序与<font color="blue">数据库逻辑结构</font>相互独立，即数据逻辑结构改变时，应用程序可以不变</p><h2 id="8-数据库的范式"><a href="#8-数据库的范式" class="headerlink" title="8. 数据库的范式"></a>8. 数据库的范式</h2><p><font color="red">1NF</font>：每个<font color="blue">列不能分割</font>，即原子性。<br><font color="red">2NF</font>: 满足原子性情况下，每个非主属性依赖于主键，<font color="blue">不存在部分依赖</font><br><font color="red">3NF</font>: 在2NF下，<font color="blue">不存在函数传递依赖</font>。<br>第一范式：所有属性必须是原子的，某个属性有多个值时，必须拆分成不同的属性</p><p>第二范式：需满足1NF，非码属性必须完全依赖于候选码；即数据库中的每个实例或记录可以被唯一的区分。简而言之，第二范式就是在第一范式的基础上属性<font color="blue">完全依赖于主键</font>。</p><p>第三范式：在2NF基础上，任何非主属性不依赖于其他非主属性。换言之，第三范式（3NF）要求一个关系中不包含已在其它关系已包含的非主关键字信息。即关系不能包含其他关系中非主键的信息。</p><p>巴斯-科徳范式：在3NF基础上，任何非主属性不能对主键子集依赖（在3NF基础上消除对主码子集的依赖），为第三范式的修正</p><h2 id="9-SELECT语句的处理过程"><a href="#9-SELECT语句的处理过程" class="headerlink" title="9. SELECT语句的处理过程"></a>9. SELECT语句的处理过程</h2><p><strong>FROM(including JOINs) —&gt; WHERE —&gt; GROUP BY —&gt; HAVING —&gt; SELECT —&gt; DISTINCT —&gt; ORDER BY —&gt; LIMIT/OFFSET</strong></p><ol><li>FROM阶段</li><li>WHERE阶段</li><li>GROUP BY阶段</li><li>HAVING阶段</li><li>SELECT阶段</li><li>ORDER BY阶段</li></ol><h2 id="10-数据库设计的阶段"><a href="#10-数据库设计的阶段" class="headerlink" title="10. 数据库设计的阶段"></a>10. 数据库设计的阶段</h2><p><font color="red">需求分析阶段</font>的任务是：对现实世界要处理的对象（组织、部门、企业等）进行详细调查，在了解现行系统的概况，确定新系统功能的过程中，确定系统边界、收集支持系统目标的基础数据及其处理方法。</p><p><font color="red">概念设计阶段</font>的任务是：对用户要求描述的现实世界，通过对其进行分类、聚集和概括，建立抽象的概念数据模型，如果是关系数据库，其得到的结果是ER模型。</p><p><font color="red">逻辑设计阶段</font>的任务是：将概念数据模型设计成数据库的一种逻辑模式（关系模式），然后对关系模式进一步做规范化处理，从而提高存储效率和处理效率。</p><p><font color="red">物理结构设计</font>的任务是：根据特定数据库管理系统所提供的多种存储结构和存取方法，为具体的应用任务选定最合适的物理存储结构、存取方法和存取路径等。这一步设计的结果就是物理数据库</p><h2 id="11-常用的数据模型："><a href="#11-常用的数据模型：" class="headerlink" title="11. 常用的数据模型："></a>11. 常用的<font color="red">数据模型</font>：</h2><p>概念模型、逻辑模型、物理模型</p><h2 id="12-常用的逻辑模型："><a href="#12-常用的逻辑模型：" class="headerlink" title="12. 常用的逻辑模型："></a>12. 常用的<font color="red">逻辑模型</font>：</h2><p>层次模型、网状模型、关系模型</p><h4 id="三种逻辑模型的逻辑结构关系"><a href="#三种逻辑模型的逻辑结构关系" class="headerlink" title="三种逻辑模型的逻辑结构关系"></a>三种逻辑模型的逻辑结构关系</h4><p>关系数据模型的逻辑结构是<font color="red">关系</font><br>层次数据模型的逻辑结构是<font color="red">树</font><br>网状数据结构的逻辑结构是<font color="red">图</font></p><h2 id="13-数据模型的三要素"><a href="#13-数据模型的三要素" class="headerlink" title="13. 数据模型的三要素"></a>13. 数据模型的三要素</h2><p>数据结构<br>数据操作<br>数据完整性约束</p><h2 id="14-关系数据模型的缺点："><a href="#14-关系数据模型的缺点：" class="headerlink" title="14. 关系数据模型的缺点："></a>14. 关系数据模型的缺点：</h2><p>存取路径对用户透明，需查询优化</p><h2 id="15-数据库与文件系统的根本区别"><a href="#15-数据库与文件系统的根本区别" class="headerlink" title="15. 数据库与文件系统的根本区别"></a>15. 数据库与文件系统的根本区别</h2><p>数据结构化</p><h2 id="16-关系完整性"><a href="#16-关系完整性" class="headerlink" title="16. 关系完整性"></a>16. 关系完整性</h2><p>1）<strong>实体完整性</strong>约束—–主键约束<br>2）<strong>参照完整性</strong>约束—–外键约束<br>3）<strong>用户自定义完整性</strong>约束—–检查/非空/默认值约束</p><h2 id="17-数据库系统的三级模式结构"><a href="#17-数据库系统的三级模式结构" class="headerlink" title="17. 数据库系统的三级模式结构"></a>17. 数据库系统的三级模式结构</h2><p>外模式、模式在逻辑设计阶段得到，内模式在物理设计阶段得到。<br>数据库的结构被划分成用户级、概念级和存储级三个层次</p><h3 id="1-模式-也称为逻辑模式或概念模式"><a href="#1-模式-也称为逻辑模式或概念模式" class="headerlink" title="1. 模式:  也称为逻辑模式或概念模式"></a>1. 模式:  也称为逻辑模式或概念模式</h3><p>模式是数据库中<font color="red">全体数据的逻辑结构和特征</font>的描述，是所有用户的公共数据视图。 模式实际上是数据库数据在逻辑级上的视图。<br>一个数据库只有一个模式。定义模式时不仅要定义数据的逻辑结构，而且要定义数据之间的联系，定义与数据有关的安全性、完整性要求。</p><h3 id="2-外模式-也称用户模式-子模式"><a href="#2-外模式-也称用户模式-子模式" class="headerlink" title="2. 外模式 也称用户模式 子模式"></a>2. 外模式 也称用户模式 子模式</h3><p>它是数据库用户能够看见和使用的<font color="red">局部数据的逻辑结构和特征的描述</font>，是数据库用户的数据视图，是与某一应用有关的数据的逻辑表示。<font color="red"> 外模式通常是模式的子集</font>。<br>一个数据库可以有多个外模式。应用程序都是和外模式打交道的。外模式是保证数据库安全性的一个有力措施。每个用户只能看见和访问所对应的外模式中的数据，数据库中的其余数据对他们是不可见的。 </p><h3 id="3-内模式-也称存储模式"><a href="#3-内模式-也称存储模式" class="headerlink" title="3. 内模式 也称存储模式"></a>3. 内模式 也称存储模式</h3><p> 一个数据库只有一个内模式。它是<font color="red">数据物理结构和存储方式</font>的描述，是数据在数据库内部的表示方式。例如，记录的存储方式是顺序结构存储还是B树结构存储；索引按什么方式组织；数据是否压缩，是否加密；数据的存储记录结构有何规定等。………..</p><h2 id="18-模式映像"><a href="#18-模式映像" class="headerlink" title="18. 模式映像"></a>18. 模式映像</h2><p>模式到内模式的映像实现了数据的<font color="red">物理独立性</font>。<br>外模式到模式的映像实现了数据的<font color="red">逻辑独立性</font>。</p><h2 id="19-SQL-JOIN"><a href="#19-SQL-JOIN" class="headerlink" title="19. SQL JOIN"></a>19. SQL JOIN</h2><p>INNER JOIN：如果表中有至少一个匹配，则返回行<br>LEFT JOIN：即使右表中没有匹配，也从左表返回所有的行<br>RIGHT JOIN：即使左表中没有匹配，也从右表返回所有的行<br>FULL JOIN：只要其中一个表中存在匹配，则返回行 MySql不支持Full Join</p><p>![SQL_JOIN](<a class="link" href="https://github.com/FreeL00P/MarkDown_photo/raw/main/sql">https://github.com/FreeL00P/MarkDown_photo/raw/main/sql<i class="fas fa-external-link-alt"></i></a> join.png “SQL_JOIN”)</p><h2 id="20-闭包"><a href="#20-闭包" class="headerlink" title="20. 闭包"></a>20. 闭包</h2><p>闭包就是由一个属性直接或间接推导出的所有属性的集合，例如： </p><p>f={a-&gt;b,b-&gt;c,a-&gt;d,e-&gt;f}  </p><p>由a可直接得到b和d，间接得到c，则a的闭包就是{a,b,c,d}</p><h2 id="21-DBMS的数据控制功能"><a href="#21-DBMS的数据控制功能" class="headerlink" title="21. DBMS的数据控制功能"></a>21. DBMS的数据控制功能</h2><p><strong>数据的安全性</strong>保护：<br>    保护数据以防止不合法的使用造成的数据泄密和破坏；<br><strong>数据的完整性</strong>检查：<br>    将数据控制在有效的范围内或保证数据之间满足一定的关系，一<br>定的约束条件；<br><strong>并发控制</strong>：<br>    对多用户的并发操作加以控制和协调，保证并发操作的正确性；<br>·<strong>数据库恢复</strong>：</p><h2 id="22-DBMS的主要功能"><a href="#22-DBMS的主要功能" class="headerlink" title="22. DBMS的主要功能"></a>22. DBMS的主要功能</h2><p>数据库定义功能；<br>数据组织、存储和管理功能；<br>数据操纵功能；<br>数据库的事务管理和运行管理；<br>数据库的建立和维护功能；</p><h2 id="23-数据模型的组成"><a href="#23-数据模型的组成" class="headerlink" title="23. 数据模型的组成"></a>23. 数据模型的组成</h2><p>数据结构、数据操作和完整性约束</p><h2 id="24-关系模型的组成"><a href="#24-关系模型的组成" class="headerlink" title="24. 关系模型的组成"></a>24. 关系模型的组成</h2><p>1.关系数据模型的数据结构<br>2.关系数据模型的操作集合<br>3.关系数据模型的完整性约束</p><h2 id="25-关系模型"><a href="#25-关系模型" class="headerlink" title="25. 关系模型"></a>25. 关系模型</h2><p>关系：一个关系对应通常说的一张表<br>属性：表中的一列即为一个属性；<br>域：属性的取值范围；<br>元组：表中的一行即为一个元组；<br>码：表中的某个属性组，它可以唯一确定一个元组；<br>分量：元组中的一个属性值；</p><h2 id="26-候选码，主码，外码"><a href="#26-候选码，主码，外码" class="headerlink" title="26. 候选码，主码，外码"></a>26. 候选码，主码，外码</h2><p>候选码: 关系中的某一属性能唯一标识一个元组，而其子集不能<br>主码：一个关系有多个候选码，则选定其中一个为主码<br>外码：外键</p><h2 id="27-SQL语言的功能"><a href="#27-SQL语言的功能" class="headerlink" title="27. SQL语言的功能"></a>27. SQL语言的功能</h2><p>数据定义、<br>数据操纵、<br>数据控制</p><h2 id="28-聚集索引"><a href="#28-聚集索引" class="headerlink" title="28. 聚集索引"></a>28. 聚集索引</h2><p>有存储实际数据<br>物理上连续<br>可以用B树实现</p><h2 id="29-数据库范式"><a href="#29-数据库范式" class="headerlink" title="29. 数据库范式"></a>29. 数据库范式</h2><p>关系型数据库设计必须符合第一范式，在这种范式下一个数据列只能有一个值<br>满足第四范式必然满足第三范式，满足第三范式必然满足第二范式<br>通过数据范式的引入，可以减少数据冗余，消除数据操作异常<br>数据库设计时，符合的范式的等级<font color="red">不是越高越好</font></p><h2 id="30-唯一性约束（UNIQUE）"><a href="#30-唯一性约束（UNIQUE）" class="headerlink" title="30. 唯一性约束（UNIQUE）"></a>30. 唯一性约束（UNIQUE）</h2><p>唯一性约束用来限制不受主键约束的列上的数据的唯一性，用于作为访问某行的可选手段，一个表上可以放置多个唯一性约束．<br>只要唯一就可以更新．<br>即表中任意两行在 指定列上都不允许有相同的值，允许空（NULL）．<br>一个表上可以放置多个唯一性约束</p><h2 id="31-SQL-语言的数据定义功能"><a href="#31-SQL-语言的数据定义功能" class="headerlink" title="31. SQL 语言的数据定义功能"></a>31. SQL 语言的数据定义功能</h2><p>模式定义<br>表定义<br>索引定义<br>视图定义</p><h2 id="32-ANY-ALL-谓词与聚集函数或-IN-谓词可能存在的等价转换关系"><a href="#32-ANY-ALL-谓词与聚集函数或-IN-谓词可能存在的等价转换关系" class="headerlink" title="32 . ANY ALL 谓词与聚集函数或 IN 谓词可能存在的等价转换关系"></a>32 . ANY ALL 谓词与聚集函数或 IN 谓词可能存在的等价转换关系</h2><p><img lazyload="" alt="image" data-src="https://raw.githubusercontent.com/FreeL00P/MarkDown_photo/main/Snipaste_2022-04-06_20-39-43.png"></p><h2 id="33-事务-Transaction-属性"><a href="#33-事务-Transaction-属性" class="headerlink" title="33. 事务(Transaction)属性"></a>33. 事务(Transaction)属性</h2><p>原子性(Atomic)</p><p>一致性(Consistent)</p><p>隔离性(Isolated)</p><p>持久性(Durable)</p><h2 id="34-视图的3种设计次序"><a href="#34-视图的3种设计次序" class="headerlink" title="34. 视图的3种设计次序"></a>34. 视图的3种设计次序</h2><p>自顶向下<br>由内向外<br>自底向上</p><h2 id="35-delete和truncate的比较"><a href="#35-delete和truncate的比较" class="headerlink" title="35. delete和truncate的比较"></a>35. delete和truncate的比较</h2><p>1、处理效率：drop&gt;trustcate&gt;delete<br>2、drop删除整个表；trustcate删除全部记录，但不删除表；delete删除部分记录<br>3、delete不影响所用extent，高水线保持原位置不动；trustcate会将高水线复位</p><h2 id="一些知识点"><a href="#一些知识点" class="headerlink" title="一些知识点"></a>一些知识点</h2><p>**一般情况下，当对关系R和S进行等值连接时，<font color="red">不要</font>求R和S含有一个或者多个共有的属性 **</p><p><strong>数据库管理系统的主要作用是实现数据的统一管理以及对数据库数据的一切操作</strong></p><p><strong>数据库管理系统（DBMS）是维护数据库数据的一系统软件的集合，是系统软件</strong></p><p><strong>在进行数据库逻辑设计时，可将 E-R 图中的属性表示为关系模式的属性</strong></p><p><strong>关系完备的系统是指支持关系数据结构和所有关系代数操作</strong></p><p><strong>在SQL中，与“NOT IN”等价的操作符是&lt; &gt;ALL</strong></p><p><strong>1个表只能有一个聚族索引，多个非聚族索引</strong></p><p><strong>多余的索引字段会降低性能</strong></p><p><strong>SQL Server是一个基于关系模型的DBMS</strong></p><p>基本关系中不同的列可以出自同一个域</p><p>子模式 DDL 用来描述数据库的局部逻辑结构  </p><p>数据库管理系统是一组软件</p><p>SQL 语言是非过程化的语言，易学习。</p><p>通过指针链接来表示和实现实体之间联系的模型是层次和网状模型。</p><p>每一个关系只有一种记录类型；关系中元组的顺序是无关紧要的；关系中的每个属性是不可分解的</p><p>候选码不一定是主码</p><p>一个关系可以有多个属性，一个关系只能有一个主键，但可以由多个列（属性）组成的组合主键。</p><p>在数据库的非关系模型中，基本层次联系是两个记录型以及它们之间的一对多联系</p><p>设计数据库概念结构时，常用的数据抽象方法是概括，分类，聚集。</p><p>表由字段和记录组成。</p><p>数据库系统的核心是数据库管理系统。</p>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
